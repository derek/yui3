{
    "build/recordset-base/recordset-base.js": {
        "path": "build/recordset-base/recordset-base.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 127,
            "4": 355,
            "5": 139,
            "6": 216,
            "7": 0,
            "8": 1,
            "9": 1,
            "10": 36,
            "11": 1,
            "12": 36,
            "13": 36,
            "14": 36,
            "15": 4,
            "16": 1,
            "17": 3,
            "18": 3,
            "19": 0,
            "20": 96,
            "21": 2,
            "22": 2,
            "23": 2,
            "24": 4,
            "25": 2,
            "26": 25,
            "27": 2,
            "28": 2,
            "29": 6,
            "30": 2,
            "31": 15,
            "32": 15,
            "33": 15,
            "34": 7,
            "35": 20,
            "36": 8,
            "37": 8,
            "38": 15,
            "39": 15,
            "40": 8,
            "41": 8,
            "42": 8,
            "43": 8,
            "44": 8,
            "45": 8,
            "46": 1,
            "47": 1,
            "48": 6,
            "49": 6,
            "50": 6,
            "51": 6,
            "52": 9,
            "53": 6,
            "54": 6,
            "55": 15,
            "56": 8,
            "57": 6,
            "58": 9,
            "59": 1,
            "60": 30,
            "61": 30,
            "62": 30,
            "63": 30,
            "64": 30,
            "65": 0,
            "66": 36,
            "67": 93,
            "68": 93,
            "69": 233,
            "70": 93,
            "71": 13,
            "72": 17,
            "73": 13,
            "74": 6,
            "75": 5,
            "76": 6,
            "77": 1,
            "78": 36,
            "79": 144,
            "80": 35,
            "81": 0,
            "82": 35,
            "83": 35,
            "84": 98,
            "85": 35,
            "86": 9,
            "87": 1,
            "88": 1
        },
        "b": {
            "1": [
                139,
                216
            ],
            "2": [
                1,
                35
            ],
            "3": [
                1,
                3
            ],
            "4": [
                3,
                0
            ],
            "5": [
                2,
                0
            ],
            "6": [
                2,
                2
            ],
            "7": [
                3,
                12
            ],
            "8": [
                15,
                3
            ],
            "9": [
                7,
                8
            ],
            "10": [
                8,
                0
            ],
            "11": [
                7,
                1
            ],
            "12": [
                3,
                5
            ],
            "13": [
                3,
                3
            ],
            "14": [
                8,
                0
            ],
            "15": [
                30,
                30
            ],
            "16": [
                30,
                0
            ],
            "17": [
                5,
                1
            ],
            "18": [
                6,
                6
            ],
            "19": [
                36,
                1
            ],
            "20": [
                20,
                124
            ],
            "21": [
                0,
                35
            ]
        },
        "f": {
            "1": 1,
            "2": 127,
            "3": 127,
            "4": 0,
            "5": 355,
            "6": 36,
            "7": 4,
            "8": 96,
            "9": 2,
            "10": 25,
            "11": 2,
            "12": 15,
            "13": 8,
            "14": 1,
            "15": 6,
            "16": 15,
            "17": 8,
            "18": 6,
            "19": 1,
            "20": 30,
            "21": 0,
            "22": 36,
            "23": 93,
            "24": 13,
            "25": 6,
            "26": 1,
            "27": 36,
            "28": 144,
            "29": 35,
            "30": 9
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 26
                    },
                    "end": {
                        "line": 1,
                        "column": 45
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 9,
                "loc": {
                    "start": {
                        "line": 9,
                        "column": 12
                    },
                    "end": {
                        "line": 9,
                        "column": 23
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 13,
                "loc": {
                    "start": {
                        "line": 13,
                        "column": 17
                    },
                    "end": {
                        "line": 13,
                        "column": 28
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 16,
                "loc": {
                    "start": {
                        "line": 16,
                        "column": 16
                    },
                    "end": {
                        "line": 16,
                        "column": 27
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 26,
                "loc": {
                    "start": {
                        "line": 26,
                        "column": 14
                    },
                    "end": {
                        "line": 26,
                        "column": 30
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 94,
                "loc": {
                    "start": {
                        "line": 94,
                        "column": 17
                    },
                    "end": {
                        "line": 94,
                        "column": 28
                    }
                }
            },
            "7": {
                "name": "(anonymous_7)",
                "line": 191,
                "loc": {
                    "start": {
                        "line": 191,
                        "column": 15
                    },
                    "end": {
                        "line": 191,
                        "column": 27
                    }
                }
            },
            "8": {
                "name": "(anonymous_8)",
                "line": 210,
                "loc": {
                    "start": {
                        "line": 210,
                        "column": 22
                    },
                    "end": {
                        "line": 210,
                        "column": 34
                    }
                }
            },
            "9": {
                "name": "(anonymous_9)",
                "line": 222,
                "loc": {
                    "start": {
                        "line": 222,
                        "column": 23
                    },
                    "end": {
                        "line": 222,
                        "column": 46
                    }
                }
            },
            "10": {
                "name": "(anonymous_10)",
                "line": 240,
                "loc": {
                    "start": {
                        "line": 240,
                        "column": 15
                    },
                    "end": {
                        "line": 240,
                        "column": 26
                    }
                }
            },
            "11": {
                "name": "(anonymous_11)",
                "line": 254,
                "loc": {
                    "start": {
                        "line": 254,
                        "column": 20
                    },
                    "end": {
                        "line": 254,
                        "column": 34
                    }
                }
            },
            "12": {
                "name": "(anonymous_12)",
                "line": 273,
                "loc": {
                    "start": {
                        "line": 273,
                        "column": 9
                    },
                    "end": {
                        "line": 273,
                        "column": 32
                    }
                }
            },
            "13": {
                "name": "(anonymous_13)",
                "line": 307,
                "loc": {
                    "start": {
                        "line": 307,
                        "column": 12
                    },
                    "end": {
                        "line": 307,
                        "column": 35
                    }
                }
            },
            "14": {
                "name": "(anonymous_14)",
                "line": 331,
                "loc": {
                    "start": {
                        "line": 331,
                        "column": 11
                    },
                    "end": {
                        "line": 331,
                        "column": 22
                    }
                }
            },
            "15": {
                "name": "(anonymous_15)",
                "line": 346,
                "loc": {
                    "start": {
                        "line": 346,
                        "column": 12
                    },
                    "end": {
                        "line": 346,
                        "column": 34
                    }
                }
            },
            "16": {
                "name": "(anonymous_16)",
                "line": 377,
                "loc": {
                    "start": {
                        "line": 377,
                        "column": 15
                    },
                    "end": {
                        "line": 377,
                        "column": 27
                    }
                }
            },
            "17": {
                "name": "(anonymous_17)",
                "line": 390,
                "loc": {
                    "start": {
                        "line": 390,
                        "column": 18
                    },
                    "end": {
                        "line": 390,
                        "column": 30
                    }
                }
            },
            "18": {
                "name": "(anonymous_18)",
                "line": 402,
                "loc": {
                    "start": {
                        "line": 402,
                        "column": 18
                    },
                    "end": {
                        "line": 402,
                        "column": 30
                    }
                }
            },
            "19": {
                "name": "(anonymous_19)",
                "line": 416,
                "loc": {
                    "start": {
                        "line": 416,
                        "column": 17
                    },
                    "end": {
                        "line": 416,
                        "column": 29
                    }
                }
            },
            "20": {
                "name": "(anonymous_20)",
                "line": 427,
                "loc": {
                    "start": {
                        "line": 427,
                        "column": 17
                    },
                    "end": {
                        "line": 427,
                        "column": 30
                    }
                }
            },
            "21": {
                "name": "(anonymous_21)",
                "line": 456,
                "loc": {
                    "start": {
                        "line": 456,
                        "column": 24
                    },
                    "end": {
                        "line": 456,
                        "column": 48
                    }
                }
            },
            "22": {
                "name": "(anonymous_22)",
                "line": 468,
                "loc": {
                    "start": {
                        "line": 468,
                        "column": 21
                    },
                    "end": {
                        "line": 468,
                        "column": 36
                    }
                }
            },
            "23": {
                "name": "(anonymous_23)",
                "line": 485,
                "loc": {
                    "start": {
                        "line": 485,
                        "column": 14
                    },
                    "end": {
                        "line": 485,
                        "column": 37
                    }
                }
            },
            "24": {
                "name": "(anonymous_24)",
                "line": 508,
                "loc": {
                    "start": {
                        "line": 508,
                        "column": 17
                    },
                    "end": {
                        "line": 508,
                        "column": 40
                    }
                }
            },
            "25": {
                "name": "(anonymous_25)",
                "line": 530,
                "loc": {
                    "start": {
                        "line": 530,
                        "column": 17
                    },
                    "end": {
                        "line": 530,
                        "column": 41
                    }
                }
            },
            "26": {
                "name": "(anonymous_26)",
                "line": 550,
                "loc": {
                    "start": {
                        "line": 550,
                        "column": 16
                    },
                    "end": {
                        "line": 550,
                        "column": 27
                    }
                }
            },
            "27": {
                "name": "(anonymous_27)",
                "line": 560,
                "loc": {
                    "start": {
                        "line": 560,
                        "column": 20
                    },
                    "end": {
                        "line": 560,
                        "column": 31
                    }
                }
            },
            "28": {
                "name": "(anonymous_28)",
                "line": 572,
                "loc": {
                    "start": {
                        "line": 572,
                        "column": 21
                    },
                    "end": {
                        "line": 572,
                        "column": 35
                    }
                }
            },
            "29": {
                "name": "(anonymous_29)",
                "line": 585,
                "loc": {
                    "start": {
                        "line": 585,
                        "column": 17
                    },
                    "end": {
                        "line": 585,
                        "column": 34
                    }
                }
            },
            "30": {
                "name": "(anonymous_30)",
                "line": 614,
                "loc": {
                    "start": {
                        "line": 614,
                        "column": 20
                    },
                    "end": {
                        "line": 614,
                        "column": 31
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 650,
                    "column": 53
                }
            },
            "2": {
                "start": {
                    "line": 8,
                    "column": 0
                },
                "end": {
                    "line": 57,
                    "column": 3
                }
            },
            "3": {
                "start": {
                    "line": 10,
                    "column": 8
                },
                "end": {
                    "line": 10,
                    "column": 24
                }
            },
            "4": {
                "start": {
                    "line": 27,
                    "column": 8
                },
                "end": {
                    "line": 32,
                    "column": 9
                }
            },
            "5": {
                "start": {
                    "line": 28,
                    "column": 12
                },
                "end": {
                    "line": 28,
                    "column": 36
                }
            },
            "6": {
                "start": {
                    "line": 31,
                    "column": 12
                },
                "end": {
                    "line": 31,
                    "column": 43
                }
            },
            "7": {
                "start": {
                    "line": 33,
                    "column": 8
                },
                "end": {
                    "line": 33,
                    "column": 20
                }
            },
            "8": {
                "start": {
                    "line": 59,
                    "column": 0
                },
                "end": {
                    "line": 59,
                    "column": 18
                }
            },
            "9": {
                "start": {
                    "line": 69,
                    "column": 0
                },
                "end": {
                    "line": 644,
                    "column": 3
                }
            },
            "10": {
                "start": {
                    "line": 98,
                    "column": 8
                },
                "end": {
                    "line": 100,
                    "column": 9
                }
            },
            "11": {
                "start": {
                    "line": 99,
                    "column": 12
                },
                "end": {
                    "line": 99,
                    "column": 29
                }
            },
            "12": {
                "start": {
                    "line": 103,
                    "column": 8
                },
                "end": {
                    "line": 172,
                    "column": 11
                }
            },
            "13": {
                "start": {
                    "line": 174,
                    "column": 8
                },
                "end": {
                    "line": 174,
                    "column": 46
                }
            },
            "14": {
                "start": {
                    "line": 176,
                    "column": 8
                },
                "end": {
                    "line": 181,
                    "column": 40
                }
            },
            "15": {
                "start": {
                    "line": 193,
                    "column": 8
                },
                "end": {
                    "line": 198,
                    "column": 9
                }
            },
            "16": {
                "start": {
                    "line": 194,
                    "column": 12
                },
                "end": {
                    "line": 194,
                    "column": 40
                }
            },
            "17": {
                "start": {
                    "line": 196,
                    "column": 13
                },
                "end": {
                    "line": 198,
                    "column": 9
                }
            },
            "18": {
                "start": {
                    "line": 197,
                    "column": 12
                },
                "end": {
                    "line": 197,
                    "column": 34
                }
            },
            "19": {
                "start": {
                    "line": 199,
                    "column": 8
                },
                "end": {
                    "line": 199,
                    "column": 20
                }
            },
            "20": {
                "start": {
                    "line": 211,
                    "column": 8
                },
                "end": {
                    "line": 211,
                    "column": 30
                }
            },
            "21": {
                "start": {
                    "line": 223,
                    "column": 8
                },
                "end": {
                    "line": 224,
                    "column": 29
                }
            },
            "22": {
                "start": {
                    "line": 226,
                    "column": 8
                },
                "end": {
                    "line": 226,
                    "column": 65
                }
            },
            "23": {
                "start": {
                    "line": 228,
                    "column": 8
                },
                "end": {
                    "line": 230,
                    "column": 9
                }
            },
            "24": {
                "start": {
                    "line": 229,
                    "column": 12
                },
                "end": {
                    "line": 229,
                    "column": 57
                }
            },
            "25": {
                "start": {
                    "line": 231,
                    "column": 8
                },
                "end": {
                    "line": 231,
                    "column": 31
                }
            },
            "26": {
                "start": {
                    "line": 241,
                    "column": 8
                },
                "end": {
                    "line": 241,
                    "column": 27
                }
            },
            "27": {
                "start": {
                    "line": 255,
                    "column": 8
                },
                "end": {
                    "line": 257,
                    "column": 21
                }
            },
            "28": {
                "start": {
                    "line": 258,
                    "column": 8
                },
                "end": {
                    "line": 260,
                    "column": 9
                }
            },
            "29": {
                "start": {
                    "line": 259,
                    "column": 12
                },
                "end": {
                    "line": 259,
                    "column": 55
                }
            },
            "30": {
                "start": {
                    "line": 261,
                    "column": 8
                },
                "end": {
                    "line": 261,
                    "column": 23
                }
            },
            "31": {
                "start": {
                    "line": 275,
                    "column": 8
                },
                "end": {
                    "line": 277,
                    "column": 14
                }
            },
            "32": {
                "start": {
                    "line": 279,
                    "column": 8
                },
                "end": {
                    "line": 279,
                    "column": 81
                }
            },
            "33": {
                "start": {
                    "line": 282,
                    "column": 8
                },
                "end": {
                    "line": 288,
                    "column": 9
                }
            },
            "34": {
                "start": {
                    "line": 283,
                    "column": 12
                },
                "end": {
                    "line": 285,
                    "column": 13
                }
            },
            "35": {
                "start": {
                    "line": 284,
                    "column": 16
                },
                "end": {
                    "line": 284,
                    "column": 63
                }
            },
            "36": {
                "start": {
                    "line": 286,
                    "column": 15
                },
                "end": {
                    "line": 288,
                    "column": 9
                }
            },
            "37": {
                "start": {
                    "line": 287,
                    "column": 12
                },
                "end": {
                    "line": 287,
                    "column": 56
                }
            },
            "38": {
                "start": {
                    "line": 290,
                    "column": 8
                },
                "end": {
                    "line": 293,
                    "column": 11
                }
            },
            "39": {
                "start": {
                    "line": 294,
                    "column": 8
                },
                "end": {
                    "line": 294,
                    "column": 20
                }
            },
            "40": {
                "start": {
                    "line": 308,
                    "column": 8
                },
                "end": {
                    "line": 308,
                    "column": 28
                }
            },
            "41": {
                "start": {
                    "line": 311,
                    "column": 8
                },
                "end": {
                    "line": 311,
                    "column": 63
                }
            },
            "42": {
                "start": {
                    "line": 312,
                    "column": 8
                },
                "end": {
                    "line": 312,
                    "column": 39
                }
            },
            "43": {
                "start": {
                    "line": 314,
                    "column": 8
                },
                "end": {
                    "line": 314,
                    "column": 63
                }
            },
            "44": {
                "start": {
                    "line": 315,
                    "column": 8
                },
                "end": {
                    "line": 319,
                    "column": 11
                }
            },
            "45": {
                "start": {
                    "line": 322,
                    "column": 8
                },
                "end": {
                    "line": 322,
                    "column": 20
                }
            },
            "46": {
                "start": {
                    "line": 332,
                    "column": 8
                },
                "end": {
                    "line": 332,
                    "column": 31
                }
            },
            "47": {
                "start": {
                    "line": 333,
                    "column": 8
                },
                "end": {
                    "line": 333,
                    "column": 20
                }
            },
            "48": {
                "start": {
                    "line": 347,
                    "column": 8
                },
                "end": {
                    "line": 349,
                    "column": 18
                }
            },
            "49": {
                "start": {
                    "line": 353,
                    "column": 8
                },
                "end": {
                    "line": 353,
                    "column": 54
                }
            },
            "50": {
                "start": {
                    "line": 354,
                    "column": 8
                },
                "end": {
                    "line": 354,
                    "column": 59
                }
            },
            "51": {
                "start": {
                    "line": 356,
                    "column": 8
                },
                "end": {
                    "line": 358,
                    "column": 9
                }
            },
            "52": {
                "start": {
                    "line": 357,
                    "column": 12
                },
                "end": {
                    "line": 357,
                    "column": 50
                }
            },
            "53": {
                "start": {
                    "line": 360,
                    "column": 8
                },
                "end": {
                    "line": 364,
                    "column": 11
                }
            },
            "54": {
                "start": {
                    "line": 366,
                    "column": 8
                },
                "end": {
                    "line": 366,
                    "column": 20
                }
            },
            "55": {
                "start": {
                    "line": 378,
                    "column": 8
                },
                "end": {
                    "line": 378,
                    "column": 76
                }
            },
            "56": {
                "start": {
                    "line": 391,
                    "column": 8
                },
                "end": {
                    "line": 391,
                    "column": 50
                }
            },
            "57": {
                "start": {
                    "line": 403,
                    "column": 8
                },
                "end": {
                    "line": 405,
                    "column": 9
                }
            },
            "58": {
                "start": {
                    "line": 404,
                    "column": 12
                },
                "end": {
                    "line": 404,
                    "column": 74
                }
            },
            "59": {
                "start": {
                    "line": 417,
                    "column": 8
                },
                "end": {
                    "line": 417,
                    "column": 25
                }
            },
            "60": {
                "start": {
                    "line": 428,
                    "column": 8
                },
                "end": {
                    "line": 430,
                    "column": 20
                }
            },
            "61": {
                "start": {
                    "line": 434,
                    "column": 8
                },
                "end": {
                    "line": 434,
                    "column": 64
                }
            },
            "62": {
                "start": {
                    "line": 436,
                    "column": 8
                },
                "end": {
                    "line": 437,
                    "column": 73
                }
            },
            "63": {
                "start": {
                    "line": 439,
                    "column": 8
                },
                "end": {
                    "line": 441,
                    "column": 9
                }
            },
            "64": {
                "start": {
                    "line": 440,
                    "column": 12
                },
                "end": {
                    "line": 440,
                    "column": 39
                }
            },
            "65": {
                "start": {
                    "line": 457,
                    "column": 8
                },
                "end": {
                    "line": 457,
                    "column": 41
                }
            },
            "66": {
                "start": {
                    "line": 469,
                    "column": 8
                },
                "end": {
                    "line": 469,
                    "column": 62
                }
            },
            "67": {
                "start": {
                    "line": 486,
                    "column": 8
                },
                "end": {
                    "line": 487,
                    "column": 19
                }
            },
            "68": {
                "start": {
                    "line": 489,
                    "column": 8
                },
                "end": {
                    "line": 491,
                    "column": 9
                }
            },
            "69": {
                "start": {
                    "line": 490,
                    "column": 12
                },
                "end": {
                    "line": 490,
                    "column": 47
                }
            },
            "70": {
                "start": {
                    "line": 493,
                    "column": 8
                },
                "end": {
                    "line": 493,
                    "column": 20
                }
            },
            "71": {
                "start": {
                    "line": 509,
                    "column": 8
                },
                "end": {
                    "line": 511,
                    "column": 9
                }
            },
            "72": {
                "start": {
                    "line": 510,
                    "column": 12
                },
                "end": {
                    "line": 510,
                    "column": 47
                }
            },
            "73": {
                "start": {
                    "line": 513,
                    "column": 8
                },
                "end": {
                    "line": 513,
                    "column": 20
                }
            },
            "74": {
                "start": {
                    "line": 531,
                    "column": 8
                },
                "end": {
                    "line": 533,
                    "column": 9
                }
            },
            "75": {
                "start": {
                    "line": 532,
                    "column": 12
                },
                "end": {
                    "line": 532,
                    "column": 75
                }
            },
            "76": {
                "start": {
                    "line": 535,
                    "column": 8
                },
                "end": {
                    "line": 535,
                    "column": 62
                }
            },
            "77": {
                "start": {
                    "line": 551,
                    "column": 8
                },
                "end": {
                    "line": 551,
                    "column": 18
                }
            },
            "78": {
                "start": {
                    "line": 561,
                    "column": 8
                },
                "end": {
                    "line": 561,
                    "column": 80
                }
            },
            "79": {
                "start": {
                    "line": 573,
                    "column": 8
                },
                "end": {
                    "line": 573,
                    "column": 77
                }
            },
            "80": {
                "start": {
                    "line": 586,
                    "column": 8
                },
                "end": {
                    "line": 588,
                    "column": 9
                }
            },
            "81": {
                "start": {
                    "line": 587,
                    "column": 12
                },
                "end": {
                    "line": 587,
                    "column": 45
                }
            },
            "82": {
                "start": {
                    "line": 590,
                    "column": 8
                },
                "end": {
                    "line": 591,
                    "column": 19
                }
            },
            "83": {
                "start": {
                    "line": 594,
                    "column": 8
                },
                "end": {
                    "line": 596,
                    "column": 9
                }
            },
            "84": {
                "start": {
                    "line": 595,
                    "column": 12
                },
                "end": {
                    "line": 595,
                    "column": 56
                }
            },
            "85": {
                "start": {
                    "line": 598,
                    "column": 8
                },
                "end": {
                    "line": 598,
                    "column": 39
                }
            },
            "86": {
                "start": {
                    "line": 616,
                    "column": 16
                },
                "end": {
                    "line": 616,
                    "column": 44
                }
            },
            "87": {
                "start": {
                    "line": 645,
                    "column": 0
                },
                "end": {
                    "line": 645,
                    "column": 32
                }
            },
            "88": {
                "start": {
                    "line": 646,
                    "column": 0
                },
                "end": {
                    "line": 646,
                    "column": 24
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 27,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 27,
                            "column": 8
                        },
                        "end": {
                            "line": 27,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 27,
                            "column": 8
                        },
                        "end": {
                            "line": 27,
                            "column": 8
                        }
                    }
                ]
            },
            "2": {
                "line": 98,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 98,
                            "column": 8
                        },
                        "end": {
                            "line": 98,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 98,
                            "column": 8
                        },
                        "end": {
                            "line": 98,
                            "column": 8
                        }
                    }
                ]
            },
            "3": {
                "line": 193,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 193,
                            "column": 8
                        },
                        "end": {
                            "line": 193,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 193,
                            "column": 8
                        },
                        "end": {
                            "line": 193,
                            "column": 8
                        }
                    }
                ]
            },
            "4": {
                "line": 196,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 196,
                            "column": 13
                        },
                        "end": {
                            "line": 196,
                            "column": 13
                        }
                    },
                    {
                        "start": {
                            "line": 196,
                            "column": 13
                        },
                        "end": {
                            "line": 196,
                            "column": 13
                        }
                    }
                ]
            },
            "5": {
                "line": 226,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 226,
                            "column": 56
                        },
                        "end": {
                            "line": 226,
                            "column": 61
                        }
                    },
                    {
                        "start": {
                            "line": 226,
                            "column": 63
                        },
                        "end": {
                            "line": 226,
                            "column": 64
                        }
                    }
                ]
            },
            "6": {
                "line": 226,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 226,
                            "column": 17
                        },
                        "end": {
                            "line": 226,
                            "column": 37
                        }
                    },
                    {
                        "start": {
                            "line": 226,
                            "column": 42
                        },
                        "end": {
                            "line": 226,
                            "column": 51
                        }
                    }
                ]
            },
            "7": {
                "line": 279,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 279,
                            "column": 55
                        },
                        "end": {
                            "line": 279,
                            "column": 60
                        }
                    },
                    {
                        "start": {
                            "line": 279,
                            "column": 62
                        },
                        "end": {
                            "line": 279,
                            "column": 80
                        }
                    }
                ]
            },
            "8": {
                "line": 279,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 279,
                            "column": 15
                        },
                        "end": {
                            "line": 279,
                            "column": 35
                        }
                    },
                    {
                        "start": {
                            "line": 279,
                            "column": 40
                        },
                        "end": {
                            "line": 279,
                            "column": 50
                        }
                    }
                ]
            },
            "9": {
                "line": 282,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 282,
                            "column": 8
                        },
                        "end": {
                            "line": 282,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 282,
                            "column": 8
                        },
                        "end": {
                            "line": 282,
                            "column": 8
                        }
                    }
                ]
            },
            "10": {
                "line": 286,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 286,
                            "column": 15
                        },
                        "end": {
                            "line": 286,
                            "column": 15
                        }
                    },
                    {
                        "start": {
                            "line": 286,
                            "column": 15
                        },
                        "end": {
                            "line": 286,
                            "column": 15
                        }
                    }
                ]
            },
            "11": {
                "line": 311,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 311,
                            "column": 31
                        },
                        "end": {
                            "line": 311,
                            "column": 36
                        }
                    },
                    {
                        "start": {
                            "line": 311,
                            "column": 39
                        },
                        "end": {
                            "line": 311,
                            "column": 61
                        }
                    }
                ]
            },
            "12": {
                "line": 312,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 312,
                            "column": 30
                        },
                        "end": {
                            "line": 312,
                            "column": 35
                        }
                    },
                    {
                        "start": {
                            "line": 312,
                            "column": 37
                        },
                        "end": {
                            "line": 312,
                            "column": 38
                        }
                    }
                ]
            },
            "13": {
                "line": 353,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 353,
                            "column": 40
                        },
                        "end": {
                            "line": 353,
                            "column": 46
                        }
                    },
                    {
                        "start": {
                            "line": 353,
                            "column": 49
                        },
                        "end": {
                            "line": 353,
                            "column": 53
                        }
                    }
                ]
            },
            "14": {
                "line": 391,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 391,
                            "column": 36
                        },
                        "end": {
                            "line": 391,
                            "column": 43
                        }
                    },
                    {
                        "start": {
                            "line": 391,
                            "column": 47
                        },
                        "end": {
                            "line": 391,
                            "column": 48
                        }
                    }
                ]
            },
            "15": {
                "line": 436,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 436,
                            "column": 18
                        },
                        "end": {
                            "line": 436,
                            "column": 31
                        }
                    },
                    {
                        "start": {
                            "line": 437,
                            "column": 20
                        },
                        "end": {
                            "line": 437,
                            "column": 72
                        }
                    }
                ]
            },
            "16": {
                "line": 439,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 439,
                            "column": 8
                        },
                        "end": {
                            "line": 439,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 439,
                            "column": 8
                        },
                        "end": {
                            "line": 439,
                            "column": 8
                        }
                    }
                ]
            },
            "17": {
                "line": 531,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 531,
                            "column": 8
                        },
                        "end": {
                            "line": 531,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 531,
                            "column": 8
                        },
                        "end": {
                            "line": 531,
                            "column": 8
                        }
                    }
                ]
            },
            "18": {
                "line": 531,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 531,
                            "column": 12
                        },
                        "end": {
                            "line": 531,
                            "column": 25
                        }
                    },
                    {
                        "start": {
                            "line": 531,
                            "column": 29
                        },
                        "end": {
                            "line": 531,
                            "column": 49
                        }
                    }
                ]
            },
            "19": {
                "line": 561,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 561,
                            "column": 59
                        },
                        "end": {
                            "line": 561,
                            "column": 70
                        }
                    },
                    {
                        "start": {
                            "line": 561,
                            "column": 74
                        },
                        "end": {
                            "line": 561,
                            "column": 76
                        }
                    }
                ]
            },
            "20": {
                "line": 573,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 573,
                            "column": 43
                        },
                        "end": {
                            "line": 573,
                            "column": 46
                        }
                    },
                    {
                        "start": {
                            "line": 573,
                            "column": 49
                        },
                        "end": {
                            "line": 573,
                            "column": 76
                        }
                    }
                ]
            },
            "21": {
                "line": 586,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 586,
                            "column": 8
                        },
                        "end": {
                            "line": 586,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 586,
                            "column": 8
                        },
                        "end": {
                            "line": 586,
                            "column": 8
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('recordset-base', function (Y, NAME) {",
            "",
            "/**",
            " * Provides a wrapper around a standard javascript object. Can be inserted into a Recordset instance.",
            " *",
            " * @class Record",
            " */",
            "var Record = Y.Base.create('record', Y.Base, [], {",
            "    _setId: function() {",
            "        return Y.guid();",
            "    },",
            "",
            "    initializer: function() {",
            "    },",
            "",
            "    destructor: function() {",
            "    },",
            "",
            "    /**",
            "     * Retrieve a particular (or all) values from the object",
            "     *",
            "     * @param field {string} (optional) The key to retrieve the value from. If not supplied, the entire object is returned.",
            "     * @method getValue",
            "     * @public",
            "     */",
            "    getValue: function(field) {",
            "        if (field === undefined) {",
            "            return this.get(\"data\");",
            "        }",
            "        else {",
            "            return this.get(\"data\")[field];",
            "        }",
            "        return null;",
            "    }",
            "},",
            "{",
            "    ATTRS: {",
            "",
            "        /**",
            "        * @description Unique ID of the record instance",
            "        * @attribute id",
            "        * @type string",
            "        */",
            "        id: {",
            "            valueFn: \"_setId\"",
            "        },",
            "",
            "        /**",
            "        * @description The object stored within the record instance",
            "        * @attribute data",
            "        * @type object",
            "        */",
            "        data: {",
            "            value: null",
            "        }",
            "    }",
            "});",
            "",
            "Y.Record = Record;",
            "/**",
            "The Recordset utility provides a standard way for dealing with",
            "a collection of similar objects.",
            "@module recordset",
            "@main recordset",
            "@submodule recordset-base",
            "**/",
            "",
            "",
            "var ArrayList = Y.ArrayList,",
            "Lang = Y.Lang,",
            "",
            "/**",
            "The Recordset utility provides a standard way for dealing with",
            "a collection of similar objects.",
            "",
            "Provides the base Recordset implementation, which can be extended to add",
            "additional functionality, such as custom indexing. sorting, and filtering.",
            "",
            "@class Recordset",
            "@extends Base",
            "@uses ArrayList",
            "@param config {Object} Configuration object with initial attribute values",
            "@constructor",
            "**/",
            "Recordset = Y.Base.create('recordset', Y.Base, [], {",
            "",
            "",
            "    /**",
            "     * Publish default functions for events. Create the initial hash table.",
            "     *",
            "     * @method initializer",
            "     * @protected",
            "     */",
            "    initializer: function() {",
            "        // The reason the conditional is needed is because of two scenarios:",
            "        // 1. Instantiating new Y.Recordset() will not go into the setter of \"records\", and so it is necessary to create this._items in the initializer.",
            "        // 2. Instantiating new Y.Recordset({records: [{...}]}) will call the setter of \"records\" and create this._items. In this case, we don't want that to be overwritten by [].",
            "        if (!this._items) {",
            "            this._items = [];",
            "        }",
            "",
            "        //set up event listener to fire events when recordset is modified in anyway",
            "        this.publish({",
            "            /**",
            "             * <p>At least one record is being added. Additional properties of",
            "             * the event are:</p>",
            "             * <dl>",
            "             *     <dt>added</dt>",
            "             *         <dd>Array of new records to be added</dd>",
            "             *     <dt>index</dt>",
            "             *         <dd>The insertion index in the Recordset's internal",
            "             *         array</dd>",
            "             * </dl>",
            "             *",
            "             * <p>Preventing this event will cause the new records NOT to be",
            "             * added to the Recordset's internal collection.</p>",
            "             *",
            "             * @event add",
            "             * @preventable _defAddFn",
            "             */",
            "            add: { defaultFn: this._defAddFn },",
            "",
            "            /**",
            "             * <p>At least one record is being removed. Additional properties of",
            "             * the event are:</p>",
            "             * <dl>",
            "             *     <dt>removed</dt>",
            "             *         <dd>Array of records to be removed</dd>",
            "             *     <dt>range</dt>",
            "             *         <dd>Number of records to be removed</dd>",
            "             *     <dt>index</dt>",
            "             *         <dd>The starting index in the Recordset's internal",
            "             *         array from which to remove records</dd>",
            "             * </dl>",
            "             *",
            "             * <p>Preventing this event will cause the records NOT to be",
            "             * removed from the Recordset's internal collection.</p>",
            "             *",
            "             * @event remove",
            "             * @preventable _defRemoveFn",
            "             */",
            "            remove: { defaultFn: this._defRemoveFn },",
            "",
            "            /**",
            "             * The Recordset is being flushed of all records.",
            "             *",
            "             * @event empty",
            "             * @preventable _defEmptyFn",
            "             */",
            "            empty: { defaultFn: this._defEmptyFn },",
            "",
            "            /**",
            "             * <p>At least one record is being updated. Additional properties of",
            "             * the event are:</p>",
            "             * <dl>",
            "             *     <dt>updated</dt>",
            "             *         <dd>Array of records with updated values</dd>",
            "             *     <dt>overwritten</dt>",
            "             *         <dd>Array of current records that will be replaced</dd>",
            "             *     <dt>index</dt>",
            "             *         <dd>The starting index in the Recordset's internal",
            "             *         array from which to update will apply</dd>",
            "             * </dl>",
            "             *",
            "             * <p>Preventing this event will cause the records NOT to be",
            "             * updated in the Recordset's internal collection.</p>",
            "             *",
            "             * @event update",
            "             * @preventable _defUpdateFn",
            "             */",
            "            update: { defaultFn: this._defUpdateFn }",
            "        });",
            "",
            "        this._buildHashTable(this.get('key'));",
            "",
            "        this.after([",
            "            'recordsChange',",
            "            'add',",
            "            'remove',",
            "            'update',",
            "            'empty'], this._updateHash);",
            "    },",
            "",
            "    /**",
            "     * Returns the record with particular ID or index",
            "     *",
            "     * @method getRecord",
            "     * @param i {String, Number} The ID of the record if a string, or the index if a number.",
            "     * @return {Record} A Y.Record instance",
            "     */",
            "    getRecord: function(i) {",
            "",
            "        if (Lang.isString(i)) {",
            "            return this.get('table')[i];",
            "        }",
            "        else if (Lang.isNumber(i)) {",
            "            return this._items[i];",
            "        }",
            "        return null;",
            "    },",
            "",
            "",
            "    /**",
            "     * Returns the record at a particular index",
            "     *",
            "     * @method getRecordByIndex",
            "     * @param i {Number} Index at which the required record resides",
            "     * @return {Record} A Y.Record instance",
            "     */",
            "    getRecordByIndex: function(i) {",
            "        return this._items[i];",
            "    },",
            "",
            "    /**",
            "     * Returns a range of records beginning at particular index",
            "     *",
            "     * @method getRecordsByIndex",
            "     * @param index {Number} Index at which the required record resides",
            "     * @param range {Number} (Optional) Number of records to retrieve. The default is 1",
            "     * @return {Array} An array of Y.Record instances",
            "     */",
            "    getRecordsByIndex: function(index, range) {",
            "        var i = 0,",
            "        returnedRecords = [];",
            "        //Range cannot take on negative values",
            "        range = (Lang.isNumber(range) && (range > 0)) ? range: 1;",
            "",
            "        for (; i < range; i++) {",
            "            returnedRecords.push(this._items[index + i]);",
            "        }",
            "        return returnedRecords;",
            "    },",
            "",
            "    /**",
            "     * Returns the length of the recordset",
            "     *",
            "     * @method getLength",
            "     * @return {Number} Number of records in the recordset",
            "     */",
            "    getLength: function() {",
            "        return this.size();",
            "    },",
            "",
            "    /**",
            "    Gets an array of values for a data _key_ in the set's records.  If no _key_",
            "    is supplied, the returned array will contain the full data object for each",
            "    record.",
            "",
            "    @method getValuesByKey",
            "    @param {String} [key] Data property to get from all records",
            "    @return {Array} An array of values for the given _key_ if supplied.",
            "        Otherwise, an array of each record's data hash.",
            "    **/",
            "    getValuesByKey: function(key) {",
            "        var i = 0,",
            "        len = this._items.length,",
            "        retVals = [];",
            "        for (; i < len; i++) {",
            "            retVals.push(this._items[i].getValue(key));",
            "        }",
            "        return retVals;",
            "    },",
            "",
            "",
            "    /**",
            "     * Adds one or more Records to the RecordSet at the given index. If index is null, then adds the Records to the end of the RecordSet.",
            "     *",
            "     * @method add",
            "     * @param {Record|Object|Array} oData A Y.Record instance, An object literal of data or an array of object literals",
            "     * @param [index] {Number} [index] Index at which to add the record(s)",
            "     * @return {Recordset} The updated recordset instance",
            "     */",
            "    add: function(oData, index) {",
            "",
            "        var newRecords = [],",
            "        idx,",
            "        i = 0;",
            "",
            "        idx = (Lang.isNumber(index) && (index > -1)) ? index: this._items.length;",
            "",
            "        //Passing in array of object literals for oData",
            "        if (Lang.isArray(oData)) {",
            "            for (; i < oData.length; i++) {",
            "                newRecords[i] = this._changeToRecord(oData[i]);",
            "            }",
            "        } else if (Lang.isObject(oData)) {",
            "            newRecords[0] = this._changeToRecord(oData);",
            "        }",
            "",
            "        this.fire('add', {",
            "            added: newRecords,",
            "            index: idx",
            "        });",
            "        return this;",
            "    },",
            "",
            "    /**",
            "    Removes one or more Records to the RecordSet at the given index. If index",
            "    is null, then removes a single Record from the end of the RecordSet.",
            "    ",
            "    @method remove",
            "    @param {Number} [index] Index at which to remove the record(s) from",
            "    @param {Number} [range] Number of records to remove (including the one",
            "        at the index)",
            "    @return {Recordset} The updated recordset instance",
            "    **/",
            "    remove: function(index, range) {",
            "        var remRecords = [];",
            "",
            "        //Default is to only remove the last record - the length is always 1 greater than the last index",
            "        index = (index > -1) ? index: (this._items.length - 1);",
            "        range = (range > 0) ? range: 1;",
            "",
            "        remRecords = this._items.slice(index, (index + range));",
            "        this.fire('remove', {",
            "            removed: remRecords,",
            "            range: range,",
            "            index: index",
            "        });",
            "        //this._recordRemoved(remRecords, index);",
            "        //return ({data: remRecords, index:index});",
            "        return this;",
            "    },",
            "",
            "    /**",
            "     * Empties the recordset",
            "     *",
            "     * @method empty",
            "     * @return {Recordset} The updated recordset instance",
            "     */",
            "    empty: function() {",
            "        this.fire('empty', {});",
            "        return this;",
            "    },",
            "",
            "    /**",
            "    Updates the recordset with the new records passed in. Overwrites existing",
            "    records when updating the index with the new records.",
            "    ",
            "    @method update",
            "    @param {Record|Object|Array} data A Y.Record instance, An object literal of",
            "        data or an array of object literals",
            "    @param {Number} [index] The index to start updating from. ",
            "    @return {Recordset} The updated recordset instance",
            "    **/",
            "    update: function(data, index) {",
            "        var rec,",
            "            arr,",
            "            i = 0;",
            "",
            "        // Whatever is passed in, we are changing it to an array so that it can",
            "        // be easily iterated in the _defUpdateFn method",
            "        arr = (!(Lang.isArray(data))) ? [data] : data;",
            "        rec = this._items.slice(index, index + arr.length);",
            "",
            "        for (; i < arr.length; i++) {",
            "            arr[i] = this._changeToRecord(arr[i]);",
            "        }",
            "",
            "        this.fire('update', {",
            "            updated: arr,",
            "            overwritten: rec,",
            "            index: index",
            "        });",
            "",
            "        return this;",
            "    },",
            "",
            "    /**",
            "     * Default behavior for the \"add\" event. Adds Record instances starting from",
            "     * the index specified in `e.index`.",
            "     *",
            "     * @method _defAddFn",
            "     * @param {EventFacade} e The add event",
            "     * @private",
            "     */",
            "    _defAddFn: function(e) {",
            "        this._items.splice.apply(this._items, [e.index, 0].concat(e.added));",
            "    },",
            "",
            "    /**",
            "     * Default behavior for the \"remove\" event. Removes Records from the",
            "     * internal array starting from `e.index`.  By default, it will remove one",
            "     * Record. But if `e.range` is set, it will remove that many Records.",
            "     *",
            "     * @method _defRemoveFn",
            "     * @param {EventFacade} e The remove event",
            "     * @private",
            "     */",
            "    _defRemoveFn: function(e) {",
            "        this._items.splice(e.index, e.range || 1);",
            "    },",
            "",
            "    /**",
            "     * Default behavior for the \"update\" event. Sets Record instances for each",
            "     * item in `e.updated` at indexes starting from `e.index`.",
            "     *",
            "     * @method _defUpdateFn",
            "     * @param {EventFacade} e The update event",
            "     * @private",
            "     */",
            "    _defUpdateFn: function(e) {",
            "        for (var i = 0; i < e.updated.length; i++) {",
            "            this._items[e.index + i] = this._changeToRecord(e.updated[i]);",
            "        }",
            "    },",
            "",
            "    /**",
            "     * Default behavior for the \"empty\" event. Clears the internal array of",
            "     * Records.",
            "     *",
            "     * @method _defEmptyFn",
            "     * @param {EventFacade} e The empty event",
            "     * @private",
            "     */",
            "    _defEmptyFn: function(e) {",
            "        this._items = [];",
            "    },",
            "",
            "    /**",
            "    Updates the internal hash table.",
            "",
            "    @method _defUpdateHash",
            "    @param {EventFacade} e Event triggering the hash table update",
            "    @private",
            "    **/",
            "    _updateHash: function (e) {",
            "        var handler = \"_hash\",",
            "            type = e.type.replace(/.*:/,''),",
            "            newHash;",
            "",
            "        // _hashAdd, _hashRemove, _hashEmpty, etc",
            "        // Not a switch or else if setup to allow for external expansion.",
            "        handler += type.charAt(0).toUpperCase() + type.slice(1);",
            "",
            "        newHash = this[handler] &&",
            "                    this[handler](this.get('table'), this.get('key'), e);",
            "",
            "        if (newHash) {",
            "            this.set('table', newHash);",
            "        }",
            "    },",
            "",
            "    /**",
            "    Regenerates the hash table from the current internal array of Records.",
            "",
            "    @method _hashRecordsChange",
            "    @param {Object} hash The hash map before replacement",
            "    @param {String} key The key by which to add items to the hash",
            "    @param {Object} e The event or object containing the items to be added.",
            "                      Items are expected to be stored in an array assigned to",
            "                      the `added` property.",
            "    @return {Object} The updated hash map",
            "    @private",
            "    **/",
            "    _hashRecordsChange: function (hash, key, e) {",
            "        return this._buildHashTable(key);",
            "    },",
            "",
            "    /**",
            "    Builds a hash table from the current internal array of Records.",
            "",
            "    @method _buildHashTable",
            "    @param {String} key The Record key to hash the items by",
            "    @return {Object} A new hash map of Records keyed by each Records' key",
            "    @private",
            "    **/",
            "    _buildHashTable: function (key) {",
            "        return this._hashAdd({}, key, { added: this._items });",
            "    },",
            "",
            "    /**",
            "    Adds items to the hash table.  Items are the values, and the keys are the",
            "    values of the item's attribute named in the `key` parameter.",
            "",
            "    @method _hashAdd",
            "    @param {Object} hash The hash map before adding items",
            "    @param {String} key The key by which to add the items to the hash",
            "    @param {Object} e The event or object containing the items to be added.",
            "                      Items are expected to be stored in an array assigned to",
            "                      the `added` property.",
            "    @return {Object} The updated hash map",
            "    @private",
            "    **/",
            "    _hashAdd: function(hash, key, e) {",
            "        var items = e.added,",
            "            i, len;",
            "",
            "        for (i = 0, len = e.added.length; i < len; ++i) {",
            "            hash[items[i].get(key)] = items[i];",
            "        }",
            "",
            "        return hash;",
            "    },",
            "",
            "    /**",
            "    Removes items from the hash table.",
            "",
            "    @method _hashRemove",
            "    @param {Object} hash The hash map before removing items",
            "    @param {String} key The key by which to remove the items from the hash",
            "    @param {Object} e The event or object containing the items to be removed.",
            "                      Items are expected to be stored in an array assigned to",
            "                      the `removed` property.",
            "    @return {Object} The updated hash map",
            "    @private",
            "    **/",
            "    _hashRemove: function(hash, key, e) {",
            "        for (var i = e.removed.length - 1; i >= 0; --i) {",
            "            delete hash[e.removed[i].get(key)];",
            "        }",
            "",
            "        return hash;",
            "    },",
            "",
            "    /**",
            "    Updates items in the hash table.",
            "",
            "    @method _hashUpdate",
            "    @param {Object} hash The hash map before updating items",
            "    @param {String} key The key by which to update the items to the hash",
            "    @param {Object} e The event or object containing the items to be updated.",
            "                      Items are expected to be stored in an array assigned to",
            "                      the `updated` property. Optionally, items can be",
            "                      identified for being overwritten by including them in an",
            "                      array assigned to the `overwritten` property.",
            "    @return {Object} The updated hash map",
            "    @private",
            "    **/",
            "    _hashUpdate: function (hash, key, e) {",
            "        if (e.overwritten && e.overwritten.length) {",
            "            hash = this._hashRemove(hash, key, { removed: e.overwritten });",
            "        }",
            "",
            "        return this._hashAdd(hash, key, { added: e.updated });",
            "    },",
            "",
            "    /**",
            "    Clears the hash table.",
            "",
            "    @method _hashEmpty",
            "    @param {Object} hash The hash map before adding items",
            "    @param {String} key The key by which to remove the items from the hash",
            "    @param {Object} e The event or object containing the items to be removed.",
            "                      Items are expected to be stored in an array assigned to",
            "                      the `removed` property.",
            "    @return {Object} An empty hash",
            "    @private",
            "    **/",
            "    _hashEmpty: function() {",
            "        return {};",
            "    },",
            "",
            "    /**",
            "     * Sets up the hashtable with all the records currently in the recordset",
            "     *",
            "     * @method _initHashTable",
            "     * @private",
            "     */",
            "    _initHashTable: function() {",
            "        return this._hashAdd({}, this.get('key'), { added: this._items || [] });",
            "    },",
            "",
            "    /**",
            "     * Helper method - it takes an object bag and converts it to a Y.Record",
            "     *",
            "     * @method _changeToRecord",
            "     * @param obj {Object|Record} Any objet literal or Y.Record instance",
            "     * @return {Record} A Record instance.",
            "     * @private",
            "     */",
            "    _changeToRecord: function(obj) {",
            "        return (obj instanceof Y.Record) ? obj : new Y.Record({ data: obj });",
            "    },",
            "",
            "    /**",
            "    Ensures the value being set is an array of Record instances. If array items",
            "    are raw object data, they are turned into Records.",
            "",
            "    @method _setRecords",
            "    @param {Record[]|Object[]} items The Records or data Objects to store as",
            "                                     Records.",
            "    @return {Record[]}",
            "    **/",
            "    _setRecords: function (items) {",
            "        if (!Y.Lang.isArray(items)) {",
            "            return Y.Attribute.INVALID_VALUE;",
            "        }",
            "",
            "        var records = [],",
            "            i, len;",
            "",
            "        // FIXME: This should use the flyweight pattern if possible",
            "        for (i = 0, len = items.length; i < len; ++i) {",
            "            records[i] = this._changeToRecord(items[i]);",
            "        }",
            "",
            "        return (this._items = records);",
            "    }",
            "}, {",
            "    ATTRS: {",
            "",
            "        /**",
            "        * An array of Records that the Recordset is storing.  Passing an array",
            "        * of raw record data is also accepted.  The data for each item will be",
            "        * wrapped in a Record instance.",
            "        *",
            "        * @attribute records",
            "        * @type {Record[]}",
            "        */",
            "        records: {",
            "            // TODO: necessary? valueFn?",
            "            lazyAdd: false,",
            "            getter: function() {",
            "                // give them a copy, not the internal object",
            "                return Y.Array(this._items);",
            "            },",
            "            setter: \"_setRecords\"",
            "        },",
            "",
            "        /**",
            "        A hash table where the ID of the record is the key, and the record",
            "        instance is the value.",
            "        ",
            "        @attribute table",
            "        @type object",
            "        **/",
            "        table: {",
            "            valueFn: '_initHashTable'",
            "        },",
            "",
            "        /**",
            "        The ID to use as the key in the hash table.",
            "        ",
            "        @attribute key",
            "        @type string",
            "        **/",
            "        key: {",
            "            value: 'id',",
            "            readOnly: true",
            "        }",
            "",
            "    }",
            "});",
            "Y.augment(Recordset, ArrayList);",
            "Y.Recordset = Recordset;",
            "",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"base\", \"arraylist\"]});",
            "",
            "}());"
        ]
    },
    "build/recordset-sort/recordset-sort.js": {
        "path": "build/recordset-sort/recordset-sort.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 5,
            "5": 1,
            "6": 12,
            "7": 48,
            "8": 48,
            "9": 5,
            "10": 43,
            "11": 1,
            "12": 5,
            "13": 5,
            "14": 5,
            "15": 8,
            "16": 5,
            "17": 4,
            "18": 5,
            "19": 0,
            "20": 8,
            "21": 61,
            "22": 8,
            "23": 6,
            "24": 1,
            "25": 1,
            "26": 1,
            "27": 1,
            "28": 1,
            "29": 1,
            "30": 1
        },
        "b": {
            "1": [
                12,
                8,
                8
            ],
            "2": [
                5,
                43
            ],
            "3": [
                6,
                5
            ],
            "4": [
                1,
                0
            ],
            "5": [
                1,
                0
            ],
            "6": [
                1,
                0
            ]
        },
        "f": {
            "1": 1,
            "2": 5,
            "3": 12,
            "4": 48,
            "5": 5,
            "6": 8,
            "7": 4,
            "8": 0,
            "9": 0,
            "10": 8,
            "11": 61,
            "12": 6,
            "13": 1,
            "14": 1,
            "15": 1
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 26
                    },
                    "end": {
                        "line": 1,
                        "column": 45
                    }
                }
            },
            "2": {
                "name": "RecordsetSort",
                "line": 17,
                "loc": {
                    "start": {
                        "line": 17,
                        "column": 0
                    },
                    "end": {
                        "line": 17,
                        "column": 44
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 41,
                "loc": {
                    "start": {
                        "line": 41,
                        "column": 23
                    },
                    "end": {
                        "line": 41,
                        "column": 35
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 56,
                "loc": {
                    "start": {
                        "line": 56,
                        "column": 19
                    },
                    "end": {
                        "line": 56,
                        "column": 53
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 88,
                "loc": {
                    "start": {
                        "line": 88,
                        "column": 17
                    },
                    "end": {
                        "line": 88,
                        "column": 34
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 101,
                "loc": {
                    "start": {
                        "line": 101,
                        "column": 8
                    },
                    "end": {
                        "line": 101,
                        "column": 19
                    }
                }
            },
            "7": {
                "name": "(anonymous_7)",
                "line": 106,
                "loc": {
                    "start": {
                        "line": 106,
                        "column": 8
                    },
                    "end": {
                        "line": 106,
                        "column": 19
                    }
                }
            },
            "8": {
                "name": "(anonymous_8)",
                "line": 111,
                "loc": {
                    "start": {
                        "line": 111,
                        "column": 8
                    },
                    "end": {
                        "line": 111,
                        "column": 19
                    }
                }
            },
            "9": {
                "name": "(anonymous_9)",
                "line": 118,
                "loc": {
                    "start": {
                        "line": 118,
                        "column": 16
                    },
                    "end": {
                        "line": 118,
                        "column": 33
                    }
                }
            },
            "10": {
                "name": "(anonymous_10)",
                "line": 129,
                "loc": {
                    "start": {
                        "line": 129,
                        "column": 16
                    },
                    "end": {
                        "line": 129,
                        "column": 28
                    }
                }
            },
            "11": {
                "name": "(anonymous_11)",
                "line": 131,
                "loc": {
                    "start": {
                        "line": 131,
                        "column": 37
                    },
                    "end": {
                        "line": 131,
                        "column": 52
                    }
                }
            },
            "12": {
                "name": "(anonymous_12)",
                "line": 146,
                "loc": {
                    "start": {
                        "line": 146,
                        "column": 10
                    },
                    "end": {
                        "line": 146,
                        "column": 40
                    }
                }
            },
            "13": {
                "name": "(anonymous_13)",
                "line": 160,
                "loc": {
                    "start": {
                        "line": 160,
                        "column": 12
                    },
                    "end": {
                        "line": 160,
                        "column": 23
                    }
                }
            },
            "14": {
                "name": "(anonymous_14)",
                "line": 175,
                "loc": {
                    "start": {
                        "line": 175,
                        "column": 13
                    },
                    "end": {
                        "line": 175,
                        "column": 24
                    }
                }
            },
            "15": {
                "name": "(anonymous_15)",
                "line": 185,
                "loc": {
                    "start": {
                        "line": 185,
                        "column": 10
                    },
                    "end": {
                        "line": 185,
                        "column": 21
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 205,
                    "column": 73
                }
            },
            "2": {
                "start": {
                    "line": 9,
                    "column": 0
                },
                "end": {
                    "line": 10,
                    "column": 25
                }
            },
            "3": {
                "start": {
                    "line": 17,
                    "column": 0
                },
                "end": {
                    "line": 19,
                    "column": 1
                }
            },
            "4": {
                "start": {
                    "line": 18,
                    "column": 4
                },
                "end": {
                    "line": 18,
                    "column": 64
                }
            },
            "5": {
                "start": {
                    "line": 21,
                    "column": 0
                },
                "end": {
                    "line": 78,
                    "column": 3
                }
            },
            "6": {
                "start": {
                    "line": 42,
                    "column": 16
                },
                "end": {
                    "line": 42,
                    "column": 82
                }
            },
            "7": {
                "start": {
                    "line": 57,
                    "column": 16
                },
                "end": {
                    "line": 57,
                    "column": 87
                }
            },
            "8": {
                "start": {
                    "line": 58,
                    "column": 16
                },
                "end": {
                    "line": 63,
                    "column": 17
                }
            },
            "9": {
                "start": {
                    "line": 59,
                    "column": 20
                },
                "end": {
                    "line": 59,
                    "column": 73
                }
            },
            "10": {
                "start": {
                    "line": 62,
                    "column": 20
                },
                "end": {
                    "line": 62,
                    "column": 34
                }
            },
            "11": {
                "start": {
                    "line": 80,
                    "column": 0
                },
                "end": {
                    "line": 199,
                    "column": 3
                }
            },
            "12": {
                "start": {
                    "line": 90,
                    "column": 8
                },
                "end": {
                    "line": 91,
                    "column": 32
                }
            },
            "13": {
                "start": {
                    "line": 94,
                    "column": 8
                },
                "end": {
                    "line": 96,
                    "column": 11
                }
            },
            "14": {
                "start": {
                    "line": 100,
                    "column": 8
                },
                "end": {
                    "line": 103,
                    "column": 11
                }
            },
            "15": {
                "start": {
                    "line": 102,
                    "column": 12
                },
                "end": {
                    "line": 102,
                    "column": 39
                }
            },
            "16": {
                "start": {
                    "line": 105,
                    "column": 8
                },
                "end": {
                    "line": 109,
                    "column": 14
                }
            },
            "17": {
                "start": {
                    "line": 107,
                    "column": 12
                },
                "end": {
                    "line": 107,
                    "column": 40
                }
            },
            "18": {
                "start": {
                    "line": 110,
                    "column": 8
                },
                "end": {
                    "line": 114,
                    "column": 14
                }
            },
            "19": {
                "start": {
                    "line": 112,
                    "column": 12
                },
                "end": {
                    "line": 112,
                    "column": 40
                }
            },
            "20": {
                "start": {
                    "line": 131,
                    "column": 8
                },
                "end": {
                    "line": 133,
                    "column": 11
                }
            },
            "21": {
                "start": {
                    "line": 132,
                    "column": 12
                },
                "end": {
                    "line": 132,
                    "column": 53
                }
            },
            "22": {
                "start": {
                    "line": 135,
                    "column": 8
                },
                "end": {
                    "line": 135,
                    "column": 42
                }
            },
            "23": {
                "start": {
                    "line": 147,
                    "column": 8
                },
                "end": {
                    "line": 151,
                    "column": 11
                }
            },
            "24": {
                "start": {
                    "line": 161,
                    "column": 8
                },
                "end": {
                    "line": 161,
                    "column": 47
                }
            },
            "25": {
                "start": {
                    "line": 162,
                    "column": 8
                },
                "end": {
                    "line": 166,
                    "column": 11
                }
            },
            "26": {
                "start": {
                    "line": 176,
                    "column": 8
                },
                "end": {
                    "line": 176,
                    "column": 42
                }
            },
            "27": {
                "start": {
                    "line": 186,
                    "column": 8
                },
                "end": {
                    "line": 186,
                    "column": 47
                }
            },
            "28": {
                "start": {
                    "line": 189,
                    "column": 8
                },
                "end": {
                    "line": 197,
                    "column": 9
                }
            },
            "29": {
                "start": {
                    "line": 190,
                    "column": 12
                },
                "end": {
                    "line": 194,
                    "column": 15
                }
            },
            "30": {
                "start": {
                    "line": 201,
                    "column": 0
                },
                "end": {
                    "line": 201,
                    "column": 52
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 42,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 42,
                            "column": 24
                        },
                        "end": {
                            "line": 42,
                            "column": 40
                        }
                    },
                    {
                        "start": {
                            "line": 42,
                            "column": 44
                        },
                        "end": {
                            "line": 42,
                            "column": 59
                        }
                    },
                    {
                        "start": {
                            "line": 42,
                            "column": 63
                        },
                        "end": {
                            "line": 42,
                            "column": 80
                        }
                    }
                ]
            },
            "2": {
                "line": 58,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 58,
                            "column": 16
                        },
                        "end": {
                            "line": 58,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 58,
                            "column": 16
                        },
                        "end": {
                            "line": 58,
                            "column": 16
                        }
                    }
                ]
            },
            "3": {
                "line": 150,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 150,
                            "column": 20
                        },
                        "end": {
                            "line": 150,
                            "column": 26
                        }
                    },
                    {
                        "start": {
                            "line": 150,
                            "column": 30
                        },
                        "end": {
                            "line": 150,
                            "column": 55
                        }
                    }
                ]
            },
            "4": {
                "line": 165,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 165,
                            "column": 20
                        },
                        "end": {
                            "line": 165,
                            "column": 28
                        }
                    },
                    {
                        "start": {
                            "line": 165,
                            "column": 32
                        },
                        "end": {
                            "line": 165,
                            "column": 57
                        }
                    }
                ]
            },
            "5": {
                "line": 189,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 189,
                            "column": 8
                        },
                        "end": {
                            "line": 189,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 189,
                            "column": 8
                        },
                        "end": {
                            "line": 189,
                            "column": 8
                        }
                    }
                ]
            },
            "6": {
                "line": 193,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 193,
                            "column": 24
                        },
                        "end": {
                            "line": 193,
                            "column": 32
                        }
                    },
                    {
                        "start": {
                            "line": 193,
                            "column": 36
                        },
                        "end": {
                            "line": 193,
                            "column": 61
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('recordset-sort', function (Y, NAME) {",
            "",
            "/**",
            " * Adds default and custom sorting functionality to the Recordset utility",
            " * @module recordset",
            " * @submodule recordset-sort",
            " */",
            "",
            "var Compare = Y.ArraySort.compare,",
            "isValue = Y.Lang.isValue;",
            "",
            "/**",
            " * Plugin that adds default and custom sorting functionality to the Recordset utility",
            " * @class RecordsetSort",
            " */",
            "",
            "function RecordsetSort(field, desc, sorter) {",
            "    RecordsetSort.superclass.constructor.apply(this, arguments);",
            "}",
            "",
            "Y.mix(RecordsetSort, {",
            "    NS: \"sort\",",
            "",
            "    NAME: \"recordsetSort\",",
            "",
            "    ATTRS: {",
            "",
            "        /**",
            "        * @description The last properties used to sort. Consists of an object literal with the keys \"field\", \"desc\", and \"sorter\"",
            "        *",
            "        * @attribute lastSortProperties",
            "        * @public",
            "        * @type object",
            "        */",
            "        lastSortProperties: {",
            "            value: {",
            "                field: undefined,",
            "                desc: true,",
            "                sorter: undefined",
            "            },",
            "            validator: function(v) {",
            "                return (isValue(v.field) && isValue(v.desc) && isValue(v.sorter));",
            "            }",
            "        },",
            "",
            "        /**",
            "        * @description Default sort function to use if none is specified by the user.",
            "        * Takes two records, the key to sort by, and whether sorting direction is descending or not (boolean).",
            "        * If two records have the same value for a given key, the ID is used as the tie-breaker.",
            "        *",
            "        * @attribute defaultSorter",
            "        * @public",
            "        * @type function",
            "        */",
            "        defaultSorter: {",
            "            value: function(recA, recB, field, desc) {",
            "                var sorted = Compare(recA.getValue(field), recB.getValue(field), desc);",
            "                if (sorted === 0) {",
            "                    return Compare(recA.get(\"id\"), recB.get(\"id\"), desc);",
            "                }",
            "                else {",
            "                    return sorted;",
            "                }",
            "            }",
            "        },",
            "",
            "        /**",
            "        * @description A boolean telling if the recordset is in a sorted state.",
            "        *",
            "        * @attribute defaultSorter",
            "        * @public",
            "        * @type function",
            "        */",
            "        isSorted: {",
            "            value: false",
            "        }",
            "    }",
            "});",
            "",
            "Y.extend(RecordsetSort, Y.Plugin.Base, {",
            "",
            "    /**",
            "     * @description Sets up the default function to use when the \"sort\" event is fired.",
            "     *",
            "     * @method initializer",
            "     * @protected",
            "     */",
            "    initializer: function(config) {",
            "",
            "        var self = this,",
            "        host = this.get('host');",
            "",
            "",
            "        this.publish(\"sort\", {",
            "            defaultFn: Y.bind(\"_defSortFn\", this)",
            "        });",
            "",
            "        //Toggle the isSorted ATTR based on events.",
            "        //Remove events dont affect isSorted, as they are just popped/sliced out",
            "        this.on(\"sort\",",
            "        function() {",
            "            self.set('isSorted', true);",
            "        });",
            "",
            "        this.onHostEvent('add',",
            "        function() {",
            "            self.set('isSorted', false);",
            "        },",
            "        host);",
            "        this.onHostEvent('update',",
            "        function() {",
            "            self.set('isSorted', false);",
            "        },",
            "        host);",
            "",
            "    },",
            "",
            "    destructor: function(config) {",
            "        },",
            "",
            "    /**",
            "     * @description Method that all sort calls go through. ",
            "     * Sets up the lastSortProperties object with the details of the sort, and passes in parameters ",
            "     * to the \"defaultSorter\" or a custom specified sort function.",
            "     *",
            "     * @method _defSortFn",
            "     * @private",
            "     */",
            "    _defSortFn: function(e) {",
            "        //have to work directly with _items here - changing the recordset.",
            "        this.get(\"host\")._items.sort(function(a, b) {",
            "            return (e.sorter)(a, b, e.field, e.desc);",
            "        });",
            "        ",
            "        this.set('lastSortProperties', e);",
            "    },",
            "",
            "    /**",
            "     * @description Sorts the recordset.",
            "     *",
            "     * @method sort",
            "     * @param field {string} A key to sort by.",
            "     * @param desc {boolean} True if you want sort order to be descending, false if you want sort order to be ascending",
            "     * @public",
            "     */",
            "    sort: function(field, desc, sorter) {",
            "        this.fire(\"sort\", {",
            "            field: field,",
            "            desc: desc,",
            "            sorter: sorter || this.get(\"defaultSorter\")",
            "        });",
            "    },",
            "",
            "    /**",
            "     * @description Resorts the recordset based on the last-used sort parameters (stored in 'lastSortProperties' ATTR)",
            "     *",
            "     * @method resort",
            "     * @public",
            "     */",
            "    resort: function() {",
            "        var p = this.get('lastSortProperties');",
            "        this.fire(\"sort\", {",
            "            field: p.field,",
            "            desc: p.desc,",
            "            sorter: p.sorter || this.get(\"defaultSorter\")",
            "        });",
            "    },",
            "",
            "    /**",
            "     * @description Reverses the recordset calling the standard array.reverse() method.",
            "     *",
            "     * @method reverse",
            "     * @public",
            "     */",
            "    reverse: function() {",
            "        this.get('host')._items.reverse();",
            "    },",
            "",
            "    /**",
            "     * @description Sorts the recordset based on the last-used sort parameters, but flips the order. (ie: Descending becomes ascending, and vice versa).",
            "     *",
            "     * @method flip",
            "     * @public",
            "     */",
            "    flip: function() {",
            "        var p = this.get('lastSortProperties');",
            "",
            "        //If a predefined field is not provided by which to sort by, throw an error",
            "        if (isValue(p.field)) {",
            "            this.fire(\"sort\", {",
            "                field: p.field,",
            "                desc: !p.desc,",
            "                sorter: p.sorter || this.get(\"defaultSorter\")",
            "            });",
            "        }",
            "        else {",
            "        }",
            "    }",
            "});",
            "",
            "Y.namespace(\"Plugin\").RecordsetSort = RecordsetSort;",
            "",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"arraysort\", \"recordset-base\", \"plugin\"]});",
            "",
            "}());"
        ]
    },
    "build/recordset-filter/recordset-filter.js": {
        "path": "build/recordset-filter/recordset-filter.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 2,
            "5": 1,
            "6": 1,
            "7": 3,
            "8": 3,
            "9": 1,
            "10": 1,
            "11": 3,
            "12": 3,
            "13": 2,
            "14": 0,
            "15": 1
        },
        "b": {
            "1": [
                1,
                2
            ],
            "2": [
                3,
                1
            ]
        },
        "f": {
            "1": 1,
            "2": 2,
            "3": 3,
            "4": 3,
            "5": 2,
            "6": 0
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 28
                    },
                    "end": {
                        "line": 1,
                        "column": 47
                    }
                }
            },
            "2": {
                "name": "RecordsetFilter",
                "line": 20,
                "loc": {
                    "start": {
                        "line": 20,
                        "column": 0
                    },
                    "end": {
                        "line": 20,
                        "column": 33
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 49,
                "loc": {
                    "start": {
                        "line": 49,
                        "column": 12
                    },
                    "end": {
                        "line": 49,
                        "column": 37
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 56,
                "loc": {
                    "start": {
                        "line": 56,
                        "column": 21
                    },
                    "end": {
                        "line": 56,
                        "column": 36
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 77,
                "loc": {
                    "start": {
                        "line": 77,
                        "column": 12
                    },
                    "end": {
                        "line": 77,
                        "column": 30
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 93,
                "loc": {
                    "start": {
                        "line": 93,
                        "column": 10
                    },
                    "end": {
                        "line": 93,
                        "column": 29
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 105,
                    "column": 76
                }
            },
            "2": {
                "start": {
                    "line": 11,
                    "column": 0
                },
                "end": {
                    "line": 12,
                    "column": 14
                }
            },
            "3": {
                "start": {
                    "line": 20,
                    "column": 0
                },
                "end": {
                    "line": 22,
                    "column": 1
                }
            },
            "4": {
                "start": {
                    "line": 21,
                    "column": 4
                },
                "end": {
                    "line": 21,
                    "column": 66
                }
            },
            "5": {
                "start": {
                    "line": 24,
                    "column": 0
                },
                "end": {
                    "line": 32,
                    "column": 3
                }
            },
            "6": {
                "start": {
                    "line": 35,
                    "column": 0
                },
                "end": {
                    "line": 100,
                    "column": 3
                }
            },
            "7": {
                "start": {
                    "line": 50,
                    "column": 8
                },
                "end": {
                    "line": 51,
                    "column": 16
                }
            },
            "8": {
                "start": {
                    "line": 54,
                    "column": 8
                },
                "end": {
                    "line": 59,
                    "column": 9
                }
            },
            "9": {
                "start": {
                    "line": 55,
                    "column": 12
                },
                "end": {
                    "line": 55,
                    "column": 25
                }
            },
            "10": {
                "start": {
                    "line": 56,
                    "column": 12
                },
                "end": {
                    "line": 58,
                    "column": 14
                }
            },
            "11": {
                "start": {
                    "line": 57,
                    "column": 16
                },
                "end": {
                    "line": 57,
                    "column": 54
                }
            },
            "12": {
                "start": {
                    "line": 62,
                    "column": 8
                },
                "end": {
                    "line": 64,
                    "column": 11
                }
            },
            "13": {
                "start": {
                    "line": 78,
                    "column": 8
                },
                "end": {
                    "line": 80,
                    "column": 11
                }
            },
            "14": {
                "start": {
                    "line": 94,
                    "column": 8
                },
                "end": {
                    "line": 96,
                    "column": 11
                }
            },
            "15": {
                "start": {
                    "line": 102,
                    "column": 0
                },
                "end": {
                    "line": 102,
                    "column": 56
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 54,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 54,
                            "column": 8
                        },
                        "end": {
                            "line": 54,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 54,
                            "column": 8
                        },
                        "end": {
                            "line": 54,
                            "column": 8
                        }
                    }
                ]
            },
            "2": {
                "line": 54,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 54,
                            "column": 12
                        },
                        "end": {
                            "line": 54,
                            "column": 17
                        }
                    },
                    {
                        "start": {
                            "line": 54,
                            "column": 21
                        },
                        "end": {
                            "line": 54,
                            "column": 42
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('recordset-filter', function (Y, NAME) {",
            "",
            "/**",
            " * Plugin that provides the ability to filter through a recordset.",
            " * Uses the filter methods available on Y.Array (see arrayextras submodule) to filter the recordset.",
            " * @module recordset",
            " * @submodule recordset-filter",
            " */",
            "",
            "",
            "var YArray = Y.Array,",
            "Lang = Y.Lang;",
            "",
            "",
            "/**",
            " * Plugin that provides the ability to filter through a recordset.",
            " * Uses the filter methods available on Y.Array (see arrayextras submodule) to filter the recordset. ",
            " * @class RecordsetFilter",
            " */",
            "function RecordsetFilter(config) {",
            "    RecordsetFilter.superclass.constructor.apply(this, arguments);",
            "}",
            "",
            "Y.mix(RecordsetFilter, {",
            "    NS: \"filter\",",
            "",
            "    NAME: \"recordsetFilter\",",
            "",
            "    ATTRS: {",
            "    }",
            "",
            "});",
            "",
            "",
            "Y.extend(RecordsetFilter, Y.Plugin.Base, {",
            "",
            "",
            "    /**",
            "    Filter through the recordset with a custom filter function, or a key-value",
            "    pair.",
            "    ",
            "    @method filter",
            "    @param {Function|String} filter A custom filter function or a string",
            "        representing the key to filter by.",
            "    @param {Any} [value] If filtering by key (_filter_ is a string), further",
            "        filter by a specific value.",
            "    @return {Recordset} A new filtered Recordset instance",
            "    **/",
            "    filter: function (filter, value) {",
            "        var recs = this.get('host').get('records'),",
            "            key;",
            "",
            "        //If a key-value pair is passed in, generate a custom function",
            "        if (value && Lang.isString(filter)) {",
            "            key = filter;",
            "            filter = function(item) {",
            "                return (item.getValue(key) === value);",
            "            };",
            "        }",
            "",
            "        //TODO: PARENT CHILD RELATIONSHIP",
            "        return new Y.Recordset({",
            "            records: YArray.filter(recs, filter)",
            "        });",
            "    },",
            "",
            "    /**",
            "    The inverse of filter. Executes the supplied function on each item. Returns",
            "    a new Recordset containing the items that the supplied function returned",
            "    `false` for.",
            "",
            "    @method reject",
            "    @param {Function} filter A boolean function, executed on each item.",
            "    @return {Recordset} A new Recordset instance containing the items on which",
            "        the supplied function returned false.",
            "    **/",
            "    reject: function (filter) {",
            "        return new Y.Recordset({",
            "            records: YArray.reject(this.get('host').get('records'), filter)",
            "        });",
            "    },",
            "",
            "    /**",
            "    Iterates over the Recordset, returning a new Recordset of all the elements",
            "    that match the supplied regular expression",
            "",
            "    @method grep",
            "    @param {RegExp} pattern The regular expression to test against each record.",
            "    @return {Recordset} A Recordset instance containing all the items in the",
            "        collection that produce a match against the supplied regular",
            "        expression. If no items match, an empty Recordset instance is returned.",
            "    **/",
            "    grep: function (pattern) {",
            "        return new Y.Recordset({",
            "            records: YArray.grep(this.get('host').get('records'), pattern)",
            "        });",
            "    }",
            "",
            "    //TODO: Add more pass-through methods to arrayextras",
            "});",
            "",
            "Y.namespace(\"Plugin\").RecordsetFilter = RecordsetFilter;",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"recordset-base\", \"array-extras\", \"plugin\"]});",
            "",
            "}());"
        ]
    },
    "build/recordset-indexer/recordset-indexer.js": {
        "path": "build/recordset-indexer/recordset-indexer.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 1,
            "5": 1,
            "6": 4,
            "7": 4,
            "8": 4,
            "9": 4,
            "10": 8,
            "11": 8,
            "12": 24,
            "13": 8,
            "14": 6,
            "15": 6,
            "16": 12,
            "17": 16,
            "18": 16,
            "19": 4,
            "20": 4,
            "21": 8,
            "22": 10,
            "23": 10,
            "24": 10,
            "25": 2,
            "26": 2,
            "27": 2,
            "28": 2,
            "29": 8,
            "30": 8,
            "31": 8,
            "32": 8,
            "33": 0,
            "34": 1
        },
        "b": {
            "1": [
                12,
                0
            ],
            "2": [
                16,
                0
            ],
            "3": [
                8,
                0
            ],
            "4": [
                10,
                0
            ],
            "5": [
                10,
                10
            ]
        },
        "f": {
            "1": 1,
            "2": 4,
            "3": 4,
            "4": 0,
            "5": 8,
            "6": 6,
            "7": 12,
            "8": 16,
            "9": 4,
            "10": 8,
            "11": 10,
            "12": 2,
            "13": 8,
            "14": 0
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 29
                    },
                    "end": {
                        "line": 1,
                        "column": 48
                    }
                }
            },
            "2": {
                "name": "RecordsetIndexer",
                "line": 13,
                "loc": {
                    "start": {
                        "line": 13,
                        "column": 0
                    },
                    "end": {
                        "line": 13,
                        "column": 34
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 49,
                "loc": {
                    "start": {
                        "line": 49,
                        "column": 17
                    },
                    "end": {
                        "line": 49,
                        "column": 34
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 59,
                "loc": {
                    "start": {
                        "line": 59,
                        "column": 16
                    },
                    "end": {
                        "line": 59,
                        "column": 33
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 72,
                "loc": {
                    "start": {
                        "line": 72,
                        "column": 19
                    },
                    "end": {
                        "line": 72,
                        "column": 33
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 94,
                "loc": {
                    "start": {
                        "line": 94,
                        "column": 17
                    },
                    "end": {
                        "line": 94,
                        "column": 29
                    }
                }
            },
            "7": {
                "name": "(anonymous_7)",
                "line": 101,
                "loc": {
                    "start": {
                        "line": 101,
                        "column": 8
                    },
                    "end": {
                        "line": 101,
                        "column": 25
                    }
                }
            },
            "8": {
                "name": "(anonymous_8)",
                "line": 103,
                "loc": {
                    "start": {
                        "line": 103,
                        "column": 12
                    },
                    "end": {
                        "line": 103,
                        "column": 24
                    }
                }
            },
            "9": {
                "name": "(anonymous_9)",
                "line": 119,
                "loc": {
                    "start": {
                        "line": 119,
                        "column": 20
                    },
                    "end": {
                        "line": 119,
                        "column": 32
                    }
                }
            },
            "10": {
                "name": "(anonymous_10)",
                "line": 126,
                "loc": {
                    "start": {
                        "line": 126,
                        "column": 8
                    },
                    "end": {
                        "line": 126,
                        "column": 25
                    }
                }
            },
            "11": {
                "name": "(anonymous_11)",
                "line": 128,
                "loc": {
                    "start": {
                        "line": 128,
                        "column": 12
                    },
                    "end": {
                        "line": 128,
                        "column": 24
                    }
                }
            },
            "12": {
                "name": "(anonymous_12)",
                "line": 145,
                "loc": {
                    "start": {
                        "line": 145,
                        "column": 20
                    },
                    "end": {
                        "line": 145,
                        "column": 32
                    }
                }
            },
            "13": {
                "name": "(anonymous_13)",
                "line": 197,
                "loc": {
                    "start": {
                        "line": 197,
                        "column": 17
                    },
                    "end": {
                        "line": 197,
                        "column": 31
                    }
                }
            },
            "14": {
                "name": "(anonymous_14)",
                "line": 214,
                "loc": {
                    "start": {
                        "line": 214,
                        "column": 14
                    },
                    "end": {
                        "line": 214,
                        "column": 28
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 227,
                    "column": 60
                }
            },
            "2": {
                "start": {
                    "line": 13,
                    "column": 0
                },
                "end": {
                    "line": 15,
                    "column": 1
                }
            },
            "3": {
                "start": {
                    "line": 14,
                    "column": 4
                },
                "end": {
                    "line": 14,
                    "column": 67
                }
            },
            "4": {
                "start": {
                    "line": 17,
                    "column": 0
                },
                "end": {
                    "line": 44,
                    "column": 3
                }
            },
            "5": {
                "start": {
                    "line": 47,
                    "column": 0
                },
                "end": {
                    "line": 222,
                    "column": 3
                }
            },
            "6": {
                "start": {
                    "line": 50,
                    "column": 8
                },
                "end": {
                    "line": 50,
                    "column": 36
                }
            },
            "7": {
                "start": {
                    "line": 53,
                    "column": 8
                },
                "end": {
                    "line": 53,
                    "column": 67
                }
            },
            "8": {
                "start": {
                    "line": 54,
                    "column": 8
                },
                "end": {
                    "line": 54,
                    "column": 73
                }
            },
            "9": {
                "start": {
                    "line": 55,
                    "column": 8
                },
                "end": {
                    "line": 55,
                    "column": 73
                }
            },
            "10": {
                "start": {
                    "line": 73,
                    "column": 8
                },
                "end": {
                    "line": 76,
                    "column": 31
                }
            },
            "11": {
                "start": {
                    "line": 78,
                    "column": 8
                },
                "end": {
                    "line": 80,
                    "column": 9
                }
            },
            "12": {
                "start": {
                    "line": 79,
                    "column": 12
                },
                "end": {
                    "line": 79,
                    "column": 63
                }
            },
            "13": {
                "start": {
                    "line": 81,
                    "column": 8
                },
                "end": {
                    "line": 81,
                    "column": 19
                }
            },
            "14": {
                "start": {
                    "line": 95,
                    "column": 8
                },
                "end": {
                    "line": 95,
                    "column": 41
                }
            },
            "15": {
                "start": {
                    "line": 100,
                    "column": 8
                },
                "end": {
                    "line": 109,
                    "column": 11
                }
            },
            "16": {
                "start": {
                    "line": 102,
                    "column": 12
                },
                "end": {
                    "line": 108,
                    "column": 15
                }
            },
            "17": {
                "start": {
                    "line": 105,
                    "column": 16
                },
                "end": {
                    "line": 107,
                    "column": 17
                }
            },
            "18": {
                "start": {
                    "line": 106,
                    "column": 20
                },
                "end": {
                    "line": 106,
                    "column": 43
                }
            },
            "19": {
                "start": {
                    "line": 120,
                    "column": 8
                },
                "end": {
                    "line": 121,
                    "column": 15
                }
            },
            "20": {
                "start": {
                    "line": 125,
                    "column": 8
                },
                "end": {
                    "line": 136,
                    "column": 11
                }
            },
            "21": {
                "start": {
                    "line": 127,
                    "column": 12
                },
                "end": {
                    "line": 135,
                    "column": 15
                }
            },
            "22": {
                "start": {
                    "line": 129,
                    "column": 16
                },
                "end": {
                    "line": 129,
                    "column": 41
                }
            },
            "23": {
                "start": {
                    "line": 132,
                    "column": 16
                },
                "end": {
                    "line": 134,
                    "column": 17
                }
            },
            "24": {
                "start": {
                    "line": 133,
                    "column": 20
                },
                "end": {
                    "line": 133,
                    "column": 37
                }
            },
            "25": {
                "start": {
                    "line": 148,
                    "column": 8
                },
                "end": {
                    "line": 148,
                    "column": 28
                }
            },
            "26": {
                "start": {
                    "line": 149,
                    "column": 8
                },
                "end": {
                    "line": 149,
                    "column": 34
                }
            },
            "27": {
                "start": {
                    "line": 150,
                    "column": 8
                },
                "end": {
                    "line": 150,
                    "column": 28
                }
            },
            "28": {
                "start": {
                    "line": 151,
                    "column": 8
                },
                "end": {
                    "line": 151,
                    "column": 31
                }
            },
            "29": {
                "start": {
                    "line": 198,
                    "column": 8
                },
                "end": {
                    "line": 198,
                    "column": 42
                }
            },
            "30": {
                "start": {
                    "line": 199,
                    "column": 8
                },
                "end": {
                    "line": 199,
                    "column": 44
                }
            },
            "31": {
                "start": {
                    "line": 200,
                    "column": 8
                },
                "end": {
                    "line": 200,
                    "column": 37
                }
            },
            "32": {
                "start": {
                    "line": 202,
                    "column": 8
                },
                "end": {
                    "line": 202,
                    "column": 25
                }
            },
            "33": {
                "start": {
                    "line": 215,
                    "column": 8
                },
                "end": {
                    "line": 215,
                    "column": 43
                }
            },
            "34": {
                "start": {
                    "line": 223,
                    "column": 0
                },
                "end": {
                    "line": 223,
                    "column": 58
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 102,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 102,
                            "column": 19
                        },
                        "end": {
                            "line": 102,
                            "column": 26
                        }
                    },
                    {
                        "start": {
                            "line": 102,
                            "column": 30
                        },
                        "end": {
                            "line": 102,
                            "column": 39
                        }
                    }
                ]
            },
            "2": {
                "line": 105,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 105,
                            "column": 16
                        },
                        "end": {
                            "line": 105,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 105,
                            "column": 16
                        },
                        "end": {
                            "line": 105,
                            "column": 16
                        }
                    }
                ]
            },
            "3": {
                "line": 127,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 127,
                            "column": 19
                        },
                        "end": {
                            "line": 127,
                            "column": 28
                        }
                    },
                    {
                        "start": {
                            "line": 127,
                            "column": 32
                        },
                        "end": {
                            "line": 127,
                            "column": 45
                        }
                    }
                ]
            },
            "4": {
                "line": 132,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 132,
                            "column": 16
                        },
                        "end": {
                            "line": 132,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 132,
                            "column": 16
                        },
                        "end": {
                            "line": 132,
                            "column": 16
                        }
                    }
                ]
            },
            "5": {
                "line": 132,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 132,
                            "column": 20
                        },
                        "end": {
                            "line": 132,
                            "column": 26
                        }
                    },
                    {
                        "start": {
                            "line": 132,
                            "column": 30
                        },
                        "end": {
                            "line": 132,
                            "column": 45
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('recordset-indexer', function (Y, NAME) {",
            "",
            "/**",
            " * Provides the ability to store multiple custom hash tables referencing records in the recordset.",
            " * @module recordset",
            " * @submodule recordset-indexer",
            " */",
            "/**",
            " * Plugin that provides the ability to store multiple custom hash tables referencing records in the recordset.",
            " * This utility does not support any collision handling. New hash table entries with a used key overwrite older ones.",
            " * @class RecordsetIndexer",
            " */",
            "function RecordsetIndexer(config) {",
            "    RecordsetIndexer.superclass.constructor.apply(this, arguments);",
            "}",
            "",
            "Y.mix(RecordsetIndexer, {",
            "    NS: \"indexer\",",
            "",
            "    NAME: \"recordsetIndexer\",",
            "",
            "    ATTRS: {",
            "        /**",
            "        * @description Collection of all the hashTables created by the plugin. ",
            "        * The individual tables can be accessed by the key they are hashing against. ",
            "        *",
            "        * @attribute hashTables",
            "        * @public",
            "        * @type object",
            "        */",
            "        hashTables: {",
            "            value: {",
            "",
            "            }",
            "        },",
            "",
            "",
            "        keys: {",
            "            value: {",
            "",
            "            }",
            "        }",
            "    }",
            "});",
            "",
            "",
            "Y.extend(RecordsetIndexer, Y.Plugin.Base, {",
            "",
            "    initializer: function(config) {",
            "        var host = this.get('host');",
            "",
            "        //setup listeners on recordset events",
            "        this.onHostEvent('add', Y.bind(\"_defAddHash\", this), host);",
            "        this.onHostEvent('remove', Y.bind('_defRemoveHash', this), host);",
            "        this.onHostEvent('update', Y.bind('_defUpdateHash', this), host);",
            "",
            "    },",
            "",
            "    destructor: function(config) {",
            "    ",
            "    },",
            "",
            "",
            "    /**",
            "     * @description Setup the hash table for a given key with all existing records in the recordset",
            "     *",
            "     * @method _setHashTable",
            "     * @param key {string} A key to hash by.",
            "     * @return obj {object} The created hash table",
            "     * @private",
            "     */",
            "    _setHashTable: function(key) {",
            "        var host = this.get('host'),",
            "        obj = {},",
            "        i = 0,",
            "        len = host.getLength();",
            "",
            "        for (; i < len; i++) {",
            "            obj[host._items[i].getValue(key)] = host._items[i];",
            "        }",
            "        return obj;",
            "    },",
            "",
            "    //---------------------------------------------",
            "    // Syncing Methods",
            "    //---------------------------------------------",
            "",
            "    /**",
            "     * @description Updates all hash tables when a record is added to the recordset",
            "     *",
            "     * @method _defAddHash",
            "     * @private",
            "     */",
            "    _defAddHash: function(e) {",
            "        var tbl = this.get('hashTables');",
            "",
            "",
            "        //Go through every hashtable that is stored.",
            "        //in each hashtable, look to see if the key is represented in the object being added.",
            "        Y.each(tbl,",
            "        function(v, key) {",
            "            Y.each(e.added || e.updated,",
            "            function(o) {",
            "                //if the object being added has a key which is being stored by hashtable v, add it into the table.",
            "                if (o.getValue(key)) {",
            "                    v[o.getValue(key)] = o;",
            "                }",
            "            });",
            "        });",
            "",
            "    },",
            "",
            "    /**",
            "     * @description Updates all hash tables when a record is removed from the recordset",
            "     *",
            "     * @method _defRemoveHash",
            "     * @private",
            "     */",
            "    _defRemoveHash: function(e) {",
            "        var tbl = this.get('hashTables'),",
            "        reckey;",
            "",
            "        //Go through every hashtable that is stored.",
            "        //in each hashtable, look to see if the key is represented in the object being deleted.",
            "        Y.each(tbl,",
            "        function(v, key) {",
            "            Y.each(e.removed || e.overwritten,",
            "            function(o) {",
            "                reckey = o.getValue(key);",
            "",
            "                //if the hashtable has a key storing a record, and the key and the record both match the record being deleted, delete that row from the hashtable",
            "                if (reckey && v[reckey] === o) {",
            "                    delete v[reckey];",
            "                }",
            "            });",
            "        });",
            "    },",
            "",
            "    /**",
            "     * @description Updates all hash tables when the recordset is updated (a combination of add and remove)",
            "     *",
            "     * @method _defUpdateHash",
            "     * @private",
            "     */",
            "    _defUpdateHash: function(e) {",
            "",
            "        //TODO: It will be more performant to create a new method rather than using _defAddHash, _defRemoveHash, due to the number of loops. See commented code.",
            "        e.added = e.updated;",
            "        e.removed = e.overwritten;",
            "        this._defAddHash(e);",
            "        this._defRemoveHash(e);",
            "",
            "        /*",
            "                    var tbl = this.get('hashTables'), reckey;",
            "                    ",
            "                    Y.each(tbl, function(v, key) {",
            "                        Y.each(e.updated, function(o, i) {",
            "                            ",
            "                            //delete record from hashtable if it has been overwritten",
            "                            reckey = o.getValue(key);",
            "                            ",
            "                            if (reckey) {",
            "                                v[reckey] = o;",
            "                            }",
            "                            ",
            "                            //the undefined case is if more records are updated than currently exist in the recordset. ",
            "                            if (e.overwritten[i] && (v[e.overwritten[i].getValue(key)] === e.overwritten[i])) {",
            "                                delete v[e.overwritten[i].getValue(key)];",
            "                            }",
            "                            ",
            "                            // if (v[reckey] === o) {",
            "                            //  delete v[reckey];",
            "                            // }",
            "                            //              ",
            "                            // //add the new updated record if it has a key that corresponds to a hash table",
            "                            // if (o.getValue(key)) {",
            "                            //  v[o.getValue(key)] = o;",
            "                            // }",
            "                                                            ",
            "                        });",
            "                    });",
            "            */",
            "    },",
            "",
            "    //---------------------------------------------",
            "    // Public Methods",
            "    //---------------------------------------------",
            "",
            "    /**",
            "     * @description Creates a new hash table.",
            "     *",
            "     * @method createTable",
            "     * @param key {string} A key to hash by.",
            "     * @return tbls[key] {object} The created hash table",
            "     * @public",
            "     */",
            "    createTable: function(key) {",
            "        var tbls = this.get('hashTables');",
            "        tbls[key] = this._setHashTable(key);",
            "        this.set('hashTables', tbls);",
            "",
            "        return tbls[key];",
            "    },",
            "",
            "",
            "    /**",
            "     * @description Get a hash table that hashes records by a given key.",
            "     *",
            "     * @method getTable",
            "     * @param key {string} A key to hash by.",
            "     * @return table {object} The created hash table",
            "     * @public",
            "     */",
            "    getTable: function(key) {",
            "        return this.get('hashTables')[key];",
            "    }",
            "",
            "",
            "",
            "",
            "",
            "});",
            "Y.namespace(\"Plugin\").RecordsetIndexer = RecordsetIndexer;",
            "",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"recordset-base\", \"plugin\"]});",
            "",
            "}());"
        ]
    }
}