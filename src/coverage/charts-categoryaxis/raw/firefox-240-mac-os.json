{
    "build/axis-category/axis-category.js": {
        "path": "build/axis-category/axis-category.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 4,
            "5": 4,
            "6": 4,
            "7": 92,
            "8": 92,
            "9": 92,
            "10": 12,
            "11": 12,
            "12": 6,
            "13": 6,
            "14": 6,
            "15": 6,
            "16": 12,
            "17": 12,
            "18": 52,
            "19": 52,
            "20": 52,
            "21": 48,
            "22": 48,
            "23": 48,
            "24": 48,
            "25": 48,
            "26": 48,
            "27": 12
        },
        "b": {
            "1": [
                6,
                6
            ],
            "2": [
                48,
                4
            ],
            "3": [
                52,
                52
            ],
            "4": [
                44,
                4
            ]
        },
        "f": {
            "1": 1,
            "2": 4,
            "3": 4,
            "4": 92,
            "5": 12
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 25
                    },
                    "end": {
                        "line": 1,
                        "column": 44
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 27,
                "loc": {
                    "start": {
                        "line": 27,
                        "column": 21
                    },
                    "end": {
                        "line": 28,
                        "column": 4
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 41,
                "loc": {
                    "start": {
                        "line": 41,
                        "column": 21
                    },
                    "end": {
                        "line": 42,
                        "column": 4
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 58,
                "loc": {
                    "start": {
                        "line": 58,
                        "column": 22
                    },
                    "end": {
                        "line": 59,
                        "column": 4
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 81,
                "loc": {
                    "start": {
                        "line": 81,
                        "column": 29
                    },
                    "end": {
                        "line": 82,
                        "column": 4
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 130,
                    "column": 62
                }
            },
            "2": {
                "start": {
                    "line": 19,
                    "column": 0
                },
                "end": {
                    "line": 126,
                    "column": 3
                }
            },
            "3": {
                "start": {
                    "line": 29,
                    "column": 8
                },
                "end": {
                    "line": 30,
                    "column": 28
                }
            },
            "4": {
                "start": {
                    "line": 31,
                    "column": 8
                },
                "end": {
                    "line": 31,
                    "column": 21
                }
            },
            "5": {
                "start": {
                    "line": 43,
                    "column": 8
                },
                "end": {
                    "line": 45,
                    "column": 30
                }
            },
            "6": {
                "start": {
                    "line": 46,
                    "column": 8
                },
                "end": {
                    "line": 46,
                    "column": 21
                }
            },
            "7": {
                "start": {
                    "line": 60,
                    "column": 8
                },
                "end": {
                    "line": 61,
                    "column": 36
                }
            },
            "8": {
                "start": {
                    "line": 62,
                    "column": 8
                },
                "end": {
                    "line": 62,
                    "column": 24
                }
            },
            "9": {
                "start": {
                    "line": 63,
                    "column": 8
                },
                "end": {
                    "line": 63,
                    "column": 21
                }
            },
            "10": {
                "start": {
                    "line": 83,
                    "column": 8
                },
                "end": {
                    "line": 95,
                    "column": 19
                }
            },
            "11": {
                "start": {
                    "line": 96,
                    "column": 8
                },
                "end": {
                    "line": 105,
                    "column": 9
                }
            },
            "12": {
                "start": {
                    "line": 98,
                    "column": 12
                },
                "end": {
                    "line": 98,
                    "column": 30
                }
            },
            "13": {
                "start": {
                    "line": 99,
                    "column": 12
                },
                "end": {
                    "line": 99,
                    "column": 31
                }
            },
            "14": {
                "start": {
                    "line": 103,
                    "column": 12
                },
                "end": {
                    "line": 103,
                    "column": 30
                }
            },
            "15": {
                "start": {
                    "line": 104,
                    "column": 12
                },
                "end": {
                    "line": 104,
                    "column": 31
                }
            },
            "16": {
                "start": {
                    "line": 106,
                    "column": 8
                },
                "end": {
                    "line": 106,
                    "column": 46
                }
            },
            "17": {
                "start": {
                    "line": 107,
                    "column": 8
                },
                "end": {
                    "line": 120,
                    "column": 9
                }
            },
            "18": {
                "start": {
                    "line": 109,
                    "column": 12
                },
                "end": {
                    "line": 109,
                    "column": 40
                }
            },
            "19": {
                "start": {
                    "line": 110,
                    "column": 12
                },
                "end": {
                    "line": 110,
                    "column": 59
                }
            },
            "20": {
                "start": {
                    "line": 111,
                    "column": 12
                },
                "end": {
                    "line": 119,
                    "column": 13
                }
            },
            "21": {
                "start": {
                    "line": 113,
                    "column": 16
                },
                "end": {
                    "line": 113,
                    "column": 68
                }
            },
            "22": {
                "start": {
                    "line": 114,
                    "column": 16
                },
                "end": {
                    "line": 114,
                    "column": 30
                }
            },
            "23": {
                "start": {
                    "line": 115,
                    "column": 16
                },
                "end": {
                    "line": 115,
                    "column": 52
                }
            },
            "24": {
                "start": {
                    "line": 116,
                    "column": 16
                },
                "end": {
                    "line": 116,
                    "column": 61
                }
            },
            "25": {
                "start": {
                    "line": 117,
                    "column": 16
                },
                "end": {
                    "line": 117,
                    "column": 38
                }
            },
            "26": {
                "start": {
                    "line": 118,
                    "column": 16
                },
                "end": {
                    "line": 118,
                    "column": 40
                }
            },
            "27": {
                "start": {
                    "line": 121,
                    "column": 8
                },
                "end": {
                    "line": 124,
                    "column": 10
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 96,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 96,
                            "column": 8
                        },
                        "end": {
                            "line": 96,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 96,
                            "column": 8
                        },
                        "end": {
                            "line": 96,
                            "column": 8
                        }
                    }
                ]
            },
            "2": {
                "line": 111,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 111,
                            "column": 12
                        },
                        "end": {
                            "line": 111,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 111,
                            "column": 12
                        },
                        "end": {
                            "line": 111,
                            "column": 12
                        }
                    }
                ]
            },
            "3": {
                "line": 111,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 111,
                            "column": 15
                        },
                        "end": {
                            "line": 111,
                            "column": 42
                        }
                    },
                    {
                        "start": {
                            "line": 111,
                            "column": 46
                        },
                        "end": {
                            "line": 111,
                            "column": 61
                        }
                    }
                ]
            },
            "4": {
                "line": 113,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 113,
                            "column": 39
                        },
                        "end": {
                            "line": 113,
                            "column": 62
                        }
                    },
                    {
                        "start": {
                            "line": 113,
                            "column": 66
                        },
                        "end": {
                            "line": 113,
                            "column": 67
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('axis-category', function (Y, NAME) {",
            "",
            "/**",
            " * Provides functionality for drawing a category axis for use with a chart.",
            " *",
            " * @module charts",
            " * @submodule axis-category",
            " */",
            "/**",
            " * CategoryAxis draws a category axis for a chart.",
            " *",
            " * @class CategoryAxis",
            " * @constructor",
            " * @extends Axis",
            " * @uses CategoryImpl",
            " * @param {Object} config (optional) Configuration parameters.",
            " * @submodule axis-category",
            " */",
            "Y.CategoryAxis = Y.Base.create(\"categoryAxis\", Y.Axis, [Y.CategoryImpl], {",
            "    /**",
            "     * Returns a string corresponding to the first label on an",
            "     * axis.",
            "     *",
            "     * @method getMinimumValue",
            "     * @return String",
            "     */",
            "    getMinimumValue: function()",
            "    {",
            "        var data = this.get(\"data\"),",
            "            label = data[0];",
            "        return label;",
            "    },",
            "",
            "    /**",
            "     * Returns a string corresponding to the last label on an",
            "     * axis.",
            "     *",
            "     * @method getMaximumValue",
            "     * @return String",
            "     */",
            "    getMaximumValue: function()",
            "    {",
            "        var data = this.get(\"data\"),",
            "            len = data.length - 1,",
            "            label = data[len];",
            "        return label;",
            "    },",
            "",
            "    /**",
            "     * Calculates and returns a value based on the number of labels and the index of",
            "     * the current label.",
            "     *",
            "     * @method _getLabelByIndex",
            "     * @param {Number} i Index of the label.",
            "     * @return String",
            "     * @private",
            "     */",
            "    _getLabelByIndex: function(i)",
            "    {",
            "        var label,",
            "            data = this.get(\"data\");",
            "        label = data[i];",
            "        return label;",
            "    },",
            "",
            "    /**",
            "     * Calculates the position of ticks and labels based on an array of specified label values. Returns",
            "     * an object containing an array of values to be used for labels and an array of objects containing",
            "     * x and y coordinates for each label.",
            "     *",
            "     * @method _getDataFromLabelValues",
            "     * @param {Object} startPoint An object containing the x and y coordinates for the start of the axis.",
            "     * @param {Array} labelValues An array containing values to be used for determining the number and",
            "     * position of labels and ticks on the axis.",
            "     * @param {Number} edgeOffset The distance, in pixels, on either edge of the axis.",
            "     * @param {Number} layoutLength The length, in pixels, of the axis. If the axis is vertical, the length",
            "     * is equal to the height. If the axis is horizontal, the length is equal to the width.",
            "     * @return Object",
            "     * @private",
            "     */",
            "    _getDataFromLabelValues: function(startPoint, labelValues, edgeOffset, layoutLength, direction)",
            "    {",
            "        var points = [],",
            "            values = [],",
            "            labelValue,",
            "            multiplier = (layoutLength - (edgeOffset * 2))/(this.getTotalMajorUnits() - 1),",
            "            data = this.get(\"data\"),",
            "            labelIndex,",
            "            i,",
            "            len = labelValues.length,",
            "            staticCoord,",
            "            dynamicCoord,",
            "            constantVal,",
            "            newPoint,",
            "            rawVal;",
            "        if(direction === \"vertical\")",
            "        {",
            "            staticCoord = \"x\";",
            "            dynamicCoord = \"y\";",
            "        }",
            "        else",
            "        {",
            "            staticCoord = \"y\";",
            "            dynamicCoord = \"x\";",
            "        }",
            "        constantVal = startPoint[staticCoord];",
            "        for(i = 0; i < len; i = i + 1)",
            "        {",
            "            labelValue = labelValues[i];",
            "            labelIndex = Y.Array.indexOf(data, labelValue);",
            "            if(Y.Lang.isNumber(labelIndex) && labelIndex > -1)",
            "            {",
            "                rawVal = labelIndex ? (labelIndex * multiplier) : 0;",
            "                newPoint = {};",
            "                newPoint[staticCoord] = constantVal;",
            "                newPoint[dynamicCoord] = rawVal + edgeOffset;",
            "                points.push(newPoint);",
            "                values.push(labelValue);",
            "            }",
            "        }",
            "        return {",
            "            points: points,",
            "            values: values",
            "        };",
            "    }",
            "});",
            "",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"axis\", \"axis-category-base\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "19": 1,
            "29": 4,
            "31": 4,
            "43": 4,
            "46": 4,
            "60": 92,
            "62": 92,
            "63": 92,
            "83": 12,
            "96": 12,
            "98": 6,
            "99": 6,
            "103": 6,
            "104": 6,
            "106": 12,
            "107": 12,
            "109": 52,
            "110": 52,
            "111": 52,
            "113": 48,
            "114": 48,
            "115": 48,
            "116": 48,
            "117": 48,
            "118": 48,
            "121": 12
        }
    }
}