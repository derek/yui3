{
    "build/tree-node/tree-node.js": {
        "path": "build/tree-node/tree-node.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 1252,
            "4": 1252,
            "5": 1252,
            "6": 1252,
            "7": 1252,
            "8": 1252,
            "9": 1252,
            "10": 234,
            "11": 1018,
            "12": 147,
            "13": 1252,
            "14": 1252,
            "15": 427,
            "16": 1,
            "17": 59,
            "18": 6,
            "19": 1,
            "20": 5,
            "21": 5,
            "22": 10,
            "23": 10,
            "24": 5,
            "25": 1,
            "26": 1,
            "27": 17,
            "28": 31,
            "29": 69,
            "30": 69,
            "31": 45,
            "32": 69,
            "33": 69,
            "34": 1,
            "35": 8,
            "36": 3,
            "37": 5,
            "38": 61,
            "39": 3,
            "40": 3,
            "41": 2,
            "42": 3,
            "43": 3,
            "44": 4,
            "45": 36,
            "46": 36,
            "47": 29,
            "48": 36,
            "49": 15,
            "50": 15,
            "51": 0,
            "52": 15,
            "53": 64,
            "54": 64,
            "55": 53,
            "56": 15,
            "57": 4,
            "58": 4,
            "59": 12,
            "60": 15,
            "61": 1,
            "62": 45,
            "63": 45,
            "64": 101,
            "65": 45,
            "66": 45,
            "67": 1
        },
        "b": {
            "1": [
                1252,
                6
            ],
            "2": [
                1252,
                506,
                506
            ],
            "3": [
                1252,
                1104
            ],
            "4": [
                1252,
                1251
            ],
            "5": [
                1252,
                1250
            ],
            "6": [
                234,
                1018
            ],
            "7": [
                147,
                871
            ],
            "8": [
                1,
                5
            ],
            "9": [
                30,
                1
            ],
            "10": [
                45,
                24
            ],
            "11": [
                2,
                67
            ],
            "12": [
                3,
                5
            ],
            "13": [
                8,
                8
            ],
            "14": [
                5,
                3
            ],
            "15": [
                61,
                60
            ],
            "16": [
                3,
                0
            ],
            "17": [
                3,
                0
            ],
            "18": [
                0,
                15
            ],
            "19": [
                53,
                11
            ],
            "20": [
                4,
                11
            ]
        },
        "f": {
            "1": 1,
            "2": 1252,
            "3": 59,
            "4": 6,
            "5": 1,
            "6": 1,
            "7": 17,
            "8": 31,
            "9": 69,
            "10": 1,
            "11": 8,
            "12": 61,
            "13": 3,
            "14": 2,
            "15": 3,
            "16": 4,
            "17": 36,
            "18": 15,
            "19": 1,
            "20": 45
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 21
                    },
                    "end": {
                        "line": 1,
                        "column": 40
                    }
                }
            },
            "2": {
                "name": "TreeNode",
                "line": 43,
                "loc": {
                    "start": {
                        "line": 43,
                        "column": 0
                    },
                    "end": {
                        "line": 43,
                        "column": 32
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 193,
                "loc": {
                    "start": {
                        "line": 193,
                        "column": 12
                    },
                    "end": {
                        "line": 193,
                        "column": 37
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 207,
                "loc": {
                    "start": {
                        "line": 207,
                        "column": 11
                    },
                    "end": {
                        "line": 207,
                        "column": 23
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 240,
                "loc": {
                    "start": {
                        "line": 240,
                        "column": 11
                    },
                    "end": {
                        "line": 240,
                        "column": 30
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 270,
                "loc": {
                    "start": {
                        "line": 270,
                        "column": 10
                    },
                    "end": {
                        "line": 270,
                        "column": 48
                    }
                }
            },
            "7": {
                "name": "(anonymous_7)",
                "line": 281,
                "loc": {
                    "start": {
                        "line": 281,
                        "column": 17
                    },
                    "end": {
                        "line": 281,
                        "column": 29
                    }
                }
            },
            "8": {
                "name": "(anonymous_8)",
                "line": 293,
                "loc": {
                    "start": {
                        "line": 293,
                        "column": 11
                    },
                    "end": {
                        "line": 293,
                        "column": 23
                    }
                }
            },
            "9": {
                "name": "(anonymous_9)",
                "line": 306,
                "loc": {
                    "start": {
                        "line": 306,
                        "column": 13
                    },
                    "end": {
                        "line": 306,
                        "column": 29
                    }
                }
            },
            "10": {
                "name": "(anonymous_10)",
                "line": 344,
                "loc": {
                    "start": {
                        "line": 344,
                        "column": 12
                    },
                    "end": {
                        "line": 344,
                        "column": 37
                    }
                }
            },
            "11": {
                "name": "(anonymous_11)",
                "line": 356,
                "loc": {
                    "start": {
                        "line": 356,
                        "column": 14
                    },
                    "end": {
                        "line": 356,
                        "column": 26
                    }
                }
            },
            "12": {
                "name": "(anonymous_12)",
                "line": 371,
                "loc": {
                    "start": {
                        "line": 371,
                        "column": 12
                    },
                    "end": {
                        "line": 371,
                        "column": 24
                    }
                }
            },
            "13": {
                "name": "(anonymous_13)",
                "line": 383,
                "loc": {
                    "start": {
                        "line": 383,
                        "column": 10
                    },
                    "end": {
                        "line": 383,
                        "column": 22
                    }
                }
            },
            "14": {
                "name": "(anonymous_14)",
                "line": 405,
                "loc": {
                    "start": {
                        "line": 405,
                        "column": 13
                    },
                    "end": {
                        "line": 405,
                        "column": 38
                    }
                }
            },
            "15": {
                "name": "(anonymous_15)",
                "line": 417,
                "loc": {
                    "start": {
                        "line": 417,
                        "column": 14
                    },
                    "end": {
                        "line": 417,
                        "column": 26
                    }
                }
            },
            "16": {
                "name": "(anonymous_16)",
                "line": 439,
                "loc": {
                    "start": {
                        "line": 439,
                        "column": 12
                    },
                    "end": {
                        "line": 439,
                        "column": 31
                    }
                }
            },
            "17": {
                "name": "(anonymous_17)",
                "line": 451,
                "loc": {
                    "start": {
                        "line": 451,
                        "column": 10
                    },
                    "end": {
                        "line": 451,
                        "column": 22
                    }
                }
            },
            "18": {
                "name": "(anonymous_18)",
                "line": 469,
                "loc": {
                    "start": {
                        "line": 469,
                        "column": 12
                    },
                    "end": {
                        "line": 469,
                        "column": 24
                    }
                }
            },
            "19": {
                "name": "(anonymous_19)",
                "line": 533,
                "loc": {
                    "start": {
                        "line": 533,
                        "column": 14
                    },
                    "end": {
                        "line": 533,
                        "column": 52
                    }
                }
            },
            "20": {
                "name": "(anonymous_20)",
                "line": 538,
                "loc": {
                    "start": {
                        "line": 538,
                        "column": 14
                    },
                    "end": {
                        "line": 538,
                        "column": 26
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 555,
                    "column": 16
                }
            },
            "2": {
                "start": {
                    "line": 43,
                    "column": 0
                },
                "end": {
                    "line": 68,
                    "column": 1
                }
            },
            "3": {
                "start": {
                    "line": 44,
                    "column": 4
                },
                "end": {
                    "line": 44,
                    "column": 28
                }
            },
            "4": {
                "start": {
                    "line": 46,
                    "column": 4
                },
                "end": {
                    "line": 46,
                    "column": 73
                }
            },
            "5": {
                "start": {
                    "line": 47,
                    "column": 4
                },
                "end": {
                    "line": 47,
                    "column": 21
                }
            },
            "6": {
                "start": {
                    "line": 49,
                    "column": 4
                },
                "end": {
                    "line": 49,
                    "column": 42
                }
            },
            "7": {
                "start": {
                    "line": 50,
                    "column": 4
                },
                "end": {
                    "line": 50,
                    "column": 38
                }
            },
            "8": {
                "start": {
                    "line": 51,
                    "column": 4
                },
                "end": {
                    "line": 51,
                    "column": 39
                }
            },
            "9": {
                "start": {
                    "line": 53,
                    "column": 4
                },
                "end": {
                    "line": 57,
                    "column": 5
                }
            },
            "10": {
                "start": {
                    "line": 54,
                    "column": 8
                },
                "end": {
                    "line": 54,
                    "column": 54
                }
            },
            "11": {
                "start": {
                    "line": 55,
                    "column": 11
                },
                "end": {
                    "line": 57,
                    "column": 5
                }
            },
            "12": {
                "start": {
                    "line": 56,
                    "column": 8
                },
                "end": {
                    "line": 56,
                    "column": 36
                }
            },
            "13": {
                "start": {
                    "line": 61,
                    "column": 4
                },
                "end": {
                    "line": 61,
                    "column": 24
                }
            },
            "14": {
                "start": {
                    "line": 65,
                    "column": 4
                },
                "end": {
                    "line": 67,
                    "column": 5
                }
            },
            "15": {
                "start": {
                    "line": 66,
                    "column": 8
                },
                "end": {
                    "line": 66,
                    "column": 39
                }
            },
            "16": {
                "start": {
                    "line": 70,
                    "column": 0
                },
                "end": {
                    "line": 550,
                    "column": 2
                }
            },
            "17": {
                "start": {
                    "line": 194,
                    "column": 8
                },
                "end": {
                    "line": 194,
                    "column": 57
                }
            },
            "18": {
                "start": {
                    "line": 208,
                    "column": 8
                },
                "end": {
                    "line": 210,
                    "column": 9
                }
            },
            "19": {
                "start": {
                    "line": 209,
                    "column": 12
                },
                "end": {
                    "line": 209,
                    "column": 21
                }
            },
            "20": {
                "start": {
                    "line": 212,
                    "column": 8
                },
                "end": {
                    "line": 213,
                    "column": 33
                }
            },
            "21": {
                "start": {
                    "line": 215,
                    "column": 8
                },
                "end": {
                    "line": 218,
                    "column": 9
                }
            },
            "22": {
                "start": {
                    "line": 216,
                    "column": 12
                },
                "end": {
                    "line": 216,
                    "column": 23
                }
            },
            "23": {
                "start": {
                    "line": 217,
                    "column": 12
                },
                "end": {
                    "line": 217,
                    "column": 35
                }
            },
            "24": {
                "start": {
                    "line": 220,
                    "column": 8
                },
                "end": {
                    "line": 220,
                    "column": 21
                }
            },
            "25": {
                "start": {
                    "line": 241,
                    "column": 8
                },
                "end": {
                    "line": 241,
                    "column": 50
                }
            },
            "26": {
                "start": {
                    "line": 271,
                    "column": 8
                },
                "end": {
                    "line": 271,
                    "column": 68
                }
            },
            "27": {
                "start": {
                    "line": 282,
                    "column": 8
                },
                "end": {
                    "line": 282,
                    "column": 38
                }
            },
            "28": {
                "start": {
                    "line": 294,
                    "column": 8
                },
                "end": {
                    "line": 294,
                    "column": 60
                }
            },
            "29": {
                "start": {
                    "line": 307,
                    "column": 8
                },
                "end": {
                    "line": 307,
                    "column": 18
                }
            },
            "30": {
                "start": {
                    "line": 309,
                    "column": 8
                },
                "end": {
                    "line": 311,
                    "column": 9
                }
            },
            "31": {
                "start": {
                    "line": 310,
                    "column": 12
                },
                "end": {
                    "line": 310,
                    "column": 28
                }
            },
            "32": {
                "start": {
                    "line": 313,
                    "column": 8
                },
                "end": {
                    "line": 313,
                    "column": 40
                }
            },
            "33": {
                "start": {
                    "line": 315,
                    "column": 8
                },
                "end": {
                    "line": 315,
                    "column": 57
                }
            },
            "34": {
                "start": {
                    "line": 345,
                    "column": 8
                },
                "end": {
                    "line": 345,
                    "column": 57
                }
            },
            "35": {
                "start": {
                    "line": 357,
                    "column": 8
                },
                "end": {
                    "line": 359,
                    "column": 9
                }
            },
            "36": {
                "start": {
                    "line": 358,
                    "column": 12
                },
                "end": {
                    "line": 358,
                    "column": 24
                }
            },
            "37": {
                "start": {
                    "line": 361,
                    "column": 8
                },
                "end": {
                    "line": 361,
                    "column": 57
                }
            },
            "38": {
                "start": {
                    "line": 372,
                    "column": 8
                },
                "end": {
                    "line": 372,
                    "column": 60
                }
            },
            "39": {
                "start": {
                    "line": 384,
                    "column": 8
                },
                "end": {
                    "line": 386,
                    "column": 9
                }
            },
            "40": {
                "start": {
                    "line": 385,
                    "column": 12
                },
                "end": {
                    "line": 385,
                    "column": 58
                }
            },
            "41": {
                "start": {
                    "line": 406,
                    "column": 8
                },
                "end": {
                    "line": 406,
                    "column": 58
                }
            },
            "42": {
                "start": {
                    "line": 418,
                    "column": 8
                },
                "end": {
                    "line": 420,
                    "column": 9
                }
            },
            "43": {
                "start": {
                    "line": 419,
                    "column": 12
                },
                "end": {
                    "line": 419,
                    "column": 58
                }
            },
            "44": {
                "start": {
                    "line": 440,
                    "column": 8
                },
                "end": {
                    "line": 440,
                    "column": 51
                }
            },
            "45": {
                "start": {
                    "line": 452,
                    "column": 8
                },
                "end": {
                    "line": 454,
                    "column": 27
                }
            },
            "46": {
                "start": {
                    "line": 456,
                    "column": 8
                },
                "end": {
                    "line": 458,
                    "column": 9
                }
            },
            "47": {
                "start": {
                    "line": 457,
                    "column": 12
                },
                "end": {
                    "line": 457,
                    "column": 40
                }
            },
            "48": {
                "start": {
                    "line": 460,
                    "column": 8
                },
                "end": {
                    "line": 460,
                    "column": 21
                }
            },
            "49": {
                "start": {
                    "line": 470,
                    "column": 8
                },
                "end": {
                    "line": 472,
                    "column": 24
                }
            },
            "50": {
                "start": {
                    "line": 475,
                    "column": 8
                },
                "end": {
                    "line": 477,
                    "column": 9
                }
            },
            "51": {
                "start": {
                    "line": 476,
                    "column": 12
                },
                "end": {
                    "line": 476,
                    "column": 24
                }
            },
            "52": {
                "start": {
                    "line": 480,
                    "column": 8
                },
                "end": {
                    "line": 486,
                    "column": 9
                }
            },
            "53": {
                "start": {
                    "line": 481,
                    "column": 12
                },
                "end": {
                    "line": 481,
                    "column": 40
                }
            },
            "54": {
                "start": {
                    "line": 483,
                    "column": 12
                },
                "end": {
                    "line": 485,
                    "column": 13
                }
            },
            "55": {
                "start": {
                    "line": 484,
                    "column": 16
                },
                "end": {
                    "line": 484,
                    "column": 37
                }
            },
            "56": {
                "start": {
                    "line": 489,
                    "column": 8
                },
                "end": {
                    "line": 495,
                    "column": 9
                }
            },
            "57": {
                "start": {
                    "line": 490,
                    "column": 12
                },
                "end": {
                    "line": 490,
                    "column": 30
                }
            },
            "58": {
                "start": {
                    "line": 492,
                    "column": 12
                },
                "end": {
                    "line": 494,
                    "column": 13
                }
            },
            "59": {
                "start": {
                    "line": 493,
                    "column": 16
                },
                "end": {
                    "line": 493,
                    "column": 61
                }
            },
            "60": {
                "start": {
                    "line": 497,
                    "column": 8
                },
                "end": {
                    "line": 497,
                    "column": 19
                }
            },
            "61": {
                "start": {
                    "line": 534,
                    "column": 8
                },
                "end": {
                    "line": 534,
                    "column": 72
                }
            },
            "62": {
                "start": {
                    "line": 539,
                    "column": 8
                },
                "end": {
                    "line": 541,
                    "column": 19
                }
            },
            "63": {
                "start": {
                    "line": 543,
                    "column": 8
                },
                "end": {
                    "line": 545,
                    "column": 9
                }
            },
            "64": {
                "start": {
                    "line": 544,
                    "column": 12
                },
                "end": {
                    "line": 544,
                    "column": 41
                }
            },
            "65": {
                "start": {
                    "line": 547,
                    "column": 8
                },
                "end": {
                    "line": 547,
                    "column": 38
                }
            },
            "66": {
                "start": {
                    "line": 548,
                    "column": 8
                },
                "end": {
                    "line": 548,
                    "column": 35
                }
            },
            "67": {
                "start": {
                    "line": 552,
                    "column": 0
                },
                "end": {
                    "line": 552,
                    "column": 36
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 44,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 44,
                            "column": 4
                        },
                        "end": {
                            "line": 44,
                            "column": 10
                        }
                    },
                    {
                        "start": {
                            "line": 44,
                            "column": 15
                        },
                        "end": {
                            "line": 44,
                            "column": 26
                        }
                    }
                ]
            },
            "2": {
                "line": 46,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 46,
                            "column": 29
                        },
                        "end": {
                            "line": 46,
                            "column": 38
                        }
                    },
                    {
                        "start": {
                            "line": 46,
                            "column": 42
                        },
                        "end": {
                            "line": 46,
                            "column": 49
                        }
                    },
                    {
                        "start": {
                            "line": 46,
                            "column": 53
                        },
                        "end": {
                            "line": 46,
                            "column": 72
                        }
                    }
                ]
            },
            "3": {
                "line": 49,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 49,
                            "column": 20
                        },
                        "end": {
                            "line": 49,
                            "column": 35
                        }
                    },
                    {
                        "start": {
                            "line": 49,
                            "column": 39
                        },
                        "end": {
                            "line": 49,
                            "column": 41
                        }
                    }
                ]
            },
            "4": {
                "line": 50,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 50,
                            "column": 20
                        },
                        "end": {
                            "line": 50,
                            "column": 31
                        }
                    },
                    {
                        "start": {
                            "line": 50,
                            "column": 35
                        },
                        "end": {
                            "line": 50,
                            "column": 37
                        }
                    }
                ]
            },
            "5": {
                "line": 51,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 51,
                            "column": 20
                        },
                        "end": {
                            "line": 51,
                            "column": 32
                        }
                    },
                    {
                        "start": {
                            "line": 51,
                            "column": 36
                        },
                        "end": {
                            "line": 51,
                            "column": 38
                        }
                    }
                ]
            },
            "6": {
                "line": 53,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 53,
                            "column": 4
                        },
                        "end": {
                            "line": 53,
                            "column": 4
                        }
                    },
                    {
                        "start": {
                            "line": 53,
                            "column": 4
                        },
                        "end": {
                            "line": 53,
                            "column": 4
                        }
                    }
                ]
            },
            "7": {
                "line": 55,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 55,
                            "column": 11
                        },
                        "end": {
                            "line": 55,
                            "column": 11
                        }
                    },
                    {
                        "start": {
                            "line": 55,
                            "column": 11
                        },
                        "end": {
                            "line": 55,
                            "column": 11
                        }
                    }
                ]
            },
            "8": {
                "line": 208,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 208,
                            "column": 8
                        },
                        "end": {
                            "line": 208,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 208,
                            "column": 8
                        },
                        "end": {
                            "line": 208,
                            "column": 8
                        }
                    }
                ]
            },
            "9": {
                "line": 294,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 294,
                            "column": 29
                        },
                        "end": {
                            "line": 294,
                            "column": 54
                        }
                    },
                    {
                        "start": {
                            "line": 294,
                            "column": 57
                        },
                        "end": {
                            "line": 294,
                            "column": 59
                        }
                    }
                ]
            },
            "10": {
                "line": 309,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 309,
                            "column": 8
                        },
                        "end": {
                            "line": 309,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 309,
                            "column": 8
                        },
                        "end": {
                            "line": 309,
                            "column": 8
                        }
                    }
                ]
            },
            "11": {
                "line": 315,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 315,
                            "column": 46
                        },
                        "end": {
                            "line": 315,
                            "column": 48
                        }
                    },
                    {
                        "start": {
                            "line": 315,
                            "column": 51
                        },
                        "end": {
                            "line": 315,
                            "column": 56
                        }
                    }
                ]
            },
            "12": {
                "line": 357,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 357,
                            "column": 8
                        },
                        "end": {
                            "line": 357,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 357,
                            "column": 8
                        },
                        "end": {
                            "line": 357,
                            "column": 8
                        }
                    }
                ]
            },
            "13": {
                "line": 357,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 357,
                            "column": 12
                        },
                        "end": {
                            "line": 357,
                            "column": 21
                        }
                    },
                    {
                        "start": {
                            "line": 357,
                            "column": 25
                        },
                        "end": {
                            "line": 357,
                            "column": 52
                        }
                    }
                ]
            },
            "14": {
                "line": 361,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 361,
                            "column": 18
                        },
                        "end": {
                            "line": 361,
                            "column": 29
                        }
                    },
                    {
                        "start": {
                            "line": 361,
                            "column": 33
                        },
                        "end": {
                            "line": 361,
                            "column": 55
                        }
                    }
                ]
            },
            "15": {
                "line": 372,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 372,
                            "column": 18
                        },
                        "end": {
                            "line": 372,
                            "column": 27
                        }
                    },
                    {
                        "start": {
                            "line": 372,
                            "column": 31
                        },
                        "end": {
                            "line": 372,
                            "column": 58
                        }
                    }
                ]
            },
            "16": {
                "line": 384,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 384,
                            "column": 8
                        },
                        "end": {
                            "line": 384,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 384,
                            "column": 8
                        },
                        "end": {
                            "line": 384,
                            "column": 8
                        }
                    }
                ]
            },
            "17": {
                "line": 418,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 418,
                            "column": 8
                        },
                        "end": {
                            "line": 418,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 418,
                            "column": 8
                        },
                        "end": {
                            "line": 418,
                            "column": 8
                        }
                    }
                ]
            },
            "18": {
                "line": 475,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 475,
                            "column": 8
                        },
                        "end": {
                            "line": 475,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 475,
                            "column": 8
                        },
                        "end": {
                            "line": 475,
                            "column": 8
                        }
                    }
                ]
            },
            "19": {
                "line": 483,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 483,
                            "column": 12
                        },
                        "end": {
                            "line": 483,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 483,
                            "column": 12
                        },
                        "end": {
                            "line": 483,
                            "column": 12
                        }
                    }
                ]
            },
            "20": {
                "line": 489,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 489,
                            "column": 8
                        },
                        "end": {
                            "line": 489,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 489,
                            "column": 8
                        },
                        "end": {
                            "line": 489,
                            "column": 8
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('tree-node', function (Y, NAME) {",
            "",
            "/*jshint expr:true, onevar:false */",
            "",
            "/**",
            "Provides the `Tree.Node` class, which represents a tree node contained in a",
            "`Tree` data structure.",
            "",
            "@module tree",
            "@submodule tree-node",
            "**/",
            "",
            "/**",
            "Represents a tree node in a `Tree` data structure.",
            "",
            "@class Tree.Node",
            "@param {Tree} tree `Tree` instance with which this node should be associated.",
            "@param {Object} [config] Configuration hash for this node.",
            "",
            "    @param {Boolean} [config.canHaveChildren=false] Whether or not this node can",
            "        contain child nodes. Will be automatically set to `true` if not",
            "        specified and `config.children` contains one or more children.",
            "",
            "    @param {Tree.Node[]} [config.children] Array of `Tree.Node` instances",
            "        for child nodes of this node.",
            "",
            "    @param {Object} [config.data] Implementation-specific data related to this",
            "        node. You may add arbitrary properties to this hash for your own use.",
            "",
            "    @param {String} [config.id] Unique id for this node. This id must be unique",
            "        among all tree nodes on the entire page, and will also be used as this",
            "        node's DOM id when it's rendered by a TreeView. A unique id will be",
            "        automatically generated unless you specify a custom value.",
            "",
            "    @param {Object} [config.state] State hash for this node. You may add",
            "        arbitrary state properties to this hash for your own use. See the",
            "        docs for `Tree.Node`'s `state` property for details on state values used",
            "        internally by `Tree.Node`.",
            "",
            "@constructor",
            "**/",
            "",
            "function TreeNode(tree, config) {",
            "    config || (config = {});",
            "",
            "    this.id   = this._yuid = config.id || this.id || Y.guid('treeNode-');",
            "    this.tree = tree;",
            "",
            "    this.children = config.children || [];",
            "    this.data     = config.data || {};",
            "    this.state    = config.state || {};",
            "",
            "    if (config.canHaveChildren) {",
            "        this.canHaveChildren = config.canHaveChildren;",
            "    } else if (this.children.length) {",
            "        this.canHaveChildren = true;",
            "    }",
            "",
            "    // Mix in arbitrary properties on the config object, but don't overwrite any",
            "    // existing properties of this node.",
            "    Y.mix(this, config);",
            "",
            "    // If this node has children, loop through them and ensure their parent",
            "    // references are all set to this node.",
            "    for (var i = 0, len = this.children.length; i < len; i++) {",
            "        this.children[i].parent = this;",
            "    }",
            "}",
            "",
            "TreeNode.prototype = {",
            "    // -- Public Properties ----------------------------------------------------",
            "",
            "    /**",
            "    Whether or not this node can contain child nodes.",
            "",
            "    This value is falsy by default unless child nodes are added at instantiation",
            "    time, in which case it will be automatically set to `true`. You can also",
            "    manually set it to `true` to indicate that a node can have children even",
            "    though it might not currently have any children.",
            "",
            "    Note that regardless of the value of this property, appending, prepending,",
            "    or inserting a node into this node will cause `canHaveChildren` to be set to",
            "    true automatically.",
            "",
            "    @property {Boolean} canHaveChildren",
            "    **/",
            "",
            "    /**",
            "    Child nodes contained within this node.",
            "",
            "    @property {Tree.Node[]} children",
            "    @default []",
            "    @readOnly",
            "    **/",
            "",
            "    /**",
            "    Arbitrary serializable data related to this node.",
            "",
            "    Use this property to store any data that should accompany this node when it",
            "    is serialized to JSON.",
            "",
            "    @property {Object} data",
            "    @default {}",
            "    **/",
            "",
            "    /**",
            "    Unique id for this node.",
            "",
            "    @property {String} id",
            "    @readOnly",
            "    **/",
            "",
            "    /**",
            "    Parent node of this node, or `undefined` if this is an unattached node or",
            "    the root node.",
            "",
            "    @property {Tree.Node} parent",
            "    @readOnly",
            "    **/",
            "",
            "    /**",
            "    Current state of this node.",
            "",
            "    Use this property to store state-specific info -- such as whether this node",
            "    is \"open\", \"selected\", or any other arbitrary state -- that should accompany",
            "    this node when it is serialized to JSON.",
            "",
            "    @property {Object} state",
            "    **/",
            "",
            "    /**",
            "    The Tree instance with which this node is associated.",
            "",
            "    @property {Tree} tree",
            "    @readOnly",
            "    **/",
            "",
            "    // -- Protected Properties -------------------------------------------------",
            "",
            "    /**",
            "    Mapping of child node ids to indices.",
            "",
            "    @property {Object} _indexMap",
            "    @protected",
            "    **/",
            "",
            "    /**",
            "    Flag indicating whether the `_indexMap` is stale and needs to be rebuilt.",
            "",
            "    @property {Boolean} _isIndexStale",
            "    @default true",
            "    @protected",
            "    **/",
            "    _isIndexStale: true,",
            "",
            "    /**",
            "    Simple way to type-check that this is an instance of Tree.Node.",
            "",
            "    @property {Boolean} _isYUITreeNode",
            "    @default true",
            "    @protected",
            "    **/",
            "    _isYUITreeNode: true,",
            "",
            "    /**",
            "    Array of property names on this node that should be serialized to JSON when",
            "    `toJSON()` is called.",
            "",
            "    Note that the `children` property is a special case that is managed",
            "    separately.",
            "",
            "    @property {String[]} _serializable",
            "    @protected",
            "    **/",
            "    _serializable: ['canHaveChildren', 'data', 'id', 'state'],",
            "",
            "    // -- Public Methods -------------------------------------------------------",
            "",
            "    /**",
            "    Appends the given tree node or array of nodes to the end of this node's",
            "    children.",
            "",
            "    @method append",
            "    @param {Object|Object[]|Tree.Node|Tree.Node[]} node Child node, node config",
            "        object, array of child nodes, or array of node config objects to append",
            "        to the given parent. Node config objects will automatically be converted",
            "        into node instances.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `add` event will",
            "            be suppressed.",
            "    @return {Tree.Node|Tree.Node[]} Node or array of nodes that were appended.",
            "    **/",
            "    append: function (node, options) {",
            "        return this.tree.appendNode(this, node, options);",
            "    },",
            "",
            "    /**",
            "    Returns this node's depth.",
            "",
            "    The root node of a tree always has a depth of 0. A child of the root has a",
            "    depth of 1, a child of that child will have a depth of 2, and so on.",
            "",
            "    @method depth",
            "    @return {Number} This node's depth.",
            "    @since 3.11.0",
            "    **/",
            "    depth: function () {",
            "        if (this.isRoot()) {",
            "            return 0;",
            "        }",
            "",
            "        var depth  = 0,",
            "            parent = this.parent;",
            "",
            "        while (parent) {",
            "            depth += 1;",
            "            parent = parent.parent;",
            "        }",
            "",
            "        return depth;",
            "    },",
            "",
            "    /**",
            "    Removes all children from this node. The removed children will still be",
            "    reusable unless the `destroy` option is truthy.",
            "",
            "    @method empty",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.destroy=false] If `true`, the children will",
            "            also be destroyed, which makes them available for garbage collection",
            "            and means they can't be reused.",
            "        @param {Boolean} [options.silent=false] If `true`, `remove` events will",
            "            be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @return {Tree.Node[]} Array of removed child nodes.",
            "    **/",
            "    empty: function (options) {",
            "        return this.tree.emptyNode(this, options);",
            "    },",
            "",
            "    /**",
            "    Performs a depth-first traversal of this node, passing it and each of its",
            "    descendants to the specified _callback_, and returning the first node for",
            "    which the callback returns a truthy value.",
            "",
            "    Traversal will stop as soon as a truthy value is returned from the callback.",
            "",
            "    See `Tree#traverseNode()` for more details on how depth-first traversal",
            "    works.",
            "",
            "    @method find",
            "    @param {Object} [options] Options.",
            "        @param {Number} [options.depth] Depth limit. If specified, descendants",
            "            will only be traversed to this depth before backtracking and moving",
            "            on.",
            "    @param {Function} callback Callback function to call with the traversed",
            "        node and each of its descendants. If this function returns a truthy",
            "        value, traversal will be stopped and the current node will be returned.",
            "",
            "        @param {Tree.Node} callback.node Node being traversed.",
            "",
            "    @param {Object} [thisObj] `this` object to use when executing _callback_.",
            "    @return {Tree.Node|null} Returns the first node for which the _callback_",
            "        returns a truthy value, or `null` if the callback never returns a truthy",
            "        value.",
            "    **/",
            "    find: function (options, callback, thisObj) {",
            "        return this.tree.findNode(this, options, callback, thisObj);",
            "    },",
            "",
            "    /**",
            "    Returns `true` if this node has one or more child nodes.",
            "",
            "    @method hasChildren",
            "    @return {Boolean} `true` if this node has one or more child nodes, `false`",
            "        otherwise.",
            "    **/",
            "    hasChildren: function () {",
            "        return !!this.children.length;",
            "    },",
            "",
            "    /**",
            "    Returns the numerical index of this node within its parent node, or `-1` if",
            "    this node doesn't have a parent node.",
            "",
            "    @method index",
            "    @return {Number} Index of this node within its parent node, or `-1` if this",
            "        node doesn't have a parent node.",
            "    **/",
            "    index: function () {",
            "        return this.parent ? this.parent.indexOf(this) : -1;",
            "    },",
            "",
            "    /**",
            "    Returns the numerical index of the given child node, or `-1` if the node is",
            "    not a child of this node.",
            "",
            "    @method indexOf",
            "    @param {Tree.Node} node Child node.",
            "    @return {Number} Index of the child, or `-1` if the node is not a child of",
            "        this node.",
            "    **/",
            "    indexOf: function (node) {",
            "        var index;",
            "",
            "        if (this._isIndexStale) {",
            "            this._reindex();",
            "        }",
            "",
            "        index = this._indexMap[node.id];",
            "",
            "        return typeof index === 'undefined' ? -1 : index;",
            "    },",
            "",
            "    /**",
            "    Inserts a node or array of nodes at the specified index under this node, or",
            "    appends them to this node if no index is specified.",
            "",
            "    If a node being inserted is from another tree, it and all its children will",
            "    be removed from that tree and moved to this one.",
            "",
            "    @method insert",
            "    @param {Object|Object[]|Tree.Node|Tree.Node[]} node Child node, node config",
            "        object, array of child nodes, or array of node config objects to insert",
            "        under the given parent. Node config objects will automatically be",
            "        converted into node instances.",
            "",
            "    @param {Object} [options] Options.",
            "        @param {Number} [options.index] Index at which to insert the child node.",
            "            If not specified, the node will be appended as the last child of the",
            "            parent.",
            "        @param {Boolean} [options.silent=false] If `true`, the `add` event will",
            "            be suppressed.",
            "        @param {String} [options.src='insert'] Source of the change, to be",
            "            passed along to the event facade of the resulting event. This can be",
            "            used to distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "",
            "    @return {Tree.Node[]} Node or array of nodes that were inserted.",
            "    **/",
            "    insert: function (node, options) {",
            "        return this.tree.insertNode(this, node, options);",
            "    },",
            "",
            "    /**",
            "    Returns `true` if this node has been inserted into a tree, `false` if it is",
            "    merely associated with a tree and has not yet been inserted.",
            "",
            "    @method isInTree",
            "    @return {Boolean} `true` if this node has been inserted into a tree, `false`",
            "        otherwise.",
            "    **/",
            "    isInTree: function () {",
            "        if (this.tree && this.tree.rootNode === this) {",
            "            return true;",
            "        }",
            "",
            "        return !!(this.parent && this.parent.isInTree());",
            "    },",
            "",
            "    /**",
            "    Returns `true` if this node is the root of the tree.",
            "",
            "    @method isRoot",
            "    @return {Boolean} `true` if this node is the root of the tree, `false`",
            "        otherwise.",
            "    **/",
            "    isRoot: function () {",
            "        return !!(this.tree && this.tree.rootNode === this);",
            "    },",
            "",
            "    /**",
            "    Returns this node's next sibling, or `undefined` if this node is the last",
            "    child.",
            "",
            "    @method next",
            "    @return {Tree.Node} This node's next sibling, or `undefined` if this node is",
            "        the last child.",
            "    **/",
            "    next: function () {",
            "        if (this.parent) {",
            "            return this.parent.children[this.index() + 1];",
            "        }",
            "    },",
            "",
            "    /**",
            "    Prepends a node or array of nodes at the beginning of this node's children.",
            "",
            "    If a node being prepended is from another tree, it and all its children will",
            "    be removed from that tree and moved to this one.",
            "",
            "    @method prepend",
            "    @param {Object|Object[]|Tree.Node|Tree.Node[]} node Child node, node config",
            "        object, array of child nodes, or array of node config objects to prepend",
            "        to this node. Node config objects will automatically be converted into",
            "        node instances.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `add` event will",
            "            be suppressed.",
            "    @return {Tree.Node|Tree.Node[]} Node or array of nodes that were prepended.",
            "    **/",
            "    prepend: function (node, options) {",
            "        return this.tree.prependNode(this, node, options);",
            "    },",
            "",
            "    /**",
            "    Returns this node's previous sibling, or `undefined` if this node is the",
            "    first child",
            "",
            "    @method previous",
            "    @return {Tree.Node} This node's previous sibling, or `undefined` if this",
            "        node is the first child.",
            "    **/",
            "    previous: function () {",
            "        if (this.parent) {",
            "            return this.parent.children[this.index() - 1];",
            "        }",
            "    },",
            "",
            "    /**",
            "    Removes this node from its parent node.",
            "",
            "    @method remove",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.destroy=false] If `true`, this node and all",
            "            its children will also be destroyed, which makes them available for",
            "            garbage collection and means they can't be reused.",
            "        @param {Boolean} [options.silent=false] If `true`, the `remove` event",
            "            will be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    remove: function (options) {",
            "        return this.tree.removeNode(this, options);",
            "    },",
            "",
            "    /**",
            "    Returns the total number of nodes contained within this node, including all",
            "    descendants of this node's children.",
            "",
            "    @method size",
            "    @return {Number} Total number of nodes contained within this node, including",
            "        all descendants.",
            "    **/",
            "    size: function () {",
            "        var children = this.children,",
            "            len      = children.length,",
            "            total    = len;",
            "",
            "        for (var i = 0; i < len; i++) {",
            "            total += children[i].size();",
            "        }",
            "",
            "        return total;",
            "    },",
            "",
            "    /**",
            "    Serializes this node to an object suitable for use in JSON.",
            "",
            "    @method toJSON",
            "    @return {Object} Serialized node object.",
            "    **/",
            "    toJSON: function () {",
            "        var obj   = {},",
            "            state = this.state,",
            "            i, key, len;",
            "",
            "        // Do nothing if this node is marked as destroyed.",
            "        if (state.destroyed) {",
            "            return null;",
            "        }",
            "",
            "        // Serialize properties explicitly marked as serializable.",
            "        for (i = 0, len = this._serializable.length; i < len; i++) {",
            "            key = this._serializable[i];",
            "",
            "            if (key in this) {",
            "                obj[key] = this[key];",
            "            }",
            "        }",
            "",
            "        // Serialize child nodes.",
            "        if (this.canHaveChildren) {",
            "            obj.children = [];",
            "",
            "            for (i = 0, len = this.children.length; i < len; i++) {",
            "                obj.children.push(this.children[i].toJSON());",
            "            }",
            "        }",
            "",
            "        return obj;",
            "    },",
            "",
            "    /**",
            "    Performs a depth-first traversal of this node, passing it and each of its",
            "    descendants to the specified _callback_.",
            "",
            "    If the callback function returns `Tree.STOP_TRAVERSAL`, traversal will be",
            "    stopped immediately. Otherwise, it will continue until the deepest",
            "    descendant of _node_ has been traversed, or until each branch has been",
            "    traversed to the optional maximum depth limit.",
            "",
            "    Since traversal is depth-first, that means nodes are traversed like this:",
            "",
            "                1",
            "              / | \\",
            "             2  8  9",
            "            / \\     \\",
            "           3   7    10",
            "         / | \\      / \\",
            "        4  5  6    11 12",
            "",
            "    @method traverse",
            "    @param {Object} [options] Options.",
            "        @param {Number} [options.depth] Depth limit. If specified, descendants",
            "            will only be traversed to this depth before backtracking and moving",
            "            on.",
            "    @param {Function} callback Callback function to call with the traversed",
            "        node and each of its descendants.",
            "",
            "        @param {Tree.Node} callback.node Node being traversed.",
            "",
            "    @param {Object} [thisObj] `this` object to use when executing _callback_.",
            "    @return {Mixed} Returns `Tree.STOP_TRAVERSAL` if traversal was stopped;",
            "        otherwise returns `undefined`.",
            "    **/",
            "    traverse: function (options, callback, thisObj) {",
            "        return this.tree.traverseNode(this, options, callback, thisObj);",
            "    },",
            "",
            "    // -- Protected Methods ----------------------------------------------------",
            "    _reindex: function () {",
            "        var children = this.children,",
            "            indexMap = {},",
            "            i, len;",
            "",
            "        for (i = 0, len = children.length; i < len; i++) {",
            "            indexMap[children[i].id] = i;",
            "        }",
            "",
            "        this._indexMap     = indexMap;",
            "        this._isIndexStale = false;",
            "    }",
            "};",
            "",
            "Y.namespace('Tree').Node = TreeNode;",
            "",
            "",
            "}, '@VERSION@');",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "43": 1,
            "44": 1252,
            "46": 1252,
            "47": 1252,
            "49": 1252,
            "50": 1252,
            "51": 1252,
            "53": 1252,
            "54": 234,
            "55": 1018,
            "56": 147,
            "61": 1252,
            "65": 1252,
            "66": 427,
            "70": 1,
            "194": 59,
            "208": 6,
            "209": 1,
            "212": 5,
            "215": 5,
            "216": 10,
            "217": 10,
            "220": 5,
            "241": 1,
            "271": 1,
            "282": 17,
            "294": 31,
            "307": 69,
            "309": 69,
            "310": 45,
            "313": 69,
            "315": 69,
            "345": 1,
            "357": 8,
            "358": 3,
            "361": 5,
            "372": 61,
            "384": 3,
            "385": 3,
            "406": 2,
            "418": 3,
            "419": 3,
            "440": 4,
            "452": 36,
            "456": 36,
            "457": 29,
            "460": 36,
            "470": 15,
            "475": 15,
            "476": 0,
            "480": 15,
            "481": 64,
            "483": 64,
            "484": 53,
            "489": 15,
            "490": 4,
            "492": 4,
            "493": 12,
            "497": 15,
            "534": 1,
            "539": 45,
            "543": 45,
            "544": 101,
            "547": 45,
            "548": 45,
            "552": 1
        }
    },
    "build/tree/tree.js": {
        "path": "build/tree/tree.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 224,
            "5": 224,
            "6": 2,
            "7": 224,
            "8": 1,
            "9": 224,
            "10": 224,
            "11": 224,
            "12": 224,
            "13": 224,
            "14": 224,
            "15": 139,
            "16": 194,
            "17": 194,
            "18": 194,
            "19": 194,
            "20": 194,
            "21": 194,
            "22": 66,
            "23": 232,
            "24": 1274,
            "25": 1274,
            "26": 30,
            "27": 4,
            "28": 3,
            "29": 26,
            "30": 26,
            "31": 1244,
            "32": 147,
            "33": 147,
            "34": 424,
            "35": 147,
            "36": 1244,
            "37": 1244,
            "38": 1060,
            "39": 1060,
            "40": 1060,
            "41": 843,
            "42": 843,
            "43": 843,
            "44": 1060,
            "45": 10,
            "46": 1060,
            "47": 1060,
            "48": 1060,
            "49": 1060,
            "50": 1060,
            "51": 1060,
            "52": 1060,
            "53": 3,
            "54": 3,
            "55": 6,
            "56": 3,
            "57": 5,
            "58": 5,
            "59": 3,
            "60": 3,
            "61": 3,
            "62": 5,
            "63": 25,
            "64": 1,
            "65": 1,
            "66": 5,
            "67": 11,
            "68": 690,
            "69": 690,
            "70": 690,
            "71": 154,
            "72": 154,
            "73": 437,
            "74": 437,
            "75": 436,
            "76": 436,
            "77": 21,
            "78": 154,
            "79": 536,
            "80": 536,
            "81": 534,
            "82": 534,
            "83": 441,
            "84": 534,
            "85": 536,
            "86": 10,
            "87": 38,
            "88": 38,
            "89": 38,
            "90": 4,
            "91": 1,
            "92": 87,
            "93": 2,
            "94": 1,
            "95": 85,
            "96": 5,
            "97": 5,
            "98": 5,
            "99": 85,
            "100": 85,
            "101": 85,
            "102": 2,
            "103": 83,
            "104": 83,
            "105": 78,
            "106": 78,
            "107": 73,
            "108": 3,
            "109": 26,
            "110": 26,
            "111": 18,
            "112": 8,
            "113": 0,
            "114": 8,
            "115": 8,
            "116": 8,
            "117": 0,
            "118": 8,
            "119": 8,
            "120": 224,
            "121": 224,
            "122": 1,
            "123": 1,
            "124": 1,
            "125": 0,
            "126": 0,
            "127": 224,
            "128": 128,
            "129": 128,
            "130": 96,
            "131": 564,
            "132": 564,
            "133": 564,
            "134": 566,
            "135": 96,
            "136": 96,
            "137": 97,
            "138": 96,
            "139": 96,
            "140": 881,
            "141": 639,
            "142": 639,
            "143": 639,
            "144": 242,
            "145": 169,
            "146": 242,
            "147": 881,
            "148": 375,
            "149": 31,
            "150": 31,
            "151": 31,
            "152": 31,
            "153": 31,
            "154": 31,
            "155": 14,
            "156": 17,
            "157": 17,
            "158": 31,
            "159": 533,
            "160": 533,
            "161": 4,
            "162": 3,
            "163": 3,
            "164": 0,
            "165": 3,
            "166": 3,
            "167": 4,
            "168": 533,
            "169": 533,
            "170": 533,
            "171": 533,
            "172": 231,
            "173": 231,
            "174": 7,
            "175": 231,
            "176": 231,
            "177": 231,
            "178": 231,
            "179": 37,
            "180": 37,
            "181": 5,
            "182": 32,
            "183": 31,
            "184": 1,
            "185": 0,
            "186": 0,
            "187": 1
        },
        "b": {
            "1": [
                224,
                74
            ],
            "2": [
                2,
                222
            ],
            "3": [
                1,
                223
            ],
            "4": [
                224,
                224
            ],
            "5": [
                139,
                85
            ],
            "6": [
                232,
                226
            ],
            "7": [
                232,
                226
            ],
            "8": [
                232,
                226
            ],
            "9": [
                1274,
                67
            ],
            "10": [
                30,
                1244
            ],
            "11": [
                4,
                26
            ],
            "12": [
                147,
                1097
            ],
            "13": [
                1060,
                9
            ],
            "14": [
                10,
                1050
            ],
            "15": [
                3,
                2
            ],
            "16": [
                1,
                24
            ],
            "17": [
                690,
                31
            ],
            "18": [
                690,
                0
            ],
            "19": [
                154,
                536
            ],
            "20": [
                690,
                154
            ],
            "21": [
                436,
                1
            ],
            "22": [
                21,
                415
            ],
            "23": [
                534,
                2
            ],
            "24": [
                441,
                93
            ],
            "25": [
                534,
                445
            ],
            "26": [
                38,
                16
            ],
            "27": [
                38,
                32
            ],
            "28": [
                2,
                85
            ],
            "29": [
                5,
                80
            ],
            "30": [
                85,
                0
            ],
            "31": [
                2,
                83
            ],
            "32": [
                78,
                5
            ],
            "33": [
                83,
                11
            ],
            "34": [
                72,
                6
            ],
            "35": [
                3,
                70
            ],
            "36": [
                18,
                8
            ],
            "37": [
                0,
                8
            ],
            "38": [
                8,
                8
            ],
            "39": [
                1,
                223
            ],
            "40": [
                1,
                0
            ],
            "41": [
                128,
                96
            ],
            "42": [
                639,
                242
            ],
            "43": [
                881,
                881
            ],
            "44": [
                639,
                0
            ],
            "45": [
                169,
                73
            ],
            "46": [
                242,
                242,
                242
            ],
            "47": [
                31,
                0
            ],
            "48": [
                31,
                0
            ],
            "49": [
                14,
                17
            ],
            "50": [
                4,
                529
            ],
            "51": [
                3,
                1
            ],
            "52": [
                0,
                3
            ],
            "53": [
                3,
                0
            ],
            "54": [
                7,
                224
            ],
            "55": [
                5,
                32
            ],
            "56": [
                31,
                1
            ],
            "57": [
                0,
                1
            ]
        },
        "f": {
            "1": 1,
            "2": 224,
            "3": 224,
            "4": 194,
            "5": 66,
            "6": 232,
            "7": 1274,
            "8": 1060,
            "9": 3,
            "10": 5,
            "11": 25,
            "12": 11,
            "13": 690,
            "14": 10,
            "15": 38,
            "16": 4,
            "17": 1,
            "18": 87,
            "19": 26,
            "20": 224,
            "21": 564,
            "22": 881,
            "23": 375,
            "24": 31,
            "25": 533,
            "26": 231,
            "27": 37
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 16
                    },
                    "end": {
                        "line": 1,
                        "column": 35
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 162,
                "loc": {
                    "start": {
                        "line": 162,
                        "column": 17
                    },
                    "end": {
                        "line": 162,
                        "column": 35
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 184,
                "loc": {
                    "start": {
                        "line": 184,
                        "column": 44
                    },
                    "end": {
                        "line": 184,
                        "column": 56
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 195,
                "loc": {
                    "start": {
                        "line": 195,
                        "column": 16
                    },
                    "end": {
                        "line": 195,
                        "column": 28
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 226,
                "loc": {
                    "start": {
                        "line": 226,
                        "column": 16
                    },
                    "end": {
                        "line": 226,
                        "column": 49
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 250,
                "loc": {
                    "start": {
                        "line": 250,
                        "column": 11
                    },
                    "end": {
                        "line": 250,
                        "column": 40
                    }
                }
            },
            "7": {
                "name": "(anonymous_7)",
                "line": 272,
                "loc": {
                    "start": {
                        "line": 272,
                        "column": 16
                    },
                    "end": {
                        "line": 272,
                        "column": 34
                    }
                }
            },
            "8": {
                "name": "(anonymous_8)",
                "line": 319,
                "loc": {
                    "start": {
                        "line": 319,
                        "column": 17
                    },
                    "end": {
                        "line": 319,
                        "column": 42
                    }
                }
            },
            "9": {
                "name": "(anonymous_9)",
                "line": 369,
                "loc": {
                    "start": {
                        "line": 369,
                        "column": 15
                    },
                    "end": {
                        "line": 369,
                        "column": 40
                    }
                }
            },
            "10": {
                "name": "(anonymous_10)",
                "line": 406,
                "loc": {
                    "start": {
                        "line": 406,
                        "column": 14
                    },
                    "end": {
                        "line": 406,
                        "column": 58
                    }
                }
            },
            "11": {
                "name": "(anonymous_11)",
                "line": 416,
                "loc": {
                    "start": {
                        "line": 416,
                        "column": 41
                    },
                    "end": {
                        "line": 416,
                        "column": 63
                    }
                }
            },
            "12": {
                "name": "(anonymous_12)",
                "line": 434,
                "loc": {
                    "start": {
                        "line": 434,
                        "column": 17
                    },
                    "end": {
                        "line": 434,
                        "column": 31
                    }
                }
            },
            "13": {
                "name": "(anonymous_13)",
                "line": 465,
                "loc": {
                    "start": {
                        "line": 465,
                        "column": 16
                    },
                    "end": {
                        "line": 465,
                        "column": 49
                    }
                }
            },
            "14": {
                "name": "(anonymous_14)",
                "line": 543,
                "loc": {
                    "start": {
                        "line": 543,
                        "column": 17
                    },
                    "end": {
                        "line": 543,
                        "column": 50
                    }
                }
            },
            "15": {
                "name": "(anonymous_15)",
                "line": 568,
                "loc": {
                    "start": {
                        "line": 568,
                        "column": 16
                    },
                    "end": {
                        "line": 568,
                        "column": 41
                    }
                }
            },
            "16": {
                "name": "(anonymous_16)",
                "line": 592,
                "loc": {
                    "start": {
                        "line": 592,
                        "column": 10
                    },
                    "end": {
                        "line": 592,
                        "column": 22
                    }
                }
            },
            "17": {
                "name": "(anonymous_17)",
                "line": 602,
                "loc": {
                    "start": {
                        "line": 602,
                        "column": 12
                    },
                    "end": {
                        "line": 602,
                        "column": 24
                    }
                }
            },
            "18": {
                "name": "(anonymous_18)",
                "line": 640,
                "loc": {
                    "start": {
                        "line": 640,
                        "column": 18
                    },
                    "end": {
                        "line": 640,
                        "column": 62
                    }
                }
            },
            "19": {
                "name": "(anonymous_19)",
                "line": 686,
                "loc": {
                    "start": {
                        "line": 686,
                        "column": 16
                    },
                    "end": {
                        "line": 686,
                        "column": 41
                    }
                }
            },
            "20": {
                "name": "(anonymous_20)",
                "line": 725,
                "loc": {
                    "start": {
                        "line": 725,
                        "column": 23
                    },
                    "end": {
                        "line": 725,
                        "column": 35
                    }
                }
            },
            "21": {
                "name": "(anonymous_21)",
                "line": 748,
                "loc": {
                    "start": {
                        "line": 748,
                        "column": 24
                    },
                    "end": {
                        "line": 748,
                        "column": 36
                    }
                }
            },
            "22": {
                "name": "(anonymous_22)",
                "line": 781,
                "loc": {
                    "start": {
                        "line": 781,
                        "column": 20
                    },
                    "end": {
                        "line": 781,
                        "column": 53
                    }
                }
            },
            "23": {
                "name": "(anonymous_23)",
                "line": 815,
                "loc": {
                    "start": {
                        "line": 815,
                        "column": 26
                    },
                    "end": {
                        "line": 815,
                        "column": 63
                    }
                }
            },
            "24": {
                "name": "(anonymous_24)",
                "line": 826,
                "loc": {
                    "start": {
                        "line": 826,
                        "column": 27
                    },
                    "end": {
                        "line": 826,
                        "column": 43
                    }
                }
            },
            "25": {
                "name": "(anonymous_25)",
                "line": 849,
                "loc": {
                    "start": {
                        "line": 849,
                        "column": 15
                    },
                    "end": {
                        "line": 849,
                        "column": 28
                    }
                }
            },
            "26": {
                "name": "(anonymous_26)",
                "line": 887,
                "loc": {
                    "start": {
                        "line": 887,
                        "column": 17
                    },
                    "end": {
                        "line": 887,
                        "column": 30
                    }
                }
            },
            "27": {
                "name": "(anonymous_27)",
                "line": 901,
                "loc": {
                    "start": {
                        "line": 901,
                        "column": 18
                    },
                    "end": {
                        "line": 901,
                        "column": 31
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 928,
                    "column": 59
                }
            },
            "2": {
                "start": {
                    "line": 39,
                    "column": 0
                },
                "end": {
                    "line": 77,
                    "column": 26
                }
            },
            "3": {
                "start": {
                    "line": 79,
                    "column": 0
                },
                "end": {
                    "line": 923,
                    "column": 3
                }
            },
            "4": {
                "start": {
                    "line": 163,
                    "column": 8
                },
                "end": {
                    "line": 163,
                    "column": 32
                }
            },
            "5": {
                "start": {
                    "line": 165,
                    "column": 8
                },
                "end": {
                    "line": 167,
                    "column": 9
                }
            },
            "6": {
                "start": {
                    "line": 166,
                    "column": 12
                },
                "end": {
                    "line": 166,
                    "column": 46
                }
            },
            "7": {
                "start": {
                    "line": 169,
                    "column": 8
                },
                "end": {
                    "line": 171,
                    "column": 9
                }
            },
            "8": {
                "start": {
                    "line": 170,
                    "column": 12
                },
                "end": {
                    "line": 170,
                    "column": 84
                }
            },
            "9": {
                "start": {
                    "line": 180,
                    "column": 8
                },
                "end": {
                    "line": 180,
                    "column": 50
                }
            },
            "10": {
                "start": {
                    "line": 181,
                    "column": 8
                },
                "end": {
                    "line": 181,
                    "column": 27
                }
            },
            "11": {
                "start": {
                    "line": 184,
                    "column": 8
                },
                "end": {
                    "line": 192,
                    "column": 11
                }
            },
            "12": {
                "start": {
                    "line": 185,
                    "column": 12
                },
                "end": {
                    "line": 185,
                    "column": 37
                }
            },
            "13": {
                "start": {
                    "line": 187,
                    "column": 12
                },
                "end": {
                    "line": 187,
                    "column": 56
                }
            },
            "14": {
                "start": {
                    "line": 189,
                    "column": 12
                },
                "end": {
                    "line": 191,
                    "column": 13
                }
            },
            "15": {
                "start": {
                    "line": 190,
                    "column": 16
                },
                "end": {
                    "line": 190,
                    "column": 77
                }
            },
            "16": {
                "start": {
                    "line": 196,
                    "column": 8
                },
                "end": {
                    "line": 196,
                    "column": 56
                }
            },
            "17": {
                "start": {
                    "line": 198,
                    "column": 8
                },
                "end": {
                    "line": 198,
                    "column": 31
                }
            },
            "18": {
                "start": {
                    "line": 199,
                    "column": 8
                },
                "end": {
                    "line": 199,
                    "column": 31
                }
            },
            "19": {
                "start": {
                    "line": 200,
                    "column": 8
                },
                "end": {
                    "line": 200,
                    "column": 31
                }
            },
            "20": {
                "start": {
                    "line": 201,
                    "column": 8
                },
                "end": {
                    "line": 201,
                    "column": 31
                }
            },
            "21": {
                "start": {
                    "line": 202,
                    "column": 8
                },
                "end": {
                    "line": 202,
                    "column": 31
                }
            },
            "22": {
                "start": {
                    "line": 227,
                    "column": 8
                },
                "end": {
                    "line": 230,
                    "column": 12
                }
            },
            "23": {
                "start": {
                    "line": 251,
                    "column": 8
                },
                "end": {
                    "line": 257,
                    "column": 11
                }
            },
            "24": {
                "start": {
                    "line": 273,
                    "column": 8
                },
                "end": {
                    "line": 273,
                    "column": 32
                }
            },
            "25": {
                "start": {
                    "line": 277,
                    "column": 8
                },
                "end": {
                    "line": 285,
                    "column": 9
                }
            },
            "26": {
                "start": {
                    "line": 278,
                    "column": 12
                },
                "end": {
                    "line": 281,
                    "column": 13
                }
            },
            "27": {
                "start": {
                    "line": 279,
                    "column": 16
                },
                "end": {
                    "line": 279,
                    "column": 95
                }
            },
            "28": {
                "start": {
                    "line": 280,
                    "column": 16
                },
                "end": {
                    "line": 280,
                    "column": 28
                }
            },
            "29": {
                "start": {
                    "line": 283,
                    "column": 12
                },
                "end": {
                    "line": 283,
                    "column": 36
                }
            },
            "30": {
                "start": {
                    "line": 284,
                    "column": 12
                },
                "end": {
                    "line": 284,
                    "column": 26
                }
            },
            "31": {
                "start": {
                    "line": 288,
                    "column": 8
                },
                "end": {
                    "line": 296,
                    "column": 9
                }
            },
            "32": {
                "start": {
                    "line": 289,
                    "column": 12
                },
                "end": {
                    "line": 289,
                    "column": 30
                }
            },
            "33": {
                "start": {
                    "line": 291,
                    "column": 12
                },
                "end": {
                    "line": 293,
                    "column": 13
                }
            },
            "34": {
                "start": {
                    "line": 292,
                    "column": 16
                },
                "end": {
                    "line": 292,
                    "column": 67
                }
            },
            "35": {
                "start": {
                    "line": 295,
                    "column": 12
                },
                "end": {
                    "line": 295,
                    "column": 59
                }
            },
            "36": {
                "start": {
                    "line": 298,
                    "column": 8
                },
                "end": {
                    "line": 298,
                    "column": 53
                }
            },
            "37": {
                "start": {
                    "line": 300,
                    "column": 8
                },
                "end": {
                    "line": 300,
                    "column": 45
                }
            },
            "38": {
                "start": {
                    "line": 320,
                    "column": 8
                },
                "end": {
                    "line": 320,
                    "column": 26
                }
            },
            "39": {
                "start": {
                    "line": 322,
                    "column": 8
                },
                "end": {
                    "line": 322,
                    "column": 34
                }
            },
            "40": {
                "start": {
                    "line": 324,
                    "column": 8
                },
                "end": {
                    "line": 334,
                    "column": 9
                }
            },
            "41": {
                "start": {
                    "line": 325,
                    "column": 12
                },
                "end": {
                    "line": 325,
                    "column": 37
                }
            },
            "42": {
                "start": {
                    "line": 330,
                    "column": 12
                },
                "end": {
                    "line": 330,
                    "column": 32
                }
            },
            "43": {
                "start": {
                    "line": 333,
                    "column": 12
                },
                "end": {
                    "line": 333,
                    "column": 45
                }
            },
            "44": {
                "start": {
                    "line": 336,
                    "column": 8
                },
                "end": {
                    "line": 338,
                    "column": 9
                }
            },
            "45": {
                "start": {
                    "line": 337,
                    "column": 12
                },
                "end": {
                    "line": 337,
                    "column": 43
                }
            },
            "46": {
                "start": {
                    "line": 340,
                    "column": 8
                },
                "end": {
                    "line": 340,
                    "column": 28
                }
            },
            "47": {
                "start": {
                    "line": 341,
                    "column": 8
                },
                "end": {
                    "line": 341,
                    "column": 28
                }
            },
            "48": {
                "start": {
                    "line": 342,
                    "column": 8
                },
                "end": {
                    "line": 342,
                    "column": 43
                }
            },
            "49": {
                "start": {
                    "line": 343,
                    "column": 8
                },
                "end": {
                    "line": 343,
                    "column": 30
                }
            },
            "50": {
                "start": {
                    "line": 344,
                    "column": 8
                },
                "end": {
                    "line": 344,
                    "column": 28
                }
            },
            "51": {
                "start": {
                    "line": 346,
                    "column": 8
                },
                "end": {
                    "line": 346,
                    "column": 38
                }
            },
            "52": {
                "start": {
                    "line": 348,
                    "column": 8
                },
                "end": {
                    "line": 348,
                    "column": 20
                }
            },
            "53": {
                "start": {
                    "line": 370,
                    "column": 8
                },
                "end": {
                    "line": 371,
                    "column": 26
                }
            },
            "54": {
                "start": {
                    "line": 373,
                    "column": 8
                },
                "end": {
                    "line": 375,
                    "column": 9
                }
            },
            "55": {
                "start": {
                    "line": 374,
                    "column": 12
                },
                "end": {
                    "line": 374,
                    "column": 63
                }
            },
            "56": {
                "start": {
                    "line": 377,
                    "column": 8
                },
                "end": {
                    "line": 377,
                    "column": 23
                }
            },
            "57": {
                "start": {
                    "line": 407,
                    "column": 8
                },
                "end": {
                    "line": 407,
                    "column": 25
                }
            },
            "58": {
                "start": {
                    "line": 410,
                    "column": 8
                },
                "end": {
                    "line": 414,
                    "column": 9
                }
            },
            "59": {
                "start": {
                    "line": 411,
                    "column": 12
                },
                "end": {
                    "line": 411,
                    "column": 32
                }
            },
            "60": {
                "start": {
                    "line": 412,
                    "column": 12
                },
                "end": {
                    "line": 412,
                    "column": 31
                }
            },
            "61": {
                "start": {
                    "line": 413,
                    "column": 12
                },
                "end": {
                    "line": 413,
                    "column": 26
                }
            },
            "62": {
                "start": {
                    "line": 416,
                    "column": 8
                },
                "end": {
                    "line": 421,
                    "column": 11
                }
            },
            "63": {
                "start": {
                    "line": 417,
                    "column": 12
                },
                "end": {
                    "line": 420,
                    "column": 13
                }
            },
            "64": {
                "start": {
                    "line": 418,
                    "column": 16
                },
                "end": {
                    "line": 418,
                    "column": 35
                }
            },
            "65": {
                "start": {
                    "line": 419,
                    "column": 16
                },
                "end": {
                    "line": 419,
                    "column": 43
                }
            },
            "66": {
                "start": {
                    "line": 423,
                    "column": 8
                },
                "end": {
                    "line": 423,
                    "column": 21
                }
            },
            "67": {
                "start": {
                    "line": 435,
                    "column": 8
                },
                "end": {
                    "line": 435,
                    "column": 33
                }
            },
            "68": {
                "start": {
                    "line": 466,
                    "column": 8
                },
                "end": {
                    "line": 466,
                    "column": 34
                }
            },
            "69": {
                "start": {
                    "line": 467,
                    "column": 8
                },
                "end": {
                    "line": 467,
                    "column": 44
                }
            },
            "70": {
                "start": {
                    "line": 481,
                    "column": 8
                },
                "end": {
                    "line": 499,
                    "column": 9
                }
            },
            "71": {
                "start": {
                    "line": 482,
                    "column": 12
                },
                "end": {
                    "line": 484,
                    "column": 29
                }
            },
            "72": {
                "start": {
                    "line": 486,
                    "column": 12
                },
                "end": {
                    "line": 496,
                    "column": 13
                }
            },
            "73": {
                "start": {
                    "line": 487,
                    "column": 16
                },
                "end": {
                    "line": 487,
                    "column": 73
                }
            },
            "74": {
                "start": {
                    "line": 489,
                    "column": 16
                },
                "end": {
                    "line": 495,
                    "column": 17
                }
            },
            "75": {
                "start": {
                    "line": 490,
                    "column": 20
                },
                "end": {
                    "line": 490,
                    "column": 53
                }
            },
            "76": {
                "start": {
                    "line": 492,
                    "column": 20
                },
                "end": {
                    "line": 494,
                    "column": 21
                }
            },
            "77": {
                "start": {
                    "line": 493,
                    "column": 24
                },
                "end": {
                    "line": 493,
                    "column": 43
                }
            },
            "78": {
                "start": {
                    "line": 498,
                    "column": 12
                },
                "end": {
                    "line": 498,
                    "column": 33
                }
            },
            "79": {
                "start": {
                    "line": 501,
                    "column": 8
                },
                "end": {
                    "line": 501,
                    "column": 37
                }
            },
            "80": {
                "start": {
                    "line": 503,
                    "column": 8
                },
                "end": {
                    "line": 519,
                    "column": 9
                }
            },
            "81": {
                "start": {
                    "line": 504,
                    "column": 12
                },
                "end": {
                    "line": 504,
                    "column": 38
                }
            },
            "82": {
                "start": {
                    "line": 506,
                    "column": 12
                },
                "end": {
                    "line": 508,
                    "column": 13
                }
            },
            "83": {
                "start": {
                    "line": 507,
                    "column": 16
                },
                "end": {
                    "line": 507,
                    "column": 73
                }
            },
            "84": {
                "start": {
                    "line": 510,
                    "column": 12
                },
                "end": {
                    "line": 518,
                    "column": 15
                }
            },
            "85": {
                "start": {
                    "line": 521,
                    "column": 8
                },
                "end": {
                    "line": 521,
                    "column": 20
                }
            },
            "86": {
                "start": {
                    "line": 544,
                    "column": 8
                },
                "end": {
                    "line": 547,
                    "column": 12
                }
            },
            "87": {
                "start": {
                    "line": 569,
                    "column": 8
                },
                "end": {
                    "line": 569,
                    "column": 34
                }
            },
            "88": {
                "start": {
                    "line": 571,
                    "column": 8
                },
                "end": {
                    "line": 579,
                    "column": 11
                }
            },
            "89": {
                "start": {
                    "line": 581,
                    "column": 8
                },
                "end": {
                    "line": 581,
                    "column": 20
                }
            },
            "90": {
                "start": {
                    "line": 593,
                    "column": 8
                },
                "end": {
                    "line": 593,
                    "column": 40
                }
            },
            "91": {
                "start": {
                    "line": 603,
                    "column": 8
                },
                "end": {
                    "line": 603,
                    "column": 38
                }
            },
            "92": {
                "start": {
                    "line": 641,
                    "column": 8
                },
                "end": {
                    "line": 644,
                    "column": 9
                }
            },
            "93": {
                "start": {
                    "line": 642,
                    "column": 12
                },
                "end": {
                    "line": 642,
                    "column": 85
                }
            },
            "94": {
                "start": {
                    "line": 643,
                    "column": 12
                },
                "end": {
                    "line": 643,
                    "column": 19
                }
            },
            "95": {
                "start": {
                    "line": 647,
                    "column": 8
                },
                "end": {
                    "line": 651,
                    "column": 9
                }
            },
            "96": {
                "start": {
                    "line": 648,
                    "column": 12
                },
                "end": {
                    "line": 648,
                    "column": 32
                }
            },
            "97": {
                "start": {
                    "line": 649,
                    "column": 12
                },
                "end": {
                    "line": 649,
                    "column": 31
                }
            },
            "98": {
                "start": {
                    "line": 650,
                    "column": 12
                },
                "end": {
                    "line": 650,
                    "column": 26
                }
            },
            "99": {
                "start": {
                    "line": 653,
                    "column": 8
                },
                "end": {
                    "line": 653,
                    "column": 34
                }
            },
            "100": {
                "start": {
                    "line": 655,
                    "column": 8
                },
                "end": {
                    "line": 656,
                    "column": 61
                }
            },
            "101": {
                "start": {
                    "line": 658,
                    "column": 8
                },
                "end": {
                    "line": 660,
                    "column": 9
                }
            },
            "102": {
                "start": {
                    "line": 659,
                    "column": 12
                },
                "end": {
                    "line": 659,
                    "column": 24
                }
            },
            "103": {
                "start": {
                    "line": 662,
                    "column": 8
                },
                "end": {
                    "line": 662,
                    "column": 37
                }
            },
            "104": {
                "start": {
                    "line": 664,
                    "column": 8
                },
                "end": {
                    "line": 672,
                    "column": 9
                }
            },
            "105": {
                "start": {
                    "line": 665,
                    "column": 12
                },
                "end": {
                    "line": 665,
                    "column": 80
                }
            },
            "106": {
                "start": {
                    "line": 667,
                    "column": 12
                },
                "end": {
                    "line": 671,
                    "column": 13
                }
            },
            "107": {
                "start": {
                    "line": 668,
                    "column": 16
                },
                "end": {
                    "line": 670,
                    "column": 17
                }
            },
            "108": {
                "start": {
                    "line": 669,
                    "column": 20
                },
                "end": {
                    "line": 669,
                    "column": 32
                }
            },
            "109": {
                "start": {
                    "line": 687,
                    "column": 8
                },
                "end": {
                    "line": 687,
                    "column": 32
                }
            },
            "110": {
                "start": {
                    "line": 689,
                    "column": 8
                },
                "end": {
                    "line": 691,
                    "column": 9
                }
            },
            "111": {
                "start": {
                    "line": 690,
                    "column": 12
                },
                "end": {
                    "line": 690,
                    "column": 19
                }
            },
            "112": {
                "start": {
                    "line": 693,
                    "column": 8
                },
                "end": {
                    "line": 695,
                    "column": 9
                }
            },
            "113": {
                "start": {
                    "line": 694,
                    "column": 12
                },
                "end": {
                    "line": 694,
                    "column": 62
                }
            },
            "114": {
                "start": {
                    "line": 697,
                    "column": 8
                },
                "end": {
                    "line": 697,
                    "column": 42
                }
            },
            "115": {
                "start": {
                    "line": 698,
                    "column": 8
                },
                "end": {
                    "line": 698,
                    "column": 41
                }
            },
            "116": {
                "start": {
                    "line": 703,
                    "column": 8
                },
                "end": {
                    "line": 707,
                    "column": 9
                }
            },
            "117": {
                "start": {
                    "line": 706,
                    "column": 12
                },
                "end": {
                    "line": 706,
                    "column": 50
                }
            },
            "118": {
                "start": {
                    "line": 709,
                    "column": 8
                },
                "end": {
                    "line": 709,
                    "column": 25
                }
            },
            "119": {
                "start": {
                    "line": 710,
                    "column": 8
                },
                "end": {
                    "line": 710,
                    "column": 38
                }
            },
            "120": {
                "start": {
                    "line": 726,
                    "column": 8
                },
                "end": {
                    "line": 728,
                    "column": 26
                }
            },
            "121": {
                "start": {
                    "line": 730,
                    "column": 8
                },
                "end": {
                    "line": 740,
                    "column": 9
                }
            },
            "122": {
                "start": {
                    "line": 732,
                    "column": 12
                },
                "end": {
                    "line": 732,
                    "column": 67
                }
            },
            "123": {
                "start": {
                    "line": 734,
                    "column": 12
                },
                "end": {
                    "line": 739,
                    "column": 13
                }
            },
            "124": {
                "start": {
                    "line": 735,
                    "column": 16
                },
                "end": {
                    "line": 735,
                    "column": 43
                }
            },
            "125": {
                "start": {
                    "line": 737,
                    "column": 16
                },
                "end": {
                    "line": 737,
                    "column": 76
                }
            },
            "126": {
                "start": {
                    "line": 738,
                    "column": 16
                },
                "end": {
                    "line": 738,
                    "column": 23
                }
            },
            "127": {
                "start": {
                    "line": 742,
                    "column": 8
                },
                "end": {
                    "line": 745,
                    "column": 9
                }
            },
            "128": {
                "start": {
                    "line": 743,
                    "column": 12
                },
                "end": {
                    "line": 743,
                    "column": 40
                }
            },
            "129": {
                "start": {
                    "line": 744,
                    "column": 12
                },
                "end": {
                    "line": 744,
                    "column": 19
                }
            },
            "130": {
                "start": {
                    "line": 748,
                    "column": 8
                },
                "end": {
                    "line": 756,
                    "column": 10
                }
            },
            "131": {
                "start": {
                    "line": 749,
                    "column": 12
                },
                "end": {
                    "line": 749,
                    "column": 59
                }
            },
            "132": {
                "start": {
                    "line": 751,
                    "column": 12
                },
                "end": {
                    "line": 751,
                    "column": 45
                }
            },
            "133": {
                "start": {
                    "line": 753,
                    "column": 12
                },
                "end": {
                    "line": 755,
                    "column": 13
                }
            },
            "134": {
                "start": {
                    "line": 754,
                    "column": 16
                },
                "end": {
                    "line": 754,
                    "column": 53
                }
            },
            "135": {
                "start": {
                    "line": 758,
                    "column": 8
                },
                "end": {
                    "line": 758,
                    "column": 43
                }
            },
            "136": {
                "start": {
                    "line": 760,
                    "column": 8
                },
                "end": {
                    "line": 762,
                    "column": 9
                }
            },
            "137": {
                "start": {
                    "line": 761,
                    "column": 12
                },
                "end": {
                    "line": 761,
                    "column": 78
                }
            },
            "138": {
                "start": {
                    "line": 764,
                    "column": 8
                },
                "end": {
                    "line": 764,
                    "column": 55
                }
            },
            "139": {
                "start": {
                    "line": 765,
                    "column": 8
                },
                "end": {
                    "line": 765,
                    "column": 40
                }
            },
            "140": {
                "start": {
                    "line": 782,
                    "column": 8
                },
                "end": {
                    "line": 795,
                    "column": 9
                }
            },
            "141": {
                "start": {
                    "line": 783,
                    "column": 12
                },
                "end": {
                    "line": 786,
                    "column": 13
                }
            },
            "142": {
                "start": {
                    "line": 784,
                    "column": 16
                },
                "end": {
                    "line": 784,
                    "column": 37
                }
            },
            "143": {
                "start": {
                    "line": 785,
                    "column": 16
                },
                "end": {
                    "line": 785,
                    "column": 53
                }
            },
            "144": {
                "start": {
                    "line": 788,
                    "column": 12
                },
                "end": {
                    "line": 792,
                    "column": 13
                }
            },
            "145": {
                "start": {
                    "line": 789,
                    "column": 16
                },
                "end": {
                    "line": 791,
                    "column": 19
                }
            },
            "146": {
                "start": {
                    "line": 794,
                    "column": 12
                },
                "end": {
                    "line": 794,
                    "column": 36
                }
            },
            "147": {
                "start": {
                    "line": 797,
                    "column": 8
                },
                "end": {
                    "line": 797,
                    "column": 20
                }
            },
            "148": {
                "start": {
                    "line": 816,
                    "column": 8
                },
                "end": {
                    "line": 816,
                    "column": 38
                }
            },
            "149": {
                "start": {
                    "line": 827,
                    "column": 8
                },
                "end": {
                    "line": 828,
                    "column": 18
                }
            },
            "150": {
                "start": {
                    "line": 830,
                    "column": 8
                },
                "end": {
                    "line": 845,
                    "column": 9
                }
            },
            "151": {
                "start": {
                    "line": 831,
                    "column": 12
                },
                "end": {
                    "line": 831,
                    "column": 41
                }
            },
            "152": {
                "start": {
                    "line": 833,
                    "column": 12
                },
                "end": {
                    "line": 844,
                    "column": 13
                }
            },
            "153": {
                "start": {
                    "line": 834,
                    "column": 16
                },
                "end": {
                    "line": 834,
                    "column": 47
                }
            },
            "154": {
                "start": {
                    "line": 836,
                    "column": 16
                },
                "end": {
                    "line": 841,
                    "column": 17
                }
            },
            "155": {
                "start": {
                    "line": 837,
                    "column": 20
                },
                "end": {
                    "line": 837,
                    "column": 35
                }
            },
            "156": {
                "start": {
                    "line": 839,
                    "column": 20
                },
                "end": {
                    "line": 839,
                    "column": 46
                }
            },
            "157": {
                "start": {
                    "line": 840,
                    "column": 20
                },
                "end": {
                    "line": 840,
                    "column": 48
                }
            },
            "158": {
                "start": {
                    "line": 843,
                    "column": 16
                },
                "end": {
                    "line": 843,
                    "column": 35
                }
            },
            "159": {
                "start": {
                    "line": 850,
                    "column": 8
                },
                "end": {
                    "line": 853,
                    "column": 21
                }
            },
            "160": {
                "start": {
                    "line": 856,
                    "column": 8
                },
                "end": {
                    "line": 877,
                    "column": 9
                }
            },
            "161": {
                "start": {
                    "line": 859,
                    "column": 12
                },
                "end": {
                    "line": 871,
                    "column": 13
                }
            },
            "162": {
                "start": {
                    "line": 860,
                    "column": 16
                },
                "end": {
                    "line": 860,
                    "column": 48
                }
            },
            "163": {
                "start": {
                    "line": 862,
                    "column": 16
                },
                "end": {
                    "line": 870,
                    "column": 17
                }
            },
            "164": {
                "start": {
                    "line": 865,
                    "column": 20
                },
                "end": {
                    "line": 865,
                    "column": 27
                }
            },
            "165": {
                "start": {
                    "line": 866,
                    "column": 23
                },
                "end": {
                    "line": 870,
                    "column": 17
                }
            },
            "166": {
                "start": {
                    "line": 869,
                    "column": 20
                },
                "end": {
                    "line": 869,
                    "column": 31
                }
            },
            "167": {
                "start": {
                    "line": 873,
                    "column": 12
                },
                "end": {
                    "line": 876,
                    "column": 15
                }
            },
            "168": {
                "start": {
                    "line": 880,
                    "column": 8
                },
                "end": {
                    "line": 880,
                    "column": 29
                }
            },
            "169": {
                "start": {
                    "line": 881,
                    "column": 8
                },
                "end": {
                    "line": 881,
                    "column": 47
                }
            },
            "170": {
                "start": {
                    "line": 883,
                    "column": 8
                },
                "end": {
                    "line": 883,
                    "column": 38
                }
            },
            "171": {
                "start": {
                    "line": 884,
                    "column": 8
                },
                "end": {
                    "line": 884,
                    "column": 38
                }
            },
            "172": {
                "start": {
                    "line": 888,
                    "column": 8
                },
                "end": {
                    "line": 888,
                    "column": 37
                }
            },
            "173": {
                "start": {
                    "line": 890,
                    "column": 8
                },
                "end": {
                    "line": 892,
                    "column": 9
                }
            },
            "174": {
                "start": {
                    "line": 891,
                    "column": 12
                },
                "end": {
                    "line": 891,
                    "column": 60
                }
            },
            "175": {
                "start": {
                    "line": 894,
                    "column": 8
                },
                "end": {
                    "line": 894,
                    "column": 27
                }
            },
            "176": {
                "start": {
                    "line": 895,
                    "column": 8
                },
                "end": {
                    "line": 895,
                    "column": 52
                }
            },
            "177": {
                "start": {
                    "line": 897,
                    "column": 8
                },
                "end": {
                    "line": 897,
                    "column": 36
                }
            },
            "178": {
                "start": {
                    "line": 898,
                    "column": 8
                },
                "end": {
                    "line": 898,
                    "column": 45
                }
            },
            "179": {
                "start": {
                    "line": 902,
                    "column": 8
                },
                "end": {
                    "line": 902,
                    "column": 26
                }
            },
            "180": {
                "start": {
                    "line": 904,
                    "column": 8
                },
                "end": {
                    "line": 912,
                    "column": 9
                }
            },
            "181": {
                "start": {
                    "line": 905,
                    "column": 12
                },
                "end": {
                    "line": 905,
                    "column": 51
                }
            },
            "182": {
                "start": {
                    "line": 906,
                    "column": 15
                },
                "end": {
                    "line": 912,
                    "column": 9
                }
            },
            "183": {
                "start": {
                    "line": 907,
                    "column": 12
                },
                "end": {
                    "line": 907,
                    "column": 45
                }
            },
            "184": {
                "start": {
                    "line": 908,
                    "column": 15
                },
                "end": {
                    "line": 912,
                    "column": 9
                }
            },
            "185": {
                "start": {
                    "line": 910,
                    "column": 12
                },
                "end": {
                    "line": 910,
                    "column": 66
                }
            },
            "186": {
                "start": {
                    "line": 911,
                    "column": 12
                },
                "end": {
                    "line": 911,
                    "column": 51
                }
            },
            "187": {
                "start": {
                    "line": 925,
                    "column": 0
                },
                "end": {
                    "line": 925,
                    "column": 29
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 163,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 163,
                            "column": 8
                        },
                        "end": {
                            "line": 163,
                            "column": 14
                        }
                    },
                    {
                        "start": {
                            "line": 163,
                            "column": 19
                        },
                        "end": {
                            "line": 163,
                            "column": 30
                        }
                    }
                ]
            },
            "2": {
                "line": 165,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 165,
                            "column": 8
                        },
                        "end": {
                            "line": 165,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 165,
                            "column": 8
                        },
                        "end": {
                            "line": 165,
                            "column": 8
                        }
                    }
                ]
            },
            "3": {
                "line": 169,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 169,
                            "column": 8
                        },
                        "end": {
                            "line": 169,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 169,
                            "column": 8
                        },
                        "end": {
                            "line": 169,
                            "column": 8
                        }
                    }
                ]
            },
            "4": {
                "line": 180,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 180,
                            "column": 8
                        },
                        "end": {
                            "line": 180,
                            "column": 23
                        }
                    },
                    {
                        "start": {
                            "line": 180,
                            "column": 28
                        },
                        "end": {
                            "line": 180,
                            "column": 48
                        }
                    }
                ]
            },
            "5": {
                "line": 189,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 189,
                            "column": 12
                        },
                        "end": {
                            "line": 189,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 189,
                            "column": 12
                        },
                        "end": {
                            "line": 189,
                            "column": 12
                        }
                    }
                ]
            },
            "6": {
                "line": 252,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 252,
                            "column": 38
                        },
                        "end": {
                            "line": 252,
                            "column": 46
                        }
                    },
                    {
                        "start": {
                            "line": 252,
                            "column": 50
                        },
                        "end": {
                            "line": 252,
                            "column": 70
                        }
                    }
                ]
            },
            "7": {
                "line": 253,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 253,
                            "column": 22
                        },
                        "end": {
                            "line": 253,
                            "column": 29
                        }
                    },
                    {
                        "start": {
                            "line": 253,
                            "column": 33
                        },
                        "end": {
                            "line": 253,
                            "column": 44
                        }
                    }
                ]
            },
            "8": {
                "line": 256,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 256,
                            "column": 23
                        },
                        "end": {
                            "line": 256,
                            "column": 30
                        }
                    },
                    {
                        "start": {
                            "line": 256,
                            "column": 34
                        },
                        "end": {
                            "line": 256,
                            "column": 48
                        }
                    }
                ]
            },
            "9": {
                "line": 273,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 273,
                            "column": 8
                        },
                        "end": {
                            "line": 273,
                            "column": 14
                        }
                    },
                    {
                        "start": {
                            "line": 273,
                            "column": 19
                        },
                        "end": {
                            "line": 273,
                            "column": 30
                        }
                    }
                ]
            },
            "10": {
                "line": 277,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 277,
                            "column": 8
                        },
                        "end": {
                            "line": 277,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 277,
                            "column": 8
                        },
                        "end": {
                            "line": 277,
                            "column": 8
                        }
                    }
                ]
            },
            "11": {
                "line": 278,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 278,
                            "column": 12
                        },
                        "end": {
                            "line": 278,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 278,
                            "column": 12
                        },
                        "end": {
                            "line": 278,
                            "column": 12
                        }
                    }
                ]
            },
            "12": {
                "line": 288,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 288,
                            "column": 8
                        },
                        "end": {
                            "line": 288,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 288,
                            "column": 8
                        },
                        "end": {
                            "line": 288,
                            "column": 8
                        }
                    }
                ]
            },
            "13": {
                "line": 322,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 322,
                            "column": 8
                        },
                        "end": {
                            "line": 322,
                            "column": 15
                        }
                    },
                    {
                        "start": {
                            "line": 322,
                            "column": 20
                        },
                        "end": {
                            "line": 322,
                            "column": 32
                        }
                    }
                ]
            },
            "14": {
                "line": 336,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 336,
                            "column": 8
                        },
                        "end": {
                            "line": 336,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 336,
                            "column": 8
                        },
                        "end": {
                            "line": 336,
                            "column": 8
                        }
                    }
                ]
            },
            "15": {
                "line": 410,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 410,
                            "column": 8
                        },
                        "end": {
                            "line": 410,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 410,
                            "column": 8
                        },
                        "end": {
                            "line": 410,
                            "column": 8
                        }
                    }
                ]
            },
            "16": {
                "line": 417,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 417,
                            "column": 12
                        },
                        "end": {
                            "line": 417,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 417,
                            "column": 12
                        },
                        "end": {
                            "line": 417,
                            "column": 12
                        }
                    }
                ]
            },
            "17": {
                "line": 466,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 466,
                            "column": 8
                        },
                        "end": {
                            "line": 466,
                            "column": 15
                        }
                    },
                    {
                        "start": {
                            "line": 466,
                            "column": 20
                        },
                        "end": {
                            "line": 466,
                            "column": 32
                        }
                    }
                ]
            },
            "18": {
                "line": 467,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 467,
                            "column": 8
                        },
                        "end": {
                            "line": 467,
                            "column": 14
                        }
                    },
                    {
                        "start": {
                            "line": 467,
                            "column": 20
                        },
                        "end": {
                            "line": 467,
                            "column": 42
                        }
                    }
                ]
            },
            "19": {
                "line": 481,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 481,
                            "column": 8
                        },
                        "end": {
                            "line": 481,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 481,
                            "column": 8
                        },
                        "end": {
                            "line": 481,
                            "column": 8
                        }
                    }
                ]
            },
            "20": {
                "line": 481,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 481,
                            "column": 12
                        },
                        "end": {
                            "line": 481,
                            "column": 28
                        }
                    },
                    {
                        "start": {
                            "line": 481,
                            "column": 32
                        },
                        "end": {
                            "line": 481,
                            "column": 50
                        }
                    }
                ]
            },
            "21": {
                "line": 489,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 489,
                            "column": 16
                        },
                        "end": {
                            "line": 489,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 489,
                            "column": 16
                        },
                        "end": {
                            "line": 489,
                            "column": 16
                        }
                    }
                ]
            },
            "22": {
                "line": 492,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 492,
                            "column": 20
                        },
                        "end": {
                            "line": 492,
                            "column": 20
                        }
                    },
                    {
                        "start": {
                            "line": 492,
                            "column": 20
                        },
                        "end": {
                            "line": 492,
                            "column": 20
                        }
                    }
                ]
            },
            "23": {
                "line": 503,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 503,
                            "column": 8
                        },
                        "end": {
                            "line": 503,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 503,
                            "column": 8
                        },
                        "end": {
                            "line": 503,
                            "column": 8
                        }
                    }
                ]
            },
            "24": {
                "line": 506,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 506,
                            "column": 12
                        },
                        "end": {
                            "line": 506,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 506,
                            "column": 12
                        },
                        "end": {
                            "line": 506,
                            "column": 12
                        }
                    }
                ]
            },
            "25": {
                "line": 514,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 514,
                            "column": 24
                        },
                        "end": {
                            "line": 514,
                            "column": 35
                        }
                    },
                    {
                        "start": {
                            "line": 514,
                            "column": 39
                        },
                        "end": {
                            "line": 514,
                            "column": 47
                        }
                    }
                ]
            },
            "26": {
                "line": 569,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 569,
                            "column": 8
                        },
                        "end": {
                            "line": 569,
                            "column": 15
                        }
                    },
                    {
                        "start": {
                            "line": 569,
                            "column": 20
                        },
                        "end": {
                            "line": 569,
                            "column": 32
                        }
                    }
                ]
            },
            "27": {
                "line": 575,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 575,
                            "column": 21
                        },
                        "end": {
                            "line": 575,
                            "column": 32
                        }
                    },
                    {
                        "start": {
                            "line": 575,
                            "column": 36
                        },
                        "end": {
                            "line": 575,
                            "column": 44
                        }
                    }
                ]
            },
            "28": {
                "line": 641,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 641,
                            "column": 8
                        },
                        "end": {
                            "line": 641,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 641,
                            "column": 8
                        },
                        "end": {
                            "line": 641,
                            "column": 8
                        }
                    }
                ]
            },
            "29": {
                "line": 647,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 647,
                            "column": 8
                        },
                        "end": {
                            "line": 647,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 647,
                            "column": 8
                        },
                        "end": {
                            "line": 647,
                            "column": 8
                        }
                    }
                ]
            },
            "30": {
                "line": 653,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 653,
                            "column": 8
                        },
                        "end": {
                            "line": 653,
                            "column": 15
                        }
                    },
                    {
                        "start": {
                            "line": 653,
                            "column": 20
                        },
                        "end": {
                            "line": 653,
                            "column": 32
                        }
                    }
                ]
            },
            "31": {
                "line": 658,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 658,
                            "column": 8
                        },
                        "end": {
                            "line": 658,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 658,
                            "column": 8
                        },
                        "end": {
                            "line": 658,
                            "column": 8
                        }
                    }
                ]
            },
            "32": {
                "line": 664,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 664,
                            "column": 8
                        },
                        "end": {
                            "line": 664,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 664,
                            "column": 8
                        },
                        "end": {
                            "line": 664,
                            "column": 8
                        }
                    }
                ]
            },
            "33": {
                "line": 664,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 664,
                            "column": 12
                        },
                        "end": {
                            "line": 664,
                            "column": 21
                        }
                    },
                    {
                        "start": {
                            "line": 664,
                            "column": 25
                        },
                        "end": {
                            "line": 664,
                            "column": 42
                        }
                    }
                ]
            },
            "34": {
                "line": 665,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 665,
                            "column": 43
                        },
                        "end": {
                            "line": 665,
                            "column": 50
                        }
                    },
                    {
                        "start": {
                            "line": 665,
                            "column": 53
                        },
                        "end": {
                            "line": 665,
                            "column": 79
                        }
                    }
                ]
            },
            "35": {
                "line": 668,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 668,
                            "column": 16
                        },
                        "end": {
                            "line": 668,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 668,
                            "column": 16
                        },
                        "end": {
                            "line": 668,
                            "column": 16
                        }
                    }
                ]
            },
            "36": {
                "line": 689,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 689,
                            "column": 8
                        },
                        "end": {
                            "line": 689,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 689,
                            "column": 8
                        },
                        "end": {
                            "line": 689,
                            "column": 8
                        }
                    }
                ]
            },
            "37": {
                "line": 703,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 703,
                            "column": 8
                        },
                        "end": {
                            "line": 703,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 703,
                            "column": 8
                        },
                        "end": {
                            "line": 703,
                            "column": 8
                        }
                    }
                ]
            },
            "38": {
                "line": 703,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 703,
                            "column": 12
                        },
                        "end": {
                            "line": 703,
                            "column": 46
                        }
                    },
                    {
                        "start": {
                            "line": 704,
                            "column": 19
                        },
                        "end": {
                            "line": 704,
                            "column": 57
                        }
                    }
                ]
            },
            "39": {
                "line": 730,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 730,
                            "column": 8
                        },
                        "end": {
                            "line": 730,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 730,
                            "column": 8
                        },
                        "end": {
                            "line": 730,
                            "column": 8
                        }
                    }
                ]
            },
            "40": {
                "line": 734,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 734,
                            "column": 12
                        },
                        "end": {
                            "line": 734,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 734,
                            "column": 12
                        },
                        "end": {
                            "line": 734,
                            "column": 12
                        }
                    }
                ]
            },
            "41": {
                "line": 742,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 742,
                            "column": 8
                        },
                        "end": {
                            "line": 742,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 742,
                            "column": 8
                        },
                        "end": {
                            "line": 742,
                            "column": 8
                        }
                    }
                ]
            },
            "42": {
                "line": 782,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 782,
                            "column": 8
                        },
                        "end": {
                            "line": 782,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 782,
                            "column": 8
                        },
                        "end": {
                            "line": 782,
                            "column": 8
                        }
                    }
                ]
            },
            "43": {
                "line": 782,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 782,
                            "column": 12
                        },
                        "end": {
                            "line": 782,
                            "column": 19
                        }
                    },
                    {
                        "start": {
                            "line": 782,
                            "column": 23
                        },
                        "end": {
                            "line": 782,
                            "column": 37
                        }
                    }
                ]
            },
            "44": {
                "line": 783,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 783,
                            "column": 12
                        },
                        "end": {
                            "line": 783,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 783,
                            "column": 12
                        },
                        "end": {
                            "line": 783,
                            "column": 12
                        }
                    }
                ]
            },
            "45": {
                "line": 788,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 788,
                            "column": 12
                        },
                        "end": {
                            "line": 788,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 788,
                            "column": 12
                        },
                        "end": {
                            "line": 788,
                            "column": 12
                        }
                    }
                ]
            },
            "46": {
                "line": 788,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 788,
                            "column": 16
                        },
                        "end": {
                            "line": 788,
                            "column": 23
                        }
                    },
                    {
                        "start": {
                            "line": 788,
                            "column": 27
                        },
                        "end": {
                            "line": 788,
                            "column": 44
                        }
                    },
                    {
                        "start": {
                            "line": 788,
                            "column": 48
                        },
                        "end": {
                            "line": 788,
                            "column": 70
                        }
                    }
                ]
            },
            "47": {
                "line": 830,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 830,
                            "column": 8
                        },
                        "end": {
                            "line": 830,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 830,
                            "column": 8
                        },
                        "end": {
                            "line": 830,
                            "column": 8
                        }
                    }
                ]
            },
            "48": {
                "line": 833,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 833,
                            "column": 12
                        },
                        "end": {
                            "line": 833,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 833,
                            "column": 12
                        },
                        "end": {
                            "line": 833,
                            "column": 12
                        }
                    }
                ]
            },
            "49": {
                "line": 836,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 836,
                            "column": 16
                        },
                        "end": {
                            "line": 836,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 836,
                            "column": 16
                        },
                        "end": {
                            "line": 836,
                            "column": 16
                        }
                    }
                ]
            },
            "50": {
                "line": 856,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 856,
                            "column": 8
                        },
                        "end": {
                            "line": 856,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 856,
                            "column": 8
                        },
                        "end": {
                            "line": 856,
                            "column": 8
                        }
                    }
                ]
            },
            "51": {
                "line": 859,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 859,
                            "column": 12
                        },
                        "end": {
                            "line": 859,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 859,
                            "column": 12
                        },
                        "end": {
                            "line": 859,
                            "column": 12
                        }
                    }
                ]
            },
            "52": {
                "line": 862,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 862,
                            "column": 16
                        },
                        "end": {
                            "line": 862,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 862,
                            "column": 16
                        },
                        "end": {
                            "line": 862,
                            "column": 16
                        }
                    }
                ]
            },
            "53": {
                "line": 866,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 866,
                            "column": 23
                        },
                        "end": {
                            "line": 866,
                            "column": 23
                        }
                    },
                    {
                        "start": {
                            "line": 866,
                            "column": 23
                        },
                        "end": {
                            "line": 866,
                            "column": 23
                        }
                    }
                ]
            },
            "54": {
                "line": 890,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 890,
                            "column": 8
                        },
                        "end": {
                            "line": 890,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 890,
                            "column": 8
                        },
                        "end": {
                            "line": 890,
                            "column": 8
                        }
                    }
                ]
            },
            "55": {
                "line": 904,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 904,
                            "column": 8
                        },
                        "end": {
                            "line": 904,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 904,
                            "column": 8
                        },
                        "end": {
                            "line": 904,
                            "column": 8
                        }
                    }
                ]
            },
            "56": {
                "line": 906,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 906,
                            "column": 15
                        },
                        "end": {
                            "line": 906,
                            "column": 15
                        }
                    },
                    {
                        "start": {
                            "line": 906,
                            "column": 15
                        },
                        "end": {
                            "line": 906,
                            "column": 15
                        }
                    }
                ]
            },
            "57": {
                "line": 908,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 908,
                            "column": 15
                        },
                        "end": {
                            "line": 908,
                            "column": 15
                        }
                    },
                    {
                        "start": {
                            "line": 908,
                            "column": 15
                        },
                        "end": {
                            "line": 908,
                            "column": 15
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('tree', function (Y, NAME) {",
            "",
            "/*jshint boss:true, expr:true, onevar:false */",
            "",
            "/**",
            "Provides a generic tree data structure and related functionality.",
            "",
            "A tree has a root node, which may contain any number of child nodes, which may",
            "themselves contain child nodes, ad infinitum.",
            "",
            "Child nodes are lightweight function instances which delegate to the tree for",
            "all significant functionality, so trees remain performant and memory-efficient",
            "even with thousands and thousands of nodes.",
            "",
            "@module tree",
            "@main tree",
            "**/",
            "",
            "/**",
            "The `Tree` class represents a generic tree data structure. A tree has a root",
            "node, which may contain any number of child nodes, which may themselves contain",
            "child nodes, ad infinitum.",
            "",
            "This class doesn't expose any UI, but is intended to be used as a data structure",
            "or base class for other components. For example, the SmugMug TreeView gallery",
            "module extends Tree and provides a TreeView UI.",
            "",
            "@class Tree",
            "@param {Object} [config] Config options.",
            "    @param {Object[]|Tree.Node[]} [config.nodes] Array of tree node config",
            "        objects or `Tree.Node` instances to add to this tree at initialization",
            "        time.",
            "    @param {Object|Tree.Node} [config.rootNode] Node to use as the root node of",
            "        this tree.",
            "@constructor",
            "@extends Base",
            "**/",
            "",
            "var Lang = Y.Lang,",
            "",
            "    /**",
            "    Fired when a node is added to this Tree. The `src` property will indicate",
            "    how the node was added (\"append\", \"insert\", \"prepend\", etc.).",
            "",
            "    @event add",
            "    @param {Number} index Index at which the node will be added.",
            "    @param {Tree.Node} node Node being added.",
            "    @param {Tree.Node} parent Parent node to which the node will be added.",
            "    @param {String} src Source of the event (\"append\", \"insert\", \"prepend\",",
            "        etc.).",
            "    @preventable _defAddFn",
            "    **/",
            "    EVT_ADD = 'add',",
            "",
            "    /**",
            "    Fired when this Tree is cleared.",
            "",
            "    @event clear",
            "    @param {Tree.Node} rootNode New root node of this tree (the old root node is",
            "        always destroyed when a tree is cleared).",
            "    @param {String} src Source of the event.",
            "    @preventable _defClearFn",
            "    **/",
            "    EVT_CLEAR = 'clear',",
            "",
            "    /**",
            "    Fired when a node is removed from this Tree.",
            "",
            "    @event remove",
            "    @param {Boolean} destroy Whether or not the node will be destroyed after",
            "        being removed from this tree.",
            "    @param {Tree.Node} node Node being removed.",
            "    @param {Tree.Node} parent Parent node from which the node will be removed.",
            "    @param {String} src Source of the event.",
            "    @preventable _defRemoveFn",
            "    **/",
            "    EVT_REMOVE = 'remove';",
            "",
            "var Tree = Y.Base.create('tree', Y.Base, [], {",
            "    // -- Public Properties ----------------------------------------------------",
            "",
            "    /**",
            "    Reference to the `children` array of this Tree's `rootNode`.",
            "",
            "    This is a convenience property to allow you to type `tree.children` instead",
            "    of `tree.rootNode.children`.",
            "",
            "    @property {Tree.Node[]} children",
            "    @readOnly",
            "    **/",
            "",
            "    /**",
            "    The `Tree.Node` class or subclass that should be used for nodes created by",
            "    this tree.",
            "",
            "    You may specify an actual class reference or a string that resolves to a",
            "    class reference at runtime.",
            "",
            "    @property {String|Tree.Node} nodeClass",
            "    @default Y.Tree.Node",
            "    **/",
            "    nodeClass: Y.Tree.Node,",
            "",
            "    /**",
            "    Optional array containing one or more extension classes that should be mixed",
            "    into the `nodeClass` when this Tree is instantiated. The resulting composed",
            "    node class will be unique to this Tree instance and will not affect any",
            "    other instances, nor will it modify the defined `nodeClass` itself.",
            "",
            "    This provides a late-binding extension mechanism for nodes that doesn't",
            "    require them to extend `Y.Base`, which would incur a significant performance",
            "    hit.",
            "",
            "    @property {Array} nodeExtensions",
            "    @default []",
            "    **/",
            "    nodeExtensions: [],",
            "",
            "    /**",
            "    Root node of this Tree.",
            "",
            "    @property {Tree.Node} rootNode",
            "    @readOnly",
            "    **/",
            "",
            "    // -- Protected Properties -------------------------------------------------",
            "",
            "    /**",
            "    Simple way to type-check that this is a Tree instance.",
            "",
            "    @property {Boolean} _isYUITree",
            "    @default true",
            "    @protected",
            "    **/",
            "    _isYUITree: true,",
            "",
            "    /**",
            "    Composed node class based on `nodeClass` that mixes in any extensions",
            "    specified in `nodeExtensions`. If there are no extensions, this will just be",
            "    a reference to `nodeClass`.",
            "",
            "    @property {Tree.Node} _nodeClass",
            "    @protected",
            "    **/",
            "",
            "    /**",
            "    Mapping of node ids to node instances for nodes in this tree.",
            "",
            "    @property {Object} _nodeMap",
            "    @protected",
            "    **/",
            "",
            "    /**",
            "    Default config object for the root node.",
            "",
            "    @property {Object} _rootNodeConfig",
            "    @protected",
            "    **/",
            "    _rootNodeConfig: {canHaveChildren: true},",
            "",
            "    // -- Lifecycle ------------------------------------------------------------",
            "    initializer: function (config) {",
            "        config || (config = {});",
            "",
            "        if (config.nodeClass) {",
            "            this.nodeClass = config.nodeClass;",
            "        }",
            "",
            "        if (config.nodeExtensions) {",
            "            this.nodeExtensions = this.nodeExtensions.concat(config.nodeExtensions);",
            "        }",
            "",
            "        /**",
            "        Hash of published custom events.",
            "",
            "        @property {Object} _published",
            "        @default {}",
            "        @protected",
            "        **/",
            "        this._published || (this._published = {});",
            "        this._nodeMap = {};",
            "",
            "        // Allow all extensions to initialize, then finish up.",
            "        this.onceAfter('initializedChange', function () {",
            "            this._composeNodeClass();",
            "",
            "            this.clear(config.rootNode, {silent: true});",
            "",
            "            if (config.nodes) {",
            "                this.insertNode(this.rootNode, config.nodes, {silent: true});",
            "            }",
            "        });",
            "    },",
            "",
            "    destructor: function () {",
            "        this.destroyNode(this.rootNode, {silent: true});",
            "",
            "        this.children   = null;",
            "        this.rootNode   = null;",
            "        this._nodeClass = null;",
            "        this._nodeMap   = null;",
            "        this._published = null;",
            "    },",
            "",
            "    // -- Public Methods -------------------------------------------------------",
            "",
            "    /**",
            "    Appends a node or array of nodes as the last child of the specified parent",
            "    node.",
            "",
            "    If a node being appended is from another tree, it and all its children will",
            "    be removed from that tree and moved to this one.",
            "",
            "    @method appendNode",
            "    @param {Tree.Node} parent Parent node.",
            "    @param {Object|Object[]|Tree.Node|Tree.Node[]} node Child node, node config",
            "        object, array of child nodes, or array of node config objects to append",
            "        to the given parent. Node config objects will automatically be converted",
            "        into node instances.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `add` event will",
            "            be suppressed.",
            "    @return {Tree.Node|Tree.Node[]} Node or array of nodes that were",
            "        appended.",
            "    **/",
            "    appendNode: function (parent, node, options) {",
            "        return this.insertNode(parent, node, Y.merge(options, {",
            "            index: parent.children.length,",
            "            src  : 'append'",
            "        }));",
            "    },",
            "",
            "    /**",
            "    Clears this tree by destroying the root node and all its children. If a",
            "    `rootNode` argument is provided, that node will become the root node of this",
            "    tree; otherwise, a new root node will be created.",
            "",
            "    @method clear",
            "    @param {Object|Tree.Node} [rootNode] If specified, this node will be used as",
            "        the new root node.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `clear` event",
            "            will be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    clear: function (rootNode, options) {",
            "        return this._fireTreeEvent(EVT_CLEAR, {",
            "            rootNode: this.createNode(rootNode || this._rootNodeConfig),",
            "            src     : options && options.src",
            "        }, {",
            "            defaultFn: this._defClearFn,",
            "            silent   : options && options.silent",
            "        });",
            "    },",
            "",
            "    /**",
            "    Creates and returns a new `Tree.Node` instance associated with (but not",
            "    yet appended to) this tree.",
            "",
            "    @method createNode",
            "    @param {Object|Tree.Node} [config] Node configuration. If a `Tree.Node`",
            "        instance is specified instead of a config object, that node will be",
            "        adopted into this tree (if it doesn't already belong to this tree) and",
            "        removed from any other tree to which it belongs.",
            "    @return {Tree.Node|null} New node, or `null` if a node could not be created",
            "        from the given _config_.",
            "    **/",
            "    createNode: function (config) {",
            "        config || (config = {});",
            "",
            "        // If `config` is already a node, just ensure it hasn't been destroyed",
            "        // and is in the node map, then return it.",
            "        if (config._isYUITreeNode) {",
            "            if (config.state.destroyed) {",
            "                Y.error('Cannot insert a node that has already been destroyed.', null, 'tree');",
            "                return null;",
            "            }",
            "",
            "            this._adoptNode(config);",
            "            return config;",
            "        }",
            "",
            "        // First, create nodes for any children of this node.",
            "        if (config.children) {",
            "            var children = [];",
            "",
            "            for (var i = 0, len = config.children.length; i < len; i++) {",
            "                children.push(this.createNode(config.children[i]));",
            "            }",
            "",
            "            config = Y.merge(config, {children: children});",
            "        }",
            "",
            "        var node = new this._nodeClass(this, config);",
            "",
            "        return this._nodeMap[node.id] = node;",
            "    },",
            "",
            "    /**",
            "    Removes and destroys a node and all its child nodes. Once destroyed, a node",
            "    is eligible for garbage collection and cannot be reused or re-added to the",
            "    tree.",
            "",
            "    @method destroyNode",
            "    @param {Tree.Node} node Node to destroy.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, `remove` events will",
            "            be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting events. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    destroyNode: function (node, options) {",
            "        var child, i, len;",
            "",
            "        options || (options = {});",
            "",
            "        for (i = 0, len = node.children.length; i < len; i++) {",
            "            child = node.children[i];",
            "",
            "            // Manually remove the child from its parent; this makes destroying",
            "            // all children of the parent much faster since there's no splicing",
            "            // involved.",
            "            child.parent = null;",
            "",
            "            // Destroy the child.",
            "            this.destroyNode(child, options);",
            "        }",
            "",
            "        if (node.parent) {",
            "            this.removeNode(node, options);",
            "        }",
            "",
            "        node.children  = [];",
            "        node.data      = {};",
            "        node.state     = {destroyed: true};",
            "        node.tree      = null;",
            "        node._indexMap = {};",
            "",
            "        delete this._nodeMap[node.id];",
            "",
            "        return this;",
            "    },",
            "",
            "    /**",
            "    Removes all children from the specified node. The removed children will",
            "    still be reusable unless the `destroy` option is truthy.",
            "",
            "    @method emptyNode",
            "    @param {Tree.Node} node Node to empty.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.destroy=false] If `true`, the children will",
            "            also be destroyed, which makes them available for garbage collection",
            "            and means they can't be reused.",
            "        @param {Boolean} [options.silent=false] If `true`, `remove` events will",
            "            be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting events. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @return {Tree.Node[]} Array of removed child nodes.",
            "    **/",
            "    emptyNode: function (node, options) {",
            "        var children = node.children,",
            "            removed  = [];",
            "",
            "        for (var i = children.length - 1; i > -1; --i) {",
            "            removed[i] = this.removeNode(children[i], options);",
            "        }",
            "",
            "        return removed;",
            "    },",
            "",
            "    /**",
            "    Performs a depth-first traversal of _node_, passing it and each of its",
            "    descendants to the specified _callback_, and returning the first node for",
            "    which the callback returns a truthy value.",
            "",
            "    Traversal will stop as soon as a truthy value is returned from the callback.",
            "",
            "    See `traverseNode()` for more details on how depth-first traversal works.",
            "",
            "    @method findNode",
            "    @param {Tree.Node} node Node to traverse.",
            "    @param {Object} [options] Options.",
            "        @param {Number} [options.depth] Depth limit. If specified, descendants",
            "            will only be traversed to this depth before backtracking and moving",
            "            on.",
            "    @param {Function} callback Callback function to call with the traversed",
            "        node and each of its descendants. If this function returns a truthy",
            "        value, traversal will be stopped and the current node will be returned.",
            "",
            "        @param {Tree.Node} callback.node Node being traversed.",
            "",
            "    @param {Object} [thisObj] `this` object to use when executing _callback_.",
            "    @return {Tree.Node|null} Returns the first node for which the _callback_",
            "        returns a truthy value, or `null` if the callback never returns a truthy",
            "        value.",
            "    **/",
            "    findNode: function (node, options, callback, thisObj) {",
            "        var match = null;",
            "",
            "        // Allow callback as second argument.",
            "        if (typeof options === 'function') {",
            "            thisObj  = callback;",
            "            callback = options;",
            "            options  = {};",
            "        }",
            "",
            "        this.traverseNode(node, options, function (descendant) {",
            "            if (callback.call(thisObj, descendant)) {",
            "                match = descendant;",
            "                return Tree.STOP_TRAVERSAL;",
            "            }",
            "        });",
            "",
            "        return match;",
            "    },",
            "",
            "    /**",
            "    Returns the tree node with the specified id, or `undefined` if the node",
            "    doesn't exist in this tree.",
            "",
            "    @method getNodeById",
            "    @param {String} id Node id.",
            "    @return {Tree.Node} Node, or `undefined` if not found.",
            "    **/",
            "    getNodeById: function (id) {",
            "        return this._nodeMap[id];",
            "    },",
            "",
            "    /**",
            "    Inserts a node or array of nodes at the specified index under the given",
            "    parent node, or appends them to the parent if no index is specified.",
            "",
            "    If a node being inserted is from another tree, it and all its children will",
            "    be removed from that tree and moved to this one.",
            "",
            "    @method insertNode",
            "    @param {Tree.Node} parent Parent node.",
            "    @param {Object|Object[]|Tree.Node|Tree.Node[]} node Child node, node config",
            "        object, array of child nodes, or array of node config objects to insert",
            "        under the given parent. Node config objects will automatically be",
            "        converted into node instances.",
            "",
            "    @param {Object} [options] Options.",
            "        @param {Number} [options.index] Index at which to insert the child node.",
            "            If not specified, the node will be appended as the last child of the",
            "            parent.",
            "        @param {Boolean} [options.silent=false] If `true`, the `add` event will",
            "            be suppressed.",
            "        @param {String} [options.src='insert'] Source of the change, to be",
            "            passed along to the event facade of the resulting event. This can be",
            "            used to distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "",
            "    @return {Tree.Node|Tree.Node[]} Node or array of nodes that were inserted.",
            "    **/",
            "    insertNode: function (parent, node, options) {",
            "        options || (options = {});",
            "        parent  || (parent = this.rootNode);",
            "",
            "        // If `node` is an array, recurse to insert each node it contains.",
            "        //",
            "        // Note: If you're getting an exception here because `node` is null when",
            "        // you've passed in a reference to some other node's `children` array,",
            "        // that's happening because nodes must be removed from their current",
            "        // parent before being added to the new one, and the `children` array is",
            "        // being modified while the nodes are inserted.",
            "        //",
            "        // Solution: pass a copy of the other node's `children` array instead of",
            "        // the original. Doing the copy operation here would have a negative",
            "        // impact on performance, so you're on your own since this is such a",
            "        // rare edge case.",
            "        if ('length' in node && Lang.isArray(node)) {",
            "            var hasIndex      = 'index' in options,",
            "                insertedNodes = [],",
            "                insertedNode;",
            "",
            "            for (var i = 0, len = node.length; i < len; i++) {",
            "                insertedNode = this.insertNode(parent, node[i], options);",
            "",
            "                if (insertedNode) {",
            "                    insertedNodes.push(insertedNode);",
            "",
            "                    if (hasIndex) {",
            "                        options.index += 1;",
            "                    }",
            "                }",
            "            }",
            "",
            "            return insertedNodes;",
            "        }",
            "",
            "        node = this.createNode(node);",
            "",
            "        if (node) {",
            "            var index = options.index;",
            "",
            "            if (typeof index === 'undefined') {",
            "                index = this._getDefaultNodeIndex(parent, node, options);",
            "            }",
            "",
            "            this._fireTreeEvent(EVT_ADD, {",
            "                index : index,",
            "                node  : node,",
            "                parent: parent,",
            "                src   : options.src || 'insert'",
            "            }, {",
            "                defaultFn: this._defAddFn,",
            "                silent   : options.silent",
            "            });",
            "        }",
            "",
            "        return node;",
            "    },",
            "",
            "    /**",
            "    Prepends a node or array of nodes at the beginning of the specified parent",
            "    node.",
            "",
            "    If a node being prepended is from another tree, it and all its children will",
            "    be removed from that tree and moved to this one.",
            "",
            "    @method prependNode",
            "    @param {Tree.Node} parent Parent node.",
            "    @param {Object|Object[]|Tree.Node|Tree.Node[]} node Child node,",
            "        node config object, array of child nodes, or array of node config",
            "        objects to prepend to the given parent. Node config objects will",
            "        automatically be converted into node instances.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `add` event will",
            "            be suppressed.",
            "    @return {Tree.Node|Tree.Node[]} Node or array of nodes that were",
            "        prepended.",
            "    **/",
            "    prependNode: function (parent, node, options) {",
            "        return this.insertNode(parent, node, Y.merge(options, {",
            "            index: 0,",
            "            src  : 'prepend'",
            "        }));",
            "    },",
            "",
            "    /**",
            "    Removes the specified node from its parent node. The removed node will still",
            "    be reusable unless the `destroy` option is truthy.",
            "",
            "    @method removeNode",
            "    @param {Tree.Node} node Node to remove.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.destroy=false] If `true`, the node and all its",
            "            children will also be destroyed, which makes them available for",
            "            garbage collection and means they can't be reused.",
            "        @param {Boolean} [options.silent=false] If `true`, the `remove` event",
            "            will be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @return {Tree.Node} Node that was removed.",
            "    **/",
            "    removeNode: function (node, options) {",
            "        options || (options = {});",
            "",
            "        this._fireTreeEvent(EVT_REMOVE, {",
            "            destroy: !!options.destroy,",
            "            node   : node,",
            "            parent : node.parent,",
            "            src    : options.src || 'remove'",
            "        }, {",
            "            defaultFn: this._defRemoveFn,",
            "            silent   : options.silent",
            "        });",
            "",
            "        return node;",
            "    },",
            "",
            "    /**",
            "    Returns the total number of nodes in this tree, at all levels.",
            "",
            "    Use `rootNode.children.length` to get only the number of top-level nodes.",
            "",
            "    @method size",
            "    @return {Number} Total number of nodes in this tree.",
            "    **/",
            "    size: function () {",
            "        return this.rootNode.size() + 1;",
            "    },",
            "",
            "    /**",
            "    Serializes this tree to an object suitable for use in JSON.",
            "",
            "    @method toJSON",
            "    @return {Object} Serialized tree object.",
            "    **/",
            "    toJSON: function () {",
            "        return this.rootNode.toJSON();",
            "    },",
            "",
            "    /**",
            "    Performs a depth-first traversal of _node_, passing it and each of its",
            "    descendants to the specified _callback_.",
            "",
            "    If the callback function returns `Tree.STOP_TRAVERSAL`, traversal will be",
            "    stopped immediately. Otherwise, it will continue until the deepest",
            "    descendant of _node_ has been traversed, or until each branch has been",
            "    traversed to the optional maximum depth limit.",
            "",
            "    Since traversal is depth-first, that means nodes are traversed like this:",
            "",
            "                1",
            "              / | \\",
            "             2  8  9",
            "            / \\     \\",
            "           3   7    10",
            "         / | \\      / \\",
            "        4  5  6    11 12",
            "",
            "    @method traverseNode",
            "    @param {Tree.Node} node Node to traverse.",
            "    @param {Object} [options] Options.",
            "        @param {Number} [options.depth] Depth limit. If specified, descendants",
            "            will only be traversed to this depth before backtracking and moving",
            "            on.",
            "    @param {Function} callback Callback function to call with the traversed",
            "        node and each of its descendants.",
            "",
            "        @param {Tree.Node} callback.node Node being traversed.",
            "",
            "    @param {Object} [thisObj] `this` object to use when executing _callback_.",
            "    @return {Mixed} Returns `Tree.STOP_TRAVERSAL` if traversal was stopped;",
            "        otherwise returns `undefined`.",
            "    **/",
            "    traverseNode: function (node, options, callback, thisObj) {",
            "        if (node.state.destroyed) {",
            "            Y.error('Cannot traverse a node that has been destroyed.', null, 'tree');",
            "            return;",
            "        }",
            "",
            "        // Allow callback as second argument.",
            "        if (typeof options === 'function') {",
            "            thisObj  = callback;",
            "            callback = options;",
            "            options  = {};",
            "        }",
            "",
            "        options || (options = {});",
            "",
            "        var stop      = Tree.STOP_TRAVERSAL,",
            "            unlimited = typeof options.depth === 'undefined';",
            "",
            "        if (callback.call(thisObj, node) === stop) {",
            "            return stop;",
            "        }",
            "",
            "        var children = node.children;",
            "",
            "        if (unlimited || options.depth > 0) {",
            "            var childOptions = unlimited ? options : {depth: options.depth - 1};",
            "",
            "            for (var i = 0, len = children.length; i < len; i++) {",
            "                if (this.traverseNode(children[i], childOptions, callback, thisObj) === stop) {",
            "                    return stop;",
            "                }",
            "            }",
            "        }",
            "    },",
            "",
            "    // -- Protected Methods ----------------------------------------------------",
            "",
            "    /**",
            "    Moves the specified node and all its children from another tree to this",
            "    tree.",
            "",
            "    @method _adoptNode",
            "    @param {Tree.Node} node Node to adopt.",
            "    @param {Object} [options] Options to pass along to `removeNode()`.",
            "    @protected",
            "    **/",
            "    _adoptNode: function (node, options) {",
            "        var oldTree = node.tree;",
            "",
            "        if (oldTree === this) {",
            "            return;",
            "        }",
            "",
            "        for (var i = 0, len = node.children.length; i < len; i++) {",
            "            this._adoptNode(node.children[i], {silent: true});",
            "        }",
            "",
            "        oldTree.removeNode(node, options);",
            "        delete oldTree._nodeMap[node.id];",
            "",
            "        // If this node isn't an instance of this tree's composed _nodeClass,",
            "        // then we need to recreate it to avoid potentially breaking things in",
            "        // really weird ways.",
            "        if (!(node instanceof this._nodeClass)",
            "                || oldTree._nodeClass !== this._nodeClass) {",
            "",
            "            node = this.createNode(node.toJSON());",
            "        }",
            "",
            "        node.tree = this;",
            "        this._nodeMap[node.id] = node;",
            "    },",
            "",
            "    /**",
            "    Composes a custom late-bound tree node class (if necessary) based on the",
            "    classes specified in this Tree's `nodeClass` and `nodeExtensions`",
            "    properties.",
            "",
            "    The composed class is stored in this Tree's `_nodeClass` property. If",
            "    composition wasn't necessary, then `_nodeClass` will just be a reference to",
            "    `nodeClass`.",
            "",
            "    @method _composeNodeClass",
            "    @protected",
            "    **/",
            "    _composeNodeClass: function () {",
            "        var nodeClass      = this.nodeClass,",
            "            nodeExtensions = this.nodeExtensions,",
            "            composedClass;",
            "",
            "        if (typeof nodeClass === 'string') {",
            "            // Look for a namespaced node class on `Y`.",
            "            nodeClass = Y.Object.getValue(Y, nodeClass.split('.'));",
            "",
            "            if (nodeClass) {",
            "                this.nodeClass = nodeClass;",
            "            } else {",
            "                Y.error('Node class not found: ' + nodeClass, null, 'tree');",
            "                return;",
            "            }",
            "        }",
            "",
            "        if (!nodeExtensions.length) {",
            "            this._nodeClass = nodeClass;",
            "            return;",
            "        }",
            "",
            "        // Compose a new class by mixing extensions into nodeClass.",
            "        composedClass = function () {",
            "            var extensions = composedClass._nodeExtensions;",
            "",
            "            nodeClass.apply(this, arguments);",
            "",
            "            for (var i = 0, len = extensions.length; i < len; i++) {",
            "                extensions[i].apply(this, arguments);",
            "            }",
            "        };",
            "",
            "        Y.extend(composedClass, nodeClass);",
            "",
            "        for (var i = 0, len = nodeExtensions.length; i < len; i++) {",
            "            Y.mix(composedClass.prototype, nodeExtensions[i].prototype, true);",
            "        }",
            "",
            "        composedClass._nodeExtensions = nodeExtensions;",
            "        this._nodeClass = composedClass;",
            "    },",
            "",
            "    /**",
            "    Utility method for lazily publishing and firing events.",
            "",
            "    @method _fireTreeEvent",
            "    @param {String} name Event name to fire.",
            "    @param {Object} facade Event facade.",
            "    @param {Object} [options] Options.",
            "        @param {Function} [options.defaultFn] Default handler for this event.",
            "        @param {Boolean} [options.silent=false] Whether the default handler",
            "            should be executed directly without actually firing the event.",
            "    @chainable",
            "    @protected",
            "    **/",
            "    _fireTreeEvent: function (name, facade, options) {",
            "        if (options && options.silent) {",
            "            if (options.defaultFn) {",
            "                facade.silent = true; // intentionally modifying the facade",
            "                options.defaultFn.call(this, facade);",
            "            }",
            "        } else {",
            "            if (options && options.defaultFn && !this._published[name]) {",
            "                this._published[name] = this.publish(name, {",
            "                    defaultFn: options.defaultFn",
            "                });",
            "            }",
            "",
            "            this.fire(name, facade);",
            "        }",
            "",
            "        return this;",
            "    },",
            "",
            "    /**",
            "    Returns the default insertion index that should be used when _node_ is",
            "    inserted as a child of _parent_ without an explicit index.",
            "",
            "    The primary purpose of this method is to serve as a hook point for",
            "    extensions and plugins that need to customize insertion order.",
            "",
            "    @method _getDefaultNodeIndex",
            "    @param {Tree.Node} parent Parent node.",
            "    @param {Tree.Node} node Node being inserted.",
            "    @param {Object} [options] Options passed to `insertNode()`.",
            "    @return {Number} Index at which _node_ should be inserted into _parent_'s",
            "        `children` array.",
            "    @protected",
            "    **/",
            "    _getDefaultNodeIndex: function (parent/*, node, options*/) {",
            "        return parent.children.length;",
            "    },",
            "",
            "    /**",
            "    Removes the specified node from its parent node if it has one.",
            "",
            "    @method _removeNodeFromParent",
            "    @param {Tree.Node} node Node to remove.",
            "    @protected",
            "    **/",
            "    _removeNodeFromParent: function (node) {",
            "        var parent = node.parent,",
            "            index;",
            "",
            "        if (parent) {",
            "            index = parent.indexOf(node);",
            "",
            "            if (index > -1) {",
            "                var children = parent.children;",
            "",
            "                if (index === children.length - 1) {",
            "                    children.pop();",
            "                } else {",
            "                    children.splice(index, 1);",
            "                    parent._isIndexStale = true;",
            "                }",
            "",
            "                node.parent = null;",
            "            }",
            "        }",
            "    },",
            "",
            "    // -- Default Event Handlers -----------------------------------------------",
            "    _defAddFn: function (e) {",
            "        var index  = e.index,",
            "            node   = e.node,",
            "            parent = e.parent,",
            "            oldIndex;",
            "",
            "        // Remove the node from its existing parent if it has one.",
            "        if (node.parent) {",
            "            // If the node's existing parent is the same parent it's being",
            "            // inserted into, adjust the index to avoid an off-by-one error.",
            "            if (node.parent === parent) {",
            "                oldIndex = parent.indexOf(node);",
            "",
            "                if (oldIndex === index) {",
            "                    // Old index is the same as the new index, so just don't do",
            "                    // anything.",
            "                    return;",
            "                } else if (oldIndex < index) {",
            "                    // Removing the node from its old index will affect the new",
            "                    // index, so decrement the new index by one.",
            "                    index -= 1;",
            "                }",
            "            }",
            "",
            "            this.removeNode(node, {",
            "                silent: e.silent,",
            "                src   : 'add'",
            "            });",
            "        }",
            "",
            "        // Add the node to its new parent at the desired index.",
            "        node.parent = parent;",
            "        parent.children.splice(index, 0, node);",
            "",
            "        parent.canHaveChildren = true;",
            "        parent._isIndexStale   = true;",
            "    },",
            "",
            "    _defClearFn: function (e) {",
            "        var newRootNode = e.rootNode;",
            "",
            "        if (this.rootNode) {",
            "            this.destroyNode(this.rootNode, {silent: true});",
            "        }",
            "",
            "        this._nodeMap = {};",
            "        this._nodeMap[newRootNode.id] = newRootNode;",
            "",
            "        this.rootNode = newRootNode;",
            "        this.children = newRootNode.children;",
            "    },",
            "",
            "    _defRemoveFn: function (e) {",
            "        var node = e.node;",
            "",
            "        if (e.destroy) {",
            "            this.destroyNode(node, {silent: true});",
            "        } else if (e.parent) {",
            "            this._removeNodeFromParent(node);",
            "        } else if (this.rootNode === node) {",
            "            // Guess we'll need a new root node!",
            "            this.rootNode = this.createNode(this._rootNodeConfig);",
            "            this.children = this.rootNode.children;",
            "        }",
            "    }",
            "}, {",
            "    /**",
            "    Return this value from a `Tree#traverseNode()` or `Tree.Node#traverse()`",
            "    callback to immediately stop traversal.",
            "",
            "    @property STOP_TRAVERSAL",
            "    @static",
            "    **/",
            "    STOP_TRAVERSAL: {}",
            "});",
            "",
            "Y.Tree = Y.mix(Tree, Y.Tree);",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"base-build\", \"tree-node\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "39": 1,
            "79": 1,
            "163": 224,
            "165": 224,
            "166": 2,
            "169": 224,
            "170": 1,
            "180": 224,
            "181": 224,
            "184": 224,
            "185": 224,
            "187": 224,
            "189": 224,
            "190": 139,
            "196": 194,
            "198": 194,
            "199": 194,
            "200": 194,
            "201": 194,
            "202": 194,
            "227": 66,
            "251": 232,
            "273": 1274,
            "277": 1274,
            "278": 30,
            "279": 4,
            "280": 3,
            "283": 26,
            "284": 26,
            "288": 1244,
            "289": 147,
            "291": 147,
            "292": 424,
            "295": 147,
            "298": 1244,
            "300": 1244,
            "320": 1060,
            "322": 1060,
            "324": 1060,
            "325": 843,
            "330": 843,
            "333": 843,
            "336": 1060,
            "337": 10,
            "340": 1060,
            "341": 1060,
            "342": 1060,
            "343": 1060,
            "344": 1060,
            "346": 1060,
            "348": 1060,
            "370": 3,
            "373": 3,
            "374": 6,
            "377": 3,
            "407": 5,
            "410": 5,
            "411": 3,
            "412": 3,
            "413": 3,
            "416": 5,
            "417": 25,
            "418": 1,
            "419": 1,
            "423": 5,
            "435": 11,
            "466": 690,
            "467": 690,
            "481": 690,
            "482": 154,
            "486": 154,
            "487": 437,
            "489": 437,
            "490": 436,
            "492": 436,
            "493": 21,
            "498": 154,
            "501": 536,
            "503": 536,
            "504": 534,
            "506": 534,
            "507": 441,
            "510": 534,
            "521": 536,
            "544": 10,
            "569": 38,
            "571": 38,
            "581": 38,
            "593": 4,
            "603": 1,
            "641": 87,
            "642": 2,
            "643": 1,
            "647": 85,
            "648": 5,
            "649": 5,
            "650": 5,
            "653": 85,
            "655": 85,
            "658": 85,
            "659": 2,
            "662": 83,
            "664": 83,
            "665": 78,
            "667": 78,
            "668": 73,
            "669": 3,
            "687": 26,
            "689": 26,
            "690": 18,
            "693": 8,
            "694": 0,
            "697": 8,
            "698": 8,
            "703": 8,
            "706": 0,
            "709": 8,
            "710": 8,
            "726": 224,
            "730": 224,
            "732": 1,
            "734": 1,
            "735": 1,
            "737": 0,
            "738": 0,
            "742": 224,
            "743": 128,
            "744": 128,
            "748": 96,
            "749": 564,
            "751": 564,
            "753": 564,
            "754": 566,
            "758": 96,
            "760": 96,
            "761": 97,
            "764": 96,
            "765": 96,
            "782": 881,
            "783": 639,
            "784": 639,
            "785": 639,
            "788": 242,
            "789": 169,
            "794": 242,
            "797": 881,
            "816": 375,
            "827": 31,
            "830": 31,
            "831": 31,
            "833": 31,
            "834": 31,
            "836": 31,
            "837": 14,
            "839": 17,
            "840": 17,
            "843": 31,
            "850": 533,
            "856": 533,
            "859": 4,
            "860": 3,
            "862": 3,
            "865": 0,
            "866": 3,
            "869": 3,
            "873": 4,
            "880": 533,
            "881": 533,
            "883": 533,
            "884": 533,
            "888": 231,
            "890": 231,
            "891": 7,
            "894": 231,
            "895": 231,
            "897": 231,
            "898": 231,
            "902": 37,
            "904": 37,
            "905": 5,
            "906": 32,
            "907": 31,
            "908": 1,
            "910": 0,
            "911": 0,
            "925": 1
        }
    },
    "build/tree-openable/tree-openable.js": {
        "path": "build/tree-openable/tree-openable.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 36,
            "7": 21,
            "8": 9,
            "9": 21,
            "10": 33,
            "11": 27,
            "12": 33,
            "13": 8,
            "14": 8,
            "15": 26,
            "16": 1,
            "17": 1,
            "18": 1,
            "19": 4,
            "20": 4,
            "21": 68,
            "22": 11,
            "23": 11,
            "24": 2,
            "25": 2,
            "26": 1
        },
        "b": {
            "1": [
                9,
                12
            ],
            "2": [
                21,
                18
            ],
            "3": [
                9,
                3
            ],
            "4": [
                9,
                3
            ],
            "5": [
                27,
                6
            ],
            "6": [
                33,
                28
            ],
            "7": [
                27,
                4
            ],
            "8": [
                27,
                4
            ],
            "9": [
                2,
                6
            ],
            "10": [
                68,
                51
            ]
        },
        "f": {
            "1": 1,
            "2": 36,
            "3": 36,
            "4": 21,
            "5": 33,
            "6": 8,
            "7": 8,
            "8": 26,
            "9": 186,
            "10": 4,
            "11": 68,
            "12": 11,
            "13": 2
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 25
                    },
                    "end": {
                        "line": 1,
                        "column": 44
                    }
                }
            },
            "2": {
                "name": "Openable",
                "line": 41,
                "loc": {
                    "start": {
                        "line": 41,
                        "column": 0
                    },
                    "end": {
                        "line": 41,
                        "column": 20
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 45,
                "loc": {
                    "start": {
                        "line": 45,
                        "column": 17
                    },
                    "end": {
                        "line": 45,
                        "column": 29
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 65,
                "loc": {
                    "start": {
                        "line": 65,
                        "column": 15
                    },
                    "end": {
                        "line": 65,
                        "column": 40
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 93,
                "loc": {
                    "start": {
                        "line": 93,
                        "column": 14
                    },
                    "end": {
                        "line": 93,
                        "column": 39
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 122,
                "loc": {
                    "start": {
                        "line": 122,
                        "column": 20
                    },
                    "end": {
                        "line": 122,
                        "column": 45
                    }
                }
            },
            "7": {
                "name": "(anonymous_7)",
                "line": 136,
                "loc": {
                    "start": {
                        "line": 136,
                        "column": 17
                    },
                    "end": {
                        "line": 136,
                        "column": 30
                    }
                }
            },
            "8": {
                "name": "(anonymous_8)",
                "line": 147,
                "loc": {
                    "start": {
                        "line": 147,
                        "column": 16
                    },
                    "end": {
                        "line": 147,
                        "column": 29
                    }
                }
            },
            "9": {
                "name": "NodeOpenable",
                "line": 167,
                "loc": {
                    "start": {
                        "line": 167,
                        "column": 0
                    },
                    "end": {
                        "line": 167,
                        "column": 24
                    }
                }
            },
            "10": {
                "name": "(anonymous_10)",
                "line": 183,
                "loc": {
                    "start": {
                        "line": 183,
                        "column": 11
                    },
                    "end": {
                        "line": 183,
                        "column": 30
                    }
                }
            },
            "11": {
                "name": "(anonymous_11)",
                "line": 196,
                "loc": {
                    "start": {
                        "line": 196,
                        "column": 12
                    },
                    "end": {
                        "line": 196,
                        "column": 24
                    }
                }
            },
            "12": {
                "name": "(anonymous_12)",
                "line": 213,
                "loc": {
                    "start": {
                        "line": 213,
                        "column": 10
                    },
                    "end": {
                        "line": 213,
                        "column": 29
                    }
                }
            },
            "13": {
                "name": "(anonymous_13)",
                "line": 232,
                "loc": {
                    "start": {
                        "line": 232,
                        "column": 16
                    },
                    "end": {
                        "line": 232,
                        "column": 35
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 241,
                    "column": 40
                }
            },
            "2": {
                "start": {
                    "line": 29,
                    "column": 0
                },
                "end": {
                    "line": 29,
                    "column": 24
                }
            },
            "3": {
                "start": {
                    "line": 39,
                    "column": 0
                },
                "end": {
                    "line": 39,
                    "column": 22
                }
            },
            "4": {
                "start": {
                    "line": 41,
                    "column": 0
                },
                "end": {
                    "line": 41,
                    "column": 22
                }
            },
            "5": {
                "start": {
                    "line": 43,
                    "column": 0
                },
                "end": {
                    "line": 150,
                    "column": 2
                }
            },
            "6": {
                "start": {
                    "line": 46,
                    "column": 8
                },
                "end": {
                    "line": 46,
                    "column": 79
                }
            },
            "7": {
                "start": {
                    "line": 66,
                    "column": 8
                },
                "end": {
                    "line": 74,
                    "column": 9
                }
            },
            "8": {
                "start": {
                    "line": 67,
                    "column": 12
                },
                "end": {
                    "line": 73,
                    "column": 15
                }
            },
            "9": {
                "start": {
                    "line": 76,
                    "column": 8
                },
                "end": {
                    "line": 76,
                    "column": 20
                }
            },
            "10": {
                "start": {
                    "line": 94,
                    "column": 8
                },
                "end": {
                    "line": 102,
                    "column": 9
                }
            },
            "11": {
                "start": {
                    "line": 95,
                    "column": 12
                },
                "end": {
                    "line": 101,
                    "column": 15
                }
            },
            "12": {
                "start": {
                    "line": 104,
                    "column": 8
                },
                "end": {
                    "line": 104,
                    "column": 20
                }
            },
            "13": {
                "start": {
                    "line": 123,
                    "column": 8
                },
                "end": {
                    "line": 124,
                    "column": 41
                }
            },
            "14": {
                "start": {
                    "line": 137,
                    "column": 8
                },
                "end": {
                    "line": 137,
                    "column": 33
                }
            },
            "15": {
                "start": {
                    "line": 148,
                    "column": 8
                },
                "end": {
                    "line": 148,
                    "column": 33
                }
            },
            "16": {
                "start": {
                    "line": 152,
                    "column": 0
                },
                "end": {
                    "line": 152,
                    "column": 27
                }
            },
            "17": {
                "start": {
                    "line": 167,
                    "column": 0
                },
                "end": {
                    "line": 167,
                    "column": 26
                }
            },
            "18": {
                "start": {
                    "line": 169,
                    "column": 0
                },
                "end": {
                    "line": 236,
                    "column": 2
                }
            },
            "19": {
                "start": {
                    "line": 184,
                    "column": 8
                },
                "end": {
                    "line": 184,
                    "column": 43
                }
            },
            "20": {
                "start": {
                    "line": 185,
                    "column": 8
                },
                "end": {
                    "line": 185,
                    "column": 20
                }
            },
            "21": {
                "start": {
                    "line": 197,
                    "column": 8
                },
                "end": {
                    "line": 197,
                    "column": 50
                }
            },
            "22": {
                "start": {
                    "line": 214,
                    "column": 8
                },
                "end": {
                    "line": 214,
                    "column": 42
                }
            },
            "23": {
                "start": {
                    "line": 215,
                    "column": 8
                },
                "end": {
                    "line": 215,
                    "column": 20
                }
            },
            "24": {
                "start": {
                    "line": 233,
                    "column": 8
                },
                "end": {
                    "line": 233,
                    "column": 48
                }
            },
            "25": {
                "start": {
                    "line": 234,
                    "column": 8
                },
                "end": {
                    "line": 234,
                    "column": 20
                }
            },
            "26": {
                "start": {
                    "line": 238,
                    "column": 0
                },
                "end": {
                    "line": 238,
                    "column": 36
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 66,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 66,
                            "column": 8
                        },
                        "end": {
                            "line": 66,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 66,
                            "column": 8
                        },
                        "end": {
                            "line": 66,
                            "column": 8
                        }
                    }
                ]
            },
            "2": {
                "line": 66,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 66,
                            "column": 12
                        },
                        "end": {
                            "line": 66,
                            "column": 32
                        }
                    },
                    {
                        "start": {
                            "line": 66,
                            "column": 36
                        },
                        "end": {
                            "line": 66,
                            "column": 49
                        }
                    }
                ]
            },
            "3": {
                "line": 69,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 69,
                            "column": 22
                        },
                        "end": {
                            "line": 69,
                            "column": 29
                        }
                    },
                    {
                        "start": {
                            "line": 69,
                            "column": 33
                        },
                        "end": {
                            "line": 69,
                            "column": 44
                        }
                    }
                ]
            },
            "4": {
                "line": 72,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 72,
                            "column": 27
                        },
                        "end": {
                            "line": 72,
                            "column": 34
                        }
                    },
                    {
                        "start": {
                            "line": 72,
                            "column": 38
                        },
                        "end": {
                            "line": 72,
                            "column": 52
                        }
                    }
                ]
            },
            "5": {
                "line": 94,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 94,
                            "column": 8
                        },
                        "end": {
                            "line": 94,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 94,
                            "column": 8
                        },
                        "end": {
                            "line": 94,
                            "column": 8
                        }
                    }
                ]
            },
            "6": {
                "line": 94,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 94,
                            "column": 12
                        },
                        "end": {
                            "line": 94,
                            "column": 32
                        }
                    },
                    {
                        "start": {
                            "line": 94,
                            "column": 36
                        },
                        "end": {
                            "line": 94,
                            "column": 50
                        }
                    }
                ]
            },
            "7": {
                "line": 97,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 97,
                            "column": 22
                        },
                        "end": {
                            "line": 97,
                            "column": 29
                        }
                    },
                    {
                        "start": {
                            "line": 97,
                            "column": 33
                        },
                        "end": {
                            "line": 97,
                            "column": 44
                        }
                    }
                ]
            },
            "8": {
                "line": 100,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 100,
                            "column": 27
                        },
                        "end": {
                            "line": 100,
                            "column": 34
                        }
                    },
                    {
                        "start": {
                            "line": 100,
                            "column": 38
                        },
                        "end": {
                            "line": 100,
                            "column": 52
                        }
                    }
                ]
            },
            "9": {
                "line": 123,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 123,
                            "column": 31
                        },
                        "end": {
                            "line": 123,
                            "column": 60
                        }
                    },
                    {
                        "start": {
                            "line": 124,
                            "column": 12
                        },
                        "end": {
                            "line": 124,
                            "column": 40
                        }
                    }
                ]
            },
            "10": {
                "line": 197,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 197,
                            "column": 15
                        },
                        "end": {
                            "line": 197,
                            "column": 32
                        }
                    },
                    {
                        "start": {
                            "line": 197,
                            "column": 36
                        },
                        "end": {
                            "line": 197,
                            "column": 49
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('tree-openable', function (Y, NAME) {",
            "",
            "/*jshint expr:true, onevar:false */",
            "",
            "/**",
            "Extension for `Tree` that adds the concept of open/closed state for nodes.",
            "",
            "@module tree",
            "@submodule tree-openable",
            "@main tree-openable",
            "**/",
            "",
            "/**",
            "Extension for `Tree` that adds the concept of open/closed state for nodes.",
            "",
            "@class Tree.Openable",
            "@constructor",
            "@extensionfor Tree",
            "**/",
            "",
            "/**",
            "Fired when a node is closed.",
            "",
            "@event close",
            "@param {Tree.Node} node Node being closed.",
            "@param {String} src Source of the event.",
            "@preventable _defCloseFn",
            "**/",
            "var EVT_CLOSE = 'close';",
            "",
            "/**",
            "Fired when a node is opened.",
            "",
            "@event open",
            "@param {Tree.Node} node Node being opened.",
            "@param {String} src Source of the event.",
            "@preventable _defOpenFn",
            "**/",
            "var EVT_OPEN = 'open';",
            "",
            "function Openable() {}",
            "",
            "Openable.prototype = {",
            "    // -- Lifecycle ------------------------------------------------------------",
            "    initializer: function () {",
            "        this.nodeExtensions = this.nodeExtensions.concat(Y.Tree.Node.Openable);",
            "    },",
            "",
            "    // -- Public Methods -------------------------------------------------------",
            "",
            "    /**",
            "    Closes the specified node if it isn't already closed.",
            "",
            "    @method closeNode",
            "    @param {Tree.Node} node Node to close.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `close` event",
            "            will be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    closeNode: function (node, options) {",
            "        if (node.canHaveChildren && node.isOpen()) {",
            "            this._fireTreeEvent(EVT_CLOSE, {",
            "                node: node,",
            "                src : options && options.src",
            "            }, {",
            "                defaultFn: this._defCloseFn,",
            "                silent   : options && options.silent",
            "            });",
            "        }",
            "",
            "        return this;",
            "    },",
            "",
            "    /**",
            "    Opens the specified node if it isn't already open.",
            "",
            "    @method openNode",
            "    @param {Tree.Node} node Node to open.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `open` event",
            "            will be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    openNode: function (node, options) {",
            "        if (node.canHaveChildren && !node.isOpen()) {",
            "            this._fireTreeEvent(EVT_OPEN, {",
            "                node: node,",
            "                src : options && options.src",
            "            }, {",
            "                defaultFn: this._defOpenFn,",
            "                silent   : options && options.silent",
            "            });",
            "        }",
            "",
            "        return this;",
            "    },",
            "",
            "    /**",
            "    Toggles the open/closed state of the specified node, closing it if it's",
            "    currently open or opening it if it's currently closed.",
            "",
            "    @method toggleOpenNode",
            "    @param {Tree.Node} node Node to toggle.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, events will be",
            "            suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    toggleOpenNode: function (node, options) {",
            "        return node.isOpen() ? this.closeNode(node, options) :",
            "            this.openNode(node, options);",
            "    },",
            "",
            "    // -- Default Event Handlers -----------------------------------------------",
            "",
            "    /**",
            "    Default handler for the `close` event.",
            "",
            "    @method _defCloseFn",
            "    @param {EventFacade} e",
            "    @protected",
            "    **/",
            "    _defCloseFn: function (e) {",
            "        delete e.node.state.open;",
            "    },",
            "",
            "    /**",
            "    Default handler for the `open` event.",
            "",
            "    @method _defOpenFn",
            "    @param {EventFacade} e",
            "    @protected",
            "    **/",
            "    _defOpenFn: function (e) {",
            "        e.node.state.open = true;",
            "    }",
            "};",
            "",
            "Y.Tree.Openable = Openable;",
            "/**",
            "@module tree",
            "@submodule tree-openable",
            "**/",
            "",
            "/**",
            "`Tree.Node` extension that adds methods useful for nodes in trees that use the",
            "`Tree.Openable` extension.",
            "",
            "@class Tree.Node.Openable",
            "@constructor",
            "@extensionfor Tree.Node",
            "**/",
            "",
            "function NodeOpenable() {}",
            "",
            "NodeOpenable.prototype = {",
            "    /**",
            "    Closes this node if it's currently open.",
            "",
            "    @method close",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `close` event",
            "            will be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    close: function (options) {",
            "        this.tree.closeNode(this, options);",
            "        return this;",
            "    },",
            "",
            "    /**",
            "    Returns `true` if this node is currently open.",
            "",
            "    Note: the root node of a tree is always considered to be open.",
            "",
            "    @method isOpen",
            "    @return {Boolean} `true` if this node is currently open, `false` otherwise.",
            "    **/",
            "    isOpen: function () {",
            "        return !!this.state.open || this.isRoot();",
            "    },",
            "",
            "    /**",
            "    Opens this node if it's currently closed.",
            "",
            "    @method open",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `open` event",
            "            will be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    open: function (options) {",
            "        this.tree.openNode(this, options);",
            "        return this;",
            "    },",
            "",
            "    /**",
            "    Toggles the open/closed state of this node, closing it if it's currently",
            "    open or opening it if it's currently closed.",
            "",
            "    @method toggleOpen",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, events will be",
            "            suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    toggleOpen: function (options) {",
            "        this.tree.toggleOpenNode(this, options);",
            "        return this;",
            "    }",
            "};",
            "",
            "Y.Tree.Node.Openable = NodeOpenable;",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"tree\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "29": 1,
            "39": 1,
            "41": 1,
            "43": 1,
            "46": 36,
            "66": 21,
            "67": 9,
            "76": 21,
            "94": 33,
            "95": 27,
            "104": 33,
            "123": 8,
            "137": 8,
            "148": 26,
            "152": 1,
            "167": 1,
            "169": 1,
            "184": 4,
            "185": 4,
            "197": 68,
            "214": 11,
            "215": 11,
            "233": 2,
            "234": 2,
            "238": 1
        }
    },
    "build/tree-lazy/tree-lazy.js": {
        "path": "build/tree-lazy/tree-lazy.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 10,
            "7": 10,
            "8": 8,
            "9": 10,
            "10": 10,
            "11": 10,
            "12": 1,
            "13": 10,
            "14": 8,
            "15": 8,
            "16": 0,
            "17": 8,
            "18": 7,
            "19": 8,
            "20": 7,
            "21": 7,
            "22": 7,
            "23": 7,
            "24": 7,
            "25": 2,
            "26": 2,
            "27": 5,
            "28": 5
        },
        "b": {
            "1": [
                8,
                2
            ],
            "2": [
                3,
                7
            ],
            "3": [
                0,
                8
            ],
            "4": [
                8,
                8,
                8
            ],
            "5": [
                7,
                1
            ],
            "6": [
                2,
                5
            ]
        },
        "f": {
            "1": 1,
            "2": 10,
            "3": 1,
            "4": 10,
            "5": 8,
            "6": 7,
            "7": 7
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 21
                    },
                    "end": {
                        "line": 1,
                        "column": 40
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 101,
                "loc": {
                    "start": {
                        "line": 101,
                        "column": 17
                    },
                    "end": {
                        "line": 101,
                        "column": 35
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 118,
                "loc": {
                    "start": {
                        "line": 118,
                        "column": 10
                    },
                    "end": {
                        "line": 118,
                        "column": 36
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 123,
                "loc": {
                    "start": {
                        "line": 123,
                        "column": 19
                    },
                    "end": {
                        "line": 123,
                        "column": 31
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 128,
                "loc": {
                    "start": {
                        "line": 128,
                        "column": 13
                    },
                    "end": {
                        "line": 128,
                        "column": 26
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 147,
                "loc": {
                    "start": {
                        "line": 147,
                        "column": 19
                    },
                    "end": {
                        "line": 147,
                        "column": 32
                    }
                }
            },
            "7": {
                "name": "(anonymous_7)",
                "line": 153,
                "loc": {
                    "start": {
                        "line": 153,
                        "column": 24
                    },
                    "end": {
                        "line": 153,
                        "column": 39
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 175,
                    "column": 69
                }
            },
            "2": {
                "start": {
                    "line": 80,
                    "column": 0
                },
                "end": {
                    "line": 80,
                    "column": 35
                }
            },
            "3": {
                "start": {
                    "line": 89,
                    "column": 0
                },
                "end": {
                    "line": 89,
                    "column": 24
                }
            },
            "4": {
                "start": {
                    "line": 97,
                    "column": 0
                },
                "end": {
                    "line": 97,
                    "column": 22
                }
            },
            "5": {
                "start": {
                    "line": 99,
                    "column": 0
                },
                "end": {
                    "line": 172,
                    "column": 3
                }
            },
            "6": {
                "start": {
                    "line": 102,
                    "column": 8
                },
                "end": {
                    "line": 102,
                    "column": 33
                }
            },
            "7": {
                "start": {
                    "line": 104,
                    "column": 8
                },
                "end": {
                    "line": 106,
                    "column": 9
                }
            },
            "8": {
                "start": {
                    "line": 105,
                    "column": 12
                },
                "end": {
                    "line": 105,
                    "column": 36
                }
            },
            "9": {
                "start": {
                    "line": 110,
                    "column": 8
                },
                "end": {
                    "line": 111,
                    "column": 9
                }
            },
            "10": {
                "start": {
                    "line": 113,
                    "column": 8
                },
                "end": {
                    "line": 113,
                    "column": 29
                }
            },
            "11": {
                "start": {
                    "line": 114,
                    "column": 8
                },
                "end": {
                    "line": 114,
                    "column": 29
                }
            },
            "12": {
                "start": {
                    "line": 119,
                    "column": 8
                },
                "end": {
                    "line": 119,
                    "column": 119
                }
            },
            "13": {
                "start": {
                    "line": 124,
                    "column": 8
                },
                "end": {
                    "line": 124,
                    "column": 47
                }
            },
            "14": {
                "start": {
                    "line": 129,
                    "column": 8
                },
                "end": {
                    "line": 129,
                    "column": 26
                }
            },
            "15": {
                "start": {
                    "line": 133,
                    "column": 8
                },
                "end": {
                    "line": 135,
                    "column": 9
                }
            },
            "16": {
                "start": {
                    "line": 134,
                    "column": 12
                },
                "end": {
                    "line": 134,
                    "column": 19
                }
            },
            "17": {
                "start": {
                    "line": 137,
                    "column": 8
                },
                "end": {
                    "line": 141,
                    "column": 9
                }
            },
            "18": {
                "start": {
                    "line": 138,
                    "column": 12
                },
                "end": {
                    "line": 140,
                    "column": 15
                }
            },
            "19": {
                "start": {
                    "line": 143,
                    "column": 8
                },
                "end": {
                    "line": 143,
                    "column": 49
                }
            },
            "20": {
                "start": {
                    "line": 148,
                    "column": 8
                },
                "end": {
                    "line": 149,
                    "column": 24
                }
            },
            "21": {
                "start": {
                    "line": 151,
                    "column": 8
                },
                "end": {
                    "line": 151,
                    "column": 34
                }
            },
            "22": {
                "start": {
                    "line": 153,
                    "column": 8
                },
                "end": {
                    "line": 168,
                    "column": 11
                }
            },
            "23": {
                "start": {
                    "line": 154,
                    "column": 12
                },
                "end": {
                    "line": 154,
                    "column": 38
                }
            },
            "24": {
                "start": {
                    "line": 156,
                    "column": 12
                },
                "end": {
                    "line": 163,
                    "column": 13
                }
            },
            "25": {
                "start": {
                    "line": 157,
                    "column": 16
                },
                "end": {
                    "line": 160,
                    "column": 19
                }
            },
            "26": {
                "start": {
                    "line": 162,
                    "column": 16
                },
                "end": {
                    "line": 162,
                    "column": 23
                }
            },
            "27": {
                "start": {
                    "line": 165,
                    "column": 12
                },
                "end": {
                    "line": 165,
                    "column": 37
                }
            },
            "28": {
                "start": {
                    "line": 167,
                    "column": 12
                },
                "end": {
                    "line": 167,
                    "column": 46
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 104,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 104,
                            "column": 8
                        },
                        "end": {
                            "line": 104,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 104,
                            "column": 8
                        },
                        "end": {
                            "line": 104,
                            "column": 8
                        }
                    }
                ]
            },
            "2": {
                "line": 110,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 110,
                            "column": 8
                        },
                        "end": {
                            "line": 110,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 110,
                            "column": 8
                        },
                        "end": {
                            "line": 110,
                            "column": 8
                        }
                    }
                ]
            },
            "3": {
                "line": 133,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 133,
                            "column": 8
                        },
                        "end": {
                            "line": 133,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 133,
                            "column": 8
                        },
                        "end": {
                            "line": 133,
                            "column": 8
                        }
                    }
                ]
            },
            "4": {
                "line": 133,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 133,
                            "column": 12
                        },
                        "end": {
                            "line": 133,
                            "column": 33
                        }
                    },
                    {
                        "start": {
                            "line": 133,
                            "column": 37
                        },
                        "end": {
                            "line": 133,
                            "column": 54
                        }
                    },
                    {
                        "start": {
                            "line": 133,
                            "column": 58
                        },
                        "end": {
                            "line": 133,
                            "column": 76
                        }
                    }
                ]
            },
            "5": {
                "line": 137,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 137,
                            "column": 8
                        },
                        "end": {
                            "line": 137,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 137,
                            "column": 8
                        },
                        "end": {
                            "line": 137,
                            "column": 8
                        }
                    }
                ]
            },
            "6": {
                "line": 156,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 156,
                            "column": 12
                        },
                        "end": {
                            "line": 156,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 156,
                            "column": 12
                        },
                        "end": {
                            "line": 156,
                            "column": 12
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('tree-lazy', function (Y, NAME) {",
            "",
            "/*jshint expr:true, maxlen:200, onevar:false */",
            "",
            "/**",
            "Provides `Plugin.Tree.Lazy`, a plugin for `Tree.Openable` that makes it easy to",
            "lazily load and populate the contents of tree nodes the first time they're",
            "opened.",
            "",
            "@module tree",
            "@submodule tree-lazy",
            "**/",
            "",
            "/**",
            "A plugin for `Tree.Openable` that makes it easy to lazily load and populate the",
            "contents of tree nodes the first time they're opened.",
            "",
            "### Example",
            "",
            "    YUI().use('jsonp', 'tree-openable', 'tree-lazy', function (Y) {",
            "        var Tree = Y.Base.create('openableTree', Y.Tree, [Y.Tree.Openable]),",
            "            tree = new Tree();",
            "",
            "        tree.plug(Y.Plugin.Tree.Lazy, {",
            "",
            "            // Custom function that Plugin.Tree.Lazy will call when it needs to",
            "            // load the children for a node.",
            "            load: function (node, callback) {",
            "                // Request the data for this node's children via JSONP.",
            "                Y.jsonp('http://example.com/api/data?callback={callback}', function (data) {",
            "                    // If we didn't get any data back, treat this as an error.",
            "                    if (!data) {",
            "                        callback(new Error('No data!'));",
            "                        return;",
            "                    }",
            "",
            "                    // Append the children to the node (assume `data.children` is",
            "                    // an array of child node data for the sake of this example).",
            "                    node.append(data.children);",
            "",
            "                    // Call the callback function to tell Plugin.Tree.Lazy that",
            "                    // we're done loading data.",
            "                    callback();",
            "                });",
            "            }",
            "",
            "        });",
            "    });",
            "",
            "@class Plugin.Tree.Lazy",
            "@param {Object} config Config object.",
            "",
            "    @param {Function} config.load Custom `load()` function that will be called",
            "        when a node's children need to be loaded. This function must call the",
            "        provided callback to indicate completion.",
            "",
            "        @param {Function} config.load.callback Callback function. The custom",
            "            `load()` function must call this callback to indicate completion.",
            "",
            "            @param {Error} [config.load.callback.err] Error object. If provided,",
            "                the load action will be considered a failure, and an `error`",
            "                event will be fired. Omit this argument (or set it to `null`) to",
            "                indicate success.",
            "",
            "@extends Plugin.Base",
            "@constructor",
            "**/",
            "",
            "/**",
            "Fired just before the custom `load()` method is called to load child nodes for a",
            "node.",
            "",
            "Calling `preventDefault()` on this event's facade will cancel the load action",
            "and prevent the `load()` method from being called.",
            "",
            "@event beforeLoad",
            "@param {Tree.Node} node Tree node whose children will be loaded.",
            "@preventable _defBeforeLoadFn",
            "**/",
            "var EVT_BEFORE_LOAD = 'beforeLoad';",
            "",
            "/**",
            "Fired when the `load()` method indicates there was an error loading child nodes.",
            "",
            "@event error",
            "@param {Error} error Error provided by the `load()` method.",
            "@param {String} src Source of the error (defaults to \"load\").",
            "**/",
            "var EVT_ERROR = 'error';",
            "",
            "/**",
            "Fired after child nodes have finished loading and have been added to the tree.",
            "",
            "@event load",
            "@param {Tree.Node} node Tree node whose children have been loaded.",
            "**/",
            "var EVT_LOAD = 'load';",
            "",
            "Y.namespace('Plugin.Tree').Lazy = Y.Base.create('lazyTreePlugin', Y.Plugin.Base, [], {",
            "    // -- Lifecycle Methods ----------------------------------------------------",
            "    initializer: function (config) {",
            "        this._host = config.host;",
            "",
            "        if (config.load) {",
            "            this.load = config.load;",
            "        }",
            "",
            "        // Make sure we've been plugged into a Tree that mixes in the",
            "        // Tree.Openable extension.",
            "        if (!this._host.openNode) {",
            "        }",
            "",
            "        this._published = {};",
            "        this._attachEvents();",
            "    },",
            "",
            "    // -- Public Methods -------------------------------------------------------",
            "    load: function (node, callback) {",
            "        callback(new Error('Plugin.Tree.Lazy: Please provide a custom `load` method when instantiating this plugin.'));",
            "    },",
            "",
            "    // -- Protected Methods ----------------------------------------------------",
            "    _attachEvents: function () {",
            "        this.onHostEvent('open', this._onOpen);",
            "    },",
            "",
            "    // -- Protected Event Handlers ---------------------------------------------",
            "    _onOpen: function (e) {",
            "        var node = e.node;",
            "",
            "        // Nothing to do if this node can't have children or if its children",
            "        // have already been (or are already being) loaded.",
            "        if (!node.canHaveChildren || node.state.loaded || node.state.loading) {",
            "            return;",
            "        }",
            "",
            "        if (!this._published[EVT_BEFORE_LOAD]) {",
            "            this._published[EVT_BEFORE_LOAD] = this.publish(EVT_BEFORE_LOAD, {",
            "                defaultFn: this._defLoadingFn",
            "            });",
            "        }",
            "",
            "        this.fire(EVT_BEFORE_LOAD, {node: node});",
            "    },",
            "",
            "    // -- Default Event Handlers -----------------------------------------------",
            "    _defLoadingFn: function (e) {",
            "        var node = e.node,",
            "            self = this;",
            "",
            "        node.state.loading = true;",
            "",
            "        this.load(node, function (err) {",
            "            delete node.state.loading;",
            "",
            "            if (err) {",
            "                self.fire(EVT_ERROR, {",
            "                    error: err,",
            "                    src  : 'load'",
            "                });",
            "",
            "                return;",
            "            }",
            "",
            "            node.state.loaded = true;",
            "",
            "            self.fire(EVT_LOAD, {node: node});",
            "        });",
            "    }",
            "}, {",
            "    NS: 'lazy'",
            "});",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"base-pluginhost\", \"plugin\", \"tree\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "80": 1,
            "89": 1,
            "97": 1,
            "99": 1,
            "102": 10,
            "104": 10,
            "105": 8,
            "110": 10,
            "113": 10,
            "114": 10,
            "119": 1,
            "124": 10,
            "129": 8,
            "133": 8,
            "134": 0,
            "137": 8,
            "138": 7,
            "143": 8,
            "148": 7,
            "151": 7,
            "153": 7,
            "154": 7,
            "156": 7,
            "157": 2,
            "162": 2,
            "165": 5,
            "167": 5
        }
    },
    "build/tree-labelable/tree-labelable.js": {
        "path": "build/tree-labelable/tree-labelable.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 3,
            "5": 1,
            "6": 1,
            "7": 10,
            "8": 10,
            "9": 4,
            "10": 1,
            "11": 1
        },
        "b": {
            "1": [
                4,
                6
            ]
        },
        "f": {
            "1": 1,
            "2": 3,
            "3": 3,
            "4": 10
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 26
                    },
                    "end": {
                        "line": 1,
                        "column": 45
                    }
                }
            },
            "2": {
                "name": "Labelable",
                "line": 23,
                "loc": {
                    "start": {
                        "line": 23,
                        "column": 0
                    },
                    "end": {
                        "line": 23,
                        "column": 21
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 26,
                "loc": {
                    "start": {
                        "line": 26,
                        "column": 17
                    },
                    "end": {
                        "line": 26,
                        "column": 29
                    }
                }
            },
            "4": {
                "name": "NodeLabelable",
                "line": 53,
                "loc": {
                    "start": {
                        "line": 53,
                        "column": 0
                    },
                    "end": {
                        "line": 53,
                        "column": 37
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 79,
                    "column": 40
                }
            },
            "2": {
                "start": {
                    "line": 23,
                    "column": 0
                },
                "end": {
                    "line": 23,
                    "column": 23
                }
            },
            "3": {
                "start": {
                    "line": 25,
                    "column": 0
                },
                "end": {
                    "line": 29,
                    "column": 2
                }
            },
            "4": {
                "start": {
                    "line": 27,
                    "column": 8
                },
                "end": {
                    "line": 27,
                    "column": 80
                }
            },
            "5": {
                "start": {
                    "line": 31,
                    "column": 0
                },
                "end": {
                    "line": 31,
                    "column": 29
                }
            },
            "6": {
                "start": {
                    "line": 53,
                    "column": 0
                },
                "end": {
                    "line": 59,
                    "column": 1
                }
            },
            "7": {
                "start": {
                    "line": 54,
                    "column": 4
                },
                "end": {
                    "line": 54,
                    "column": 60
                }
            },
            "8": {
                "start": {
                    "line": 56,
                    "column": 4
                },
                "end": {
                    "line": 58,
                    "column": 5
                }
            },
            "9": {
                "start": {
                    "line": 57,
                    "column": 8
                },
                "end": {
                    "line": 57,
                    "column": 34
                }
            },
            "10": {
                "start": {
                    "line": 61,
                    "column": 0
                },
                "end": {
                    "line": 74,
                    "column": 2
                }
            },
            "11": {
                "start": {
                    "line": 76,
                    "column": 0
                },
                "end": {
                    "line": 76,
                    "column": 38
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 56,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 56,
                            "column": 4
                        },
                        "end": {
                            "line": 56,
                            "column": 4
                        }
                    },
                    {
                        "start": {
                            "line": 56,
                            "column": 4
                        },
                        "end": {
                            "line": 56,
                            "column": 4
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('tree-labelable', function (Y, NAME) {",
            "",
            "/*jshint expr:true, onevar:false */",
            "",
            "/**",
            "Extension for `Tree` that adds baked-in support for node labels like you might",
            "see in a treeview or menu.",
            "",
            "@module tree",
            "@submodule tree-labelable",
            "@main tree-labelable",
            "**/",
            "",
            "/**",
            "Extension for `Tree` that adds baked-in support for node labels like you might",
            "see in a treeview or menu.",
            "",
            "@class Tree.Labelable",
            "@constructor",
            "@extensionfor Tree",
            "**/",
            "",
            "function Labelable() {}",
            "",
            "Labelable.prototype = {",
            "    initializer: function () {",
            "        this.nodeExtensions = this.nodeExtensions.concat(Y.Tree.Node.Labelable);",
            "    }",
            "};",
            "",
            "Y.Tree.Labelable = Labelable;",
            "/**",
            "@module tree",
            "@submodule tree-labelable",
            "**/",
            "",
            "/**",
            "`Tree.Node` extension that adds baked in support for labels like you might see",
            "in a treeview or menu.",
            "",
            "**Security note:** The label is stored in raw, unescaped form. If you choose to",
            "render the label as HTML, be sure to escape it first with `Y.Escape.html()`",
            "unless you actually intend to render raw HTML contained in the label.",
            "",
            "@class Tree.Node.Labelable",
            "@constructor",
            "@param {Tree} tree `Tree` instance with which this node should be associated.",
            "@param {Object} [config] Configuration hash.",
            "    @param {String} [config.label=''] Label for this node.",
            "@extensionfor Tree.Node",
            "**/",
            "",
            "function NodeLabelable(tree, config) {",
            "    this._serializable = this._serializable.concat('label');",
            "",
            "    if ('label' in config) {",
            "        this.label = config.label;",
            "    }",
            "}",
            "",
            "NodeLabelable.prototype = {",
            "    /**",
            "    Label for this node.",
            "",
            "    **Security note:** The label is stored in raw, unescaped form. If you choose",
            "    to render the label as HTML, be sure to escape it first with",
            "    `Y.Escape.html()` unless you actually intend to render raw HTML contained in",
            "    the label.",
            "",
            "    @property {String} label",
            "    @default ''",
            "    **/",
            "    label: ''",
            "};",
            "",
            "Y.Tree.Node.Labelable = NodeLabelable;",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"tree\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "23": 1,
            "25": 1,
            "27": 3,
            "31": 1,
            "53": 1,
            "54": 10,
            "56": 10,
            "57": 4,
            "61": 1,
            "76": 1
        }
    },
    "build/tree-selectable/tree-selectable.js": {
        "path": "build/tree-selectable/tree-selectable.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1,
            "7": 30,
            "8": 30,
            "9": 30,
            "10": 30,
            "11": 30,
            "12": 30,
            "13": 30,
            "14": 30,
            "15": 30,
            "16": 13,
            "17": 30,
            "18": 29,
            "19": 30,
            "20": 27,
            "21": 7,
            "22": 7,
            "23": 27,
            "24": 16,
            "25": 12,
            "26": 16,
            "27": 75,
            "28": 1,
            "29": 31,
            "30": 1,
            "31": 1,
            "32": 4,
            "33": 28,
            "34": 21,
            "35": 28,
            "36": 28,
            "37": 11,
            "38": 11,
            "39": 1,
            "40": 1,
            "41": 1,
            "42": 1,
            "43": 102,
            "44": 16,
            "45": 16,
            "46": 2,
            "47": 2,
            "48": 1
        },
        "b": {
            "1": [
                29,
                1
            ],
            "2": [
                29,
                3
            ],
            "3": [
                29,
                3
            ],
            "4": [
                7,
                0
            ],
            "5": [
                12,
                4
            ],
            "6": [
                16,
                4
            ],
            "7": [
                12,
                2
            ],
            "8": [
                12,
                2
            ],
            "9": [
                1,
                74
            ],
            "10": [
                21,
                7
            ]
        },
        "f": {
            "1": 1,
            "2": 30,
            "3": 30,
            "4": 30,
            "5": 13,
            "6": 30,
            "7": 27,
            "8": 16,
            "9": 75,
            "10": 31,
            "11": 1,
            "12": 4,
            "13": 28,
            "14": 11,
            "15": 171,
            "16": 102,
            "17": 16,
            "18": 2
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 27
                    },
                    "end": {
                        "line": 1,
                        "column": 46
                    }
                }
            },
            "2": {
                "name": "Selectable",
                "line": 41,
                "loc": {
                    "start": {
                        "line": 41,
                        "column": 0
                    },
                    "end": {
                        "line": 41,
                        "column": 22
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 55,
                "loc": {
                    "start": {
                        "line": 55,
                        "column": 17
                    },
                    "end": {
                        "line": 55,
                        "column": 29
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 68,
                "loc": {
                    "start": {
                        "line": 68,
                        "column": 16
                    },
                    "end": {
                        "line": 68,
                        "column": 28
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 83,
                "loc": {
                    "start": {
                        "line": 83,
                        "column": 22
                    },
                    "end": {
                        "line": 83,
                        "column": 34
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 101,
                "loc": {
                    "start": {
                        "line": 101,
                        "column": 16
                    },
                    "end": {
                        "line": 101,
                        "column": 41
                    }
                }
            },
            "7": {
                "name": "(anonymous_7)",
                "line": 132,
                "loc": {
                    "start": {
                        "line": 132,
                        "column": 14
                    },
                    "end": {
                        "line": 132,
                        "column": 33
                    }
                }
            },
            "8": {
                "name": "(anonymous_8)",
                "line": 156,
                "loc": {
                    "start": {
                        "line": 156,
                        "column": 18
                    },
                    "end": {
                        "line": 156,
                        "column": 43
                    }
                }
            },
            "9": {
                "name": "(anonymous_9)",
                "line": 171,
                "loc": {
                    "start": {
                        "line": 171,
                        "column": 30
                    },
                    "end": {
                        "line": 171,
                        "column": 43
                    }
                }
            },
            "10": {
                "name": "(anonymous_10)",
                "line": 179,
                "loc": {
                    "start": {
                        "line": 179,
                        "column": 32
                    },
                    "end": {
                        "line": 179,
                        "column": 44
                    }
                }
            },
            "11": {
                "name": "(anonymous_11)",
                "line": 183,
                "loc": {
                    "start": {
                        "line": 183,
                        "column": 33
                    },
                    "end": {
                        "line": 183,
                        "column": 46
                    }
                }
            },
            "12": {
                "name": "(anonymous_12)",
                "line": 189,
                "loc": {
                    "start": {
                        "line": 189,
                        "column": 29
                    },
                    "end": {
                        "line": 189,
                        "column": 41
                    }
                }
            },
            "13": {
                "name": "(anonymous_13)",
                "line": 193,
                "loc": {
                    "start": {
                        "line": 193,
                        "column": 18
                    },
                    "end": {
                        "line": 193,
                        "column": 31
                    }
                }
            },
            "14": {
                "name": "(anonymous_14)",
                "line": 202,
                "loc": {
                    "start": {
                        "line": 202,
                        "column": 20
                    },
                    "end": {
                        "line": 202,
                        "column": 33
                    }
                }
            },
            "15": {
                "name": "NodeSelectable",
                "line": 235,
                "loc": {
                    "start": {
                        "line": 235,
                        "column": 0
                    },
                    "end": {
                        "line": 235,
                        "column": 26
                    }
                }
            },
            "16": {
                "name": "(anonymous_16)",
                "line": 245,
                "loc": {
                    "start": {
                        "line": 245,
                        "column": 16
                    },
                    "end": {
                        "line": 245,
                        "column": 28
                    }
                }
            },
            "17": {
                "name": "(anonymous_17)",
                "line": 262,
                "loc": {
                    "start": {
                        "line": 262,
                        "column": 12
                    },
                    "end": {
                        "line": 262,
                        "column": 31
                    }
                }
            },
            "18": {
                "name": "(anonymous_18)",
                "line": 280,
                "loc": {
                    "start": {
                        "line": 280,
                        "column": 14
                    },
                    "end": {
                        "line": 280,
                        "column": 33
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 289,
                    "column": 40
                }
            },
            "2": {
                "start": {
                    "line": 13,
                    "column": 0
                },
                "end": {
                    "line": 13,
                    "column": 14
                }
            },
            "3": {
                "start": {
                    "line": 30,
                    "column": 0
                },
                "end": {
                    "line": 30,
                    "column": 26
                }
            },
            "4": {
                "start": {
                    "line": 39,
                    "column": 0
                },
                "end": {
                    "line": 39,
                    "column": 30
                }
            },
            "5": {
                "start": {
                    "line": 41,
                    "column": 0
                },
                "end": {
                    "line": 41,
                    "column": 24
                }
            },
            "6": {
                "start": {
                    "line": 43,
                    "column": 0
                },
                "end": {
                    "line": 206,
                    "column": 2
                }
            },
            "7": {
                "start": {
                    "line": 56,
                    "column": 8
                },
                "end": {
                    "line": 56,
                    "column": 81
                }
            },
            "8": {
                "start": {
                    "line": 57,
                    "column": 8
                },
                "end": {
                    "line": 57,
                    "column": 33
                }
            },
            "9": {
                "start": {
                    "line": 59,
                    "column": 8
                },
                "end": {
                    "line": 59,
                    "column": 67
                }
            },
            "10": {
                "start": {
                    "line": 60,
                    "column": 8
                },
                "end": {
                    "line": 60,
                    "column": 71
                }
            },
            "11": {
                "start": {
                    "line": 61,
                    "column": 8
                },
                "end": {
                    "line": 61,
                    "column": 73
                }
            },
            "12": {
                "start": {
                    "line": 63,
                    "column": 8
                },
                "end": {
                    "line": 65,
                    "column": 10
                }
            },
            "13": {
                "start": {
                    "line": 69,
                    "column": 8
                },
                "end": {
                    "line": 69,
                    "column": 61
                }
            },
            "14": {
                "start": {
                    "line": 71,
                    "column": 8
                },
                "end": {
                    "line": 71,
                    "column": 38
                }
            },
            "15": {
                "start": {
                    "line": 72,
                    "column": 8
                },
                "end": {
                    "line": 72,
                    "column": 38
                }
            },
            "16": {
                "start": {
                    "line": 84,
                    "column": 8
                },
                "end": {
                    "line": 84,
                    "column": 50
                }
            },
            "17": {
                "start": {
                    "line": 106,
                    "column": 8
                },
                "end": {
                    "line": 114,
                    "column": 9
                }
            },
            "18": {
                "start": {
                    "line": 107,
                    "column": 12
                },
                "end": {
                    "line": 113,
                    "column": 15
                }
            },
            "19": {
                "start": {
                    "line": 116,
                    "column": 8
                },
                "end": {
                    "line": 116,
                    "column": 20
                }
            },
            "20": {
                "start": {
                    "line": 133,
                    "column": 8
                },
                "end": {
                    "line": 137,
                    "column": 9
                }
            },
            "21": {
                "start": {
                    "line": 134,
                    "column": 12
                },
                "end": {
                    "line": 136,
                    "column": 13
                }
            },
            "22": {
                "start": {
                    "line": 135,
                    "column": 16
                },
                "end": {
                    "line": 135,
                    "column": 66
                }
            },
            "23": {
                "start": {
                    "line": 139,
                    "column": 8
                },
                "end": {
                    "line": 139,
                    "column": 20
                }
            },
            "24": {
                "start": {
                    "line": 157,
                    "column": 8
                },
                "end": {
                    "line": 165,
                    "column": 9
                }
            },
            "25": {
                "start": {
                    "line": 158,
                    "column": 12
                },
                "end": {
                    "line": 164,
                    "column": 15
                }
            },
            "26": {
                "start": {
                    "line": 167,
                    "column": 8
                },
                "end": {
                    "line": 167,
                    "column": 20
                }
            },
            "27": {
                "start": {
                    "line": 174,
                    "column": 8
                },
                "end": {
                    "line": 176,
                    "column": 9
                }
            },
            "28": {
                "start": {
                    "line": 175,
                    "column": 12
                },
                "end": {
                    "line": 175,
                    "column": 36
                }
            },
            "29": {
                "start": {
                    "line": 180,
                    "column": 8
                },
                "end": {
                    "line": 180,
                    "column": 31
                }
            },
            "30": {
                "start": {
                    "line": 184,
                    "column": 8
                },
                "end": {
                    "line": 184,
                    "column": 37
                }
            },
            "31": {
                "start": {
                    "line": 185,
                    "column": 8
                },
                "end": {
                    "line": 185,
                    "column": 44
                }
            },
            "32": {
                "start": {
                    "line": 190,
                    "column": 8
                },
                "end": {
                    "line": 190,
                    "column": 24
                }
            },
            "33": {
                "start": {
                    "line": 194,
                    "column": 8
                },
                "end": {
                    "line": 196,
                    "column": 9
                }
            },
            "34": {
                "start": {
                    "line": 195,
                    "column": 12
                },
                "end": {
                    "line": 195,
                    "column": 28
                }
            },
            "35": {
                "start": {
                    "line": 198,
                    "column": 8
                },
                "end": {
                    "line": 198,
                    "column": 37
                }
            },
            "36": {
                "start": {
                    "line": 199,
                    "column": 8
                },
                "end": {
                    "line": 199,
                    "column": 46
                }
            },
            "37": {
                "start": {
                    "line": 203,
                    "column": 8
                },
                "end": {
                    "line": 203,
                    "column": 37
                }
            },
            "38": {
                "start": {
                    "line": 204,
                    "column": 8
                },
                "end": {
                    "line": 204,
                    "column": 44
                }
            },
            "39": {
                "start": {
                    "line": 208,
                    "column": 0
                },
                "end": {
                    "line": 218,
                    "column": 2
                }
            },
            "40": {
                "start": {
                    "line": 220,
                    "column": 0
                },
                "end": {
                    "line": 220,
                    "column": 31
                }
            },
            "41": {
                "start": {
                    "line": 235,
                    "column": 0
                },
                "end": {
                    "line": 235,
                    "column": 28
                }
            },
            "42": {
                "start": {
                    "line": 237,
                    "column": 0
                },
                "end": {
                    "line": 284,
                    "column": 2
                }
            },
            "43": {
                "start": {
                    "line": 246,
                    "column": 8
                },
                "end": {
                    "line": 246,
                    "column": 37
                }
            },
            "44": {
                "start": {
                    "line": 263,
                    "column": 8
                },
                "end": {
                    "line": 263,
                    "column": 44
                }
            },
            "45": {
                "start": {
                    "line": 264,
                    "column": 8
                },
                "end": {
                    "line": 264,
                    "column": 20
                }
            },
            "46": {
                "start": {
                    "line": 281,
                    "column": 8
                },
                "end": {
                    "line": 281,
                    "column": 46
                }
            },
            "47": {
                "start": {
                    "line": 282,
                    "column": 8
                },
                "end": {
                    "line": 282,
                    "column": 20
                }
            },
            "48": {
                "start": {
                    "line": 286,
                    "column": 0
                },
                "end": {
                    "line": 286,
                    "column": 40
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 106,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 106,
                            "column": 8
                        },
                        "end": {
                            "line": 106,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 106,
                            "column": 8
                        },
                        "end": {
                            "line": 106,
                            "column": 8
                        }
                    }
                ]
            },
            "2": {
                "line": 109,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 109,
                            "column": 22
                        },
                        "end": {
                            "line": 109,
                            "column": 29
                        }
                    },
                    {
                        "start": {
                            "line": 109,
                            "column": 33
                        },
                        "end": {
                            "line": 109,
                            "column": 44
                        }
                    }
                ]
            },
            "3": {
                "line": 112,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 112,
                            "column": 27
                        },
                        "end": {
                            "line": 112,
                            "column": 34
                        }
                    },
                    {
                        "start": {
                            "line": 112,
                            "column": 38
                        },
                        "end": {
                            "line": 112,
                            "column": 52
                        }
                    }
                ]
            },
            "4": {
                "line": 134,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 134,
                            "column": 12
                        },
                        "end": {
                            "line": 134,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 134,
                            "column": 12
                        },
                        "end": {
                            "line": 134,
                            "column": 12
                        }
                    }
                ]
            },
            "5": {
                "line": 157,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 157,
                            "column": 8
                        },
                        "end": {
                            "line": 157,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 157,
                            "column": 8
                        },
                        "end": {
                            "line": 157,
                            "column": 8
                        }
                    }
                ]
            },
            "6": {
                "line": 157,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 157,
                            "column": 12
                        },
                        "end": {
                            "line": 157,
                            "column": 29
                        }
                    },
                    {
                        "start": {
                            "line": 157,
                            "column": 33
                        },
                        "end": {
                            "line": 157,
                            "column": 59
                        }
                    }
                ]
            },
            "7": {
                "line": 160,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 160,
                            "column": 22
                        },
                        "end": {
                            "line": 160,
                            "column": 29
                        }
                    },
                    {
                        "start": {
                            "line": 160,
                            "column": 33
                        },
                        "end": {
                            "line": 160,
                            "column": 44
                        }
                    }
                ]
            },
            "8": {
                "line": 163,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 163,
                            "column": 27
                        },
                        "end": {
                            "line": 163,
                            "column": 34
                        }
                    },
                    {
                        "start": {
                            "line": 163,
                            "column": 38
                        },
                        "end": {
                            "line": 163,
                            "column": 52
                        }
                    }
                ]
            },
            "9": {
                "line": 174,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 174,
                            "column": 8
                        },
                        "end": {
                            "line": 174,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 174,
                            "column": 8
                        },
                        "end": {
                            "line": 174,
                            "column": 8
                        }
                    }
                ]
            },
            "10": {
                "line": 194,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 194,
                            "column": 8
                        },
                        "end": {
                            "line": 194,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 194,
                            "column": 8
                        },
                        "end": {
                            "line": 194,
                            "column": 8
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('tree-selectable', function (Y, NAME) {",
            "",
            "/*jshint expr:true, onevar:false */",
            "",
            "/**",
            "Extension for `Tree` that adds the concept of selection state for nodes.",
            "",
            "@module tree",
            "@submodule tree-selectable",
            "@main tree-selectable",
            "**/",
            "",
            "var Do = Y.Do;",
            "",
            "/**",
            "Extension for `Tree` that adds the concept of selection state for nodes.",
            "",
            "@class Tree.Selectable",
            "@constructor",
            "@extensionfor Tree",
            "**/",
            "",
            "/**",
            "Fired when a node is selected.",
            "",
            "@event select",
            "@param {Tree.Node} node Node being selected.",
            "@preventable _defSelectFn",
            "**/",
            "var EVT_SELECT = 'select';",
            "",
            "/**",
            "Fired when a node is unselected.",
            "",
            "@event unselect",
            "@param {Tree.Node} node Node being unselected.",
            "@preventable _defUnselectFn",
            "**/",
            "var EVT_UNSELECT = 'unselect';",
            "",
            "function Selectable() {}",
            "",
            "Selectable.prototype = {",
            "    // -- Protected Properties -------------------------------------------------",
            "",
            "    /**",
            "    Mapping of node ids to node instances for nodes in this tree that are",
            "    currently selected.",
            "",
            "    @property {Object} _selectedMap",
            "    @protected",
            "    **/",
            "",
            "    // -- Lifecycle ------------------------------------------------------------",
            "    initializer: function () {",
            "        this.nodeExtensions = this.nodeExtensions.concat(Y.Tree.Node.Selectable);",
            "        this._selectedMap   = {};",
            "",
            "        Do.after(this._selectableAfterDefAddFn, this, '_defAddFn');",
            "        Do.after(this._selectableAfterDefClearFn, this, '_defClearFn');",
            "        Do.after(this._selectableAfterDefRemoveFn, this, '_defRemoveFn');",
            "",
            "        this._selectableEvents = [",
            "            this.after('multiSelectChange', this._afterMultiSelectChange)",
            "        ];",
            "    },",
            "",
            "    destructor: function () {",
            "        (new Y.EventHandle(this._selectableEvents)).detach();",
            "",
            "        this._selectableEvents = null;",
            "        this._selectedMap      = null;",
            "    },",
            "",
            "    // -- Public Methods -------------------------------------------------------",
            "",
            "    /**",
            "    Returns an array of nodes that are currently selected.",
            "",
            "    @method getSelectedNodes",
            "    @return {Tree.Node.Selectable[]} Array of selected nodes.",
            "    **/",
            "    getSelectedNodes: function () {",
            "        return Y.Object.values(this._selectedMap);",
            "    },",
            "",
            "    /**",
            "    Selects the specified node.",
            "",
            "    @method selectNode",
            "    @param {Tree.Node.Selectable} node Node to select.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `select` event",
            "            will be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    selectNode: function (node, options) {",
            "        // Instead of calling node.isSelected(), we look for the node in this",
            "        // tree's selectedMap, which ensures that the `select` event will fire",
            "        // in cases such as a node being added to this tree with its selected",
            "        // state already set to true.",
            "        if (!this._selectedMap[node.id]) {",
            "            this._fireTreeEvent(EVT_SELECT, {",
            "                node: node,",
            "                src : options && options.src",
            "            }, {",
            "                defaultFn: this._defSelectFn,",
            "                silent   : options && options.silent",
            "            });",
            "        }",
            "",
            "        return this;",
            "    },",
            "",
            "    /**",
            "    Unselects all selected nodes.",
            "",
            "    @method unselect",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `unselect` event",
            "            will be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    unselect: function (options) {",
            "        for (var id in this._selectedMap) {",
            "            if (this._selectedMap.hasOwnProperty(id)) {",
            "                this.unselectNode(this._selectedMap[id], options);",
            "            }",
            "        }",
            "",
            "        return this;",
            "    },",
            "",
            "    /**",
            "    Unselects the specified node.",
            "",
            "    @method unselectNode",
            "    @param {Tree.Node.Selectable} node Node to unselect.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `unselect` event",
            "            will be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    unselectNode: function (node, options) {",
            "        if (node.isSelected() || this._selectedMap[node.id]) {",
            "            this._fireTreeEvent(EVT_UNSELECT, {",
            "                node: node,",
            "                src : options && options.src",
            "            }, {",
            "                defaultFn: this._defUnselectFn,",
            "                silent   : options && options.silent",
            "            });",
            "        }",
            "",
            "        return this;",
            "    },",
            "",
            "    // -- Protected Methods ----------------------------------------------------",
            "    _selectableAfterDefAddFn: function (e) {",
            "        // If the node is marked as selected, we need go through the select",
            "        // flow.",
            "        if (e.node.isSelected()) {",
            "            this.selectNode(e.node);",
            "        }",
            "    },",
            "",
            "    _selectableAfterDefClearFn: function () {",
            "        this._selectedMap = {};",
            "    },",
            "",
            "    _selectableAfterDefRemoveFn: function (e) {",
            "        delete e.node.state.selected;",
            "        delete this._selectedMap[e.node.id];",
            "    },",
            "",
            "    // -- Protected Event Handlers ---------------------------------------------",
            "    _afterMultiSelectChange: function () {",
            "        this.unselect();",
            "    },",
            "",
            "    _defSelectFn: function (e) {",
            "        if (!this.get('multiSelect')) {",
            "            this.unselect();",
            "        }",
            "",
            "        e.node.state.selected = true;",
            "        this._selectedMap[e.node.id] = e.node;",
            "    },",
            "",
            "    _defUnselectFn: function (e) {",
            "        delete e.node.state.selected;",
            "        delete this._selectedMap[e.node.id];",
            "    }",
            "};",
            "",
            "Selectable.ATTRS = {",
            "    /**",
            "    Whether or not to allow multiple nodes to be selected at once.",
            "",
            "    @attribute {Boolean} multiSelect",
            "    @default false",
            "    **/",
            "    multiSelect: {",
            "        value: false",
            "    }",
            "};",
            "",
            "Y.Tree.Selectable = Selectable;",
            "/**",
            "@module tree",
            "@submodule tree-selectable",
            "**/",
            "",
            "/**",
            "`Tree.Node` extension that adds methods useful for nodes in trees that use the",
            "`Tree.Selectable` extension.",
            "",
            "@class Tree.Node.Selectable",
            "@constructor",
            "@extensionfor Tree.Node",
            "**/",
            "",
            "function NodeSelectable() {}",
            "",
            "NodeSelectable.prototype = {",
            "    /**",
            "    Returns `true` if this node is currently selected.",
            "",
            "    @method isSelected",
            "    @return {Boolean} `true` if this node is currently selected, `false`",
            "        otherwise.",
            "    **/",
            "    isSelected: function () {",
            "        return !!this.state.selected;",
            "    },",
            "",
            "    /**",
            "    Selects this node.",
            "",
            "    @method select",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `select` event",
            "            will be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    select: function (options) {",
            "        this.tree.selectNode(this, options);",
            "        return this;",
            "    },",
            "",
            "    /**",
            "    Unselects this node.",
            "",
            "    @method unselect",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent=false] If `true`, the `unselect` event",
            "            will be suppressed.",
            "        @param {String} [options.src] Source of the change, to be passed along",
            "            to the event facade of the resulting event. This can be used to",
            "            distinguish between changes triggered by a user and changes",
            "            triggered programmatically, for example.",
            "    @chainable",
            "    **/",
            "    unselect: function (options) {",
            "        this.tree.unselectNode(this, options);",
            "        return this;",
            "    }",
            "};",
            "",
            "Y.Tree.Node.Selectable = NodeSelectable;",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"tree\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "13": 1,
            "30": 1,
            "39": 1,
            "41": 1,
            "43": 1,
            "56": 30,
            "57": 30,
            "59": 30,
            "60": 30,
            "61": 30,
            "63": 30,
            "69": 30,
            "71": 30,
            "72": 30,
            "84": 13,
            "106": 30,
            "107": 29,
            "116": 30,
            "133": 27,
            "134": 7,
            "135": 7,
            "139": 27,
            "157": 16,
            "158": 12,
            "167": 16,
            "174": 75,
            "175": 1,
            "180": 31,
            "184": 1,
            "185": 1,
            "190": 4,
            "194": 28,
            "195": 21,
            "198": 28,
            "199": 28,
            "203": 11,
            "204": 11,
            "208": 1,
            "220": 1,
            "235": 1,
            "237": 1,
            "246": 102,
            "263": 16,
            "264": 16,
            "281": 2,
            "282": 2,
            "286": 1
        }
    },
    "build/tree-sortable/tree-sortable.js": {
        "path": "build/tree-sortable/tree-sortable.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 26,
            "6": 26,
            "7": 17,
            "8": 4,
            "9": 17,
            "10": 3,
            "11": 1,
            "12": 14,
            "13": 46,
            "14": 24,
            "15": 22,
            "16": 22,
            "17": 2,
            "18": 2,
            "19": 2,
            "20": 32,
            "21": 2,
            "22": 20,
            "23": 20,
            "24": 1,
            "25": 19,
            "26": 0,
            "27": 19,
            "28": 20,
            "29": 20,
            "30": 20,
            "31": 19,
            "32": 20,
            "33": 41,
            "34": 33,
            "35": 66,
            "36": 66,
            "37": 21,
            "38": 45,
            "39": 29,
            "40": 16,
            "41": 16,
            "42": 16,
            "43": 27,
            "44": 27,
            "45": 11,
            "46": 16,
            "47": 16,
            "48": 86,
            "49": 86,
            "50": 2,
            "51": 84,
            "52": 11,
            "53": 11,
            "54": 73,
            "55": 73,
            "56": 86,
            "57": 137,
            "58": 86,
            "59": 86,
            "60": 47,
            "61": 1,
            "62": 1,
            "63": 1,
            "64": 2,
            "65": 2,
            "66": 1
        },
        "b": {
            "1": [
                17,
                9
            ],
            "2": [
                4,
                13
            ],
            "3": [
                3,
                14
            ],
            "4": [
                24,
                22
            ],
            "5": [
                22,
                5
            ],
            "6": [
                2,
                20
            ],
            "7": [
                1,
                19
            ],
            "8": [
                0,
                19
            ],
            "9": [
                19,
                1
            ],
            "10": [
                20,
                21
            ],
            "11": [
                20,
                1
            ],
            "12": [
                7,
                26
            ],
            "13": [
                25,
                1
            ],
            "14": [
                4,
                62
            ],
            "15": [
                21,
                45
            ],
            "16": [
                29,
                16
            ],
            "17": [
                2,
                27
            ],
            "18": [
                7,
                9
            ],
            "19": [
                11,
                16
            ],
            "20": [
                2,
                84
            ],
            "21": [
                86,
                20
            ],
            "22": [
                11,
                73
            ],
            "23": [
                21,
                26
            ]
        },
        "f": {
            "1": 1,
            "2": 26,
            "3": 26,
            "4": 1,
            "5": 14,
            "6": 46,
            "7": 32,
            "8": 41,
            "9": 33,
            "10": 66,
            "11": 86,
            "12": 137,
            "13": 47,
            "14": 195,
            "15": 2
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 25
                    },
                    "end": {
                        "line": 1,
                        "column": 44
                    }
                }
            },
            "2": {
                "name": "Sortable",
                "line": 40,
                "loc": {
                    "start": {
                        "line": 40,
                        "column": 0
                    },
                    "end": {
                        "line": 40,
                        "column": 20
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 55,
                "loc": {
                    "start": {
                        "line": 55,
                        "column": 17
                    },
                    "end": {
                        "line": 55,
                        "column": 35
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 94,
                "loc": {
                    "start": {
                        "line": 94,
                        "column": 10
                    },
                    "end": {
                        "line": 94,
                        "column": 29
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 109,
                "loc": {
                    "start": {
                        "line": 109,
                        "column": 20
                    },
                    "end": {
                        "line": 109,
                        "column": 36
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 141,
                "loc": {
                    "start": {
                        "line": 141,
                        "column": 14
                    },
                    "end": {
                        "line": 141,
                        "column": 39
                    }
                }
            },
            "7": {
                "name": "(anonymous_7)",
                "line": 156,
                "loc": {
                    "start": {
                        "line": 156,
                        "column": 36
                    },
                    "end": {
                        "line": 156,
                        "column": 58
                    }
                }
            },
            "8": {
                "name": "(anonymous_8)",
                "line": 202,
                "loc": {
                    "start": {
                        "line": 202,
                        "column": 14
                    },
                    "end": {
                        "line": 202,
                        "column": 30
                    }
                }
            },
            "9": {
                "name": "(anonymous_9)",
                "line": 219,
                "loc": {
                    "start": {
                        "line": 219,
                        "column": 21
                    },
                    "end": {
                        "line": 219,
                        "column": 37
                    }
                }
            },
            "10": {
                "name": "(anonymous_10)",
                "line": 235,
                "loc": {
                    "start": {
                        "line": 235,
                        "column": 26
                    },
                    "end": {
                        "line": 235,
                        "column": 50
                    }
                }
            },
            "11": {
                "name": "(anonymous_11)",
                "line": 289,
                "loc": {
                    "start": {
                        "line": 289,
                        "column": 24
                    },
                    "end": {
                        "line": 289,
                        "column": 49
                    }
                }
            },
            "12": {
                "name": "(anonymous_12)",
                "line": 304,
                "loc": {
                    "start": {
                        "line": 304,
                        "column": 26
                    },
                    "end": {
                        "line": 304,
                        "column": 38
                    }
                }
            },
            "13": {
                "name": "(anonymous_13)",
                "line": 325,
                "loc": {
                    "start": {
                        "line": 325,
                        "column": 11
                    },
                    "end": {
                        "line": 325,
                        "column": 48
                    }
                }
            },
            "14": {
                "name": "NodeSortable",
                "line": 346,
                "loc": {
                    "start": {
                        "line": 346,
                        "column": 0
                    },
                    "end": {
                        "line": 346,
                        "column": 24
                    }
                }
            },
            "15": {
                "name": "(anonymous_15)",
                "line": 368,
                "loc": {
                    "start": {
                        "line": 368,
                        "column": 10
                    },
                    "end": {
                        "line": 368,
                        "column": 29
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 377,
                    "column": 40
                }
            },
            "2": {
                "start": {
                    "line": 38,
                    "column": 0
                },
                "end": {
                    "line": 38,
                    "column": 22
                }
            },
            "3": {
                "start": {
                    "line": 40,
                    "column": 0
                },
                "end": {
                    "line": 40,
                    "column": 22
                }
            },
            "4": {
                "start": {
                    "line": 42,
                    "column": 0
                },
                "end": {
                    "line": 329,
                    "column": 2
                }
            },
            "5": {
                "start": {
                    "line": 56,
                    "column": 8
                },
                "end": {
                    "line": 56,
                    "column": 79
                }
            },
            "6": {
                "start": {
                    "line": 58,
                    "column": 8
                },
                "end": {
                    "line": 66,
                    "column": 9
                }
            },
            "7": {
                "start": {
                    "line": 59,
                    "column": 12
                },
                "end": {
                    "line": 61,
                    "column": 13
                }
            },
            "8": {
                "start": {
                    "line": 60,
                    "column": 16
                },
                "end": {
                    "line": 60,
                    "column": 60
                }
            },
            "9": {
                "start": {
                    "line": 63,
                    "column": 12
                },
                "end": {
                    "line": 65,
                    "column": 13
                }
            },
            "10": {
                "start": {
                    "line": 64,
                    "column": 16
                },
                "end": {
                    "line": 64,
                    "column": 54
                }
            },
            "11": {
                "start": {
                    "line": 95,
                    "column": 8
                },
                "end": {
                    "line": 95,
                    "column": 76
                }
            },
            "12": {
                "start": {
                    "line": 110,
                    "column": 8
                },
                "end": {
                    "line": 110,
                    "column": 28
                }
            },
            "13": {
                "start": {
                    "line": 143,
                    "column": 8
                },
                "end": {
                    "line": 145,
                    "column": 9
                }
            },
            "14": {
                "start": {
                    "line": 144,
                    "column": 12
                },
                "end": {
                    "line": 144,
                    "column": 24
                }
            },
            "15": {
                "start": {
                    "line": 147,
                    "column": 8
                },
                "end": {
                    "line": 147,
                    "column": 34
                }
            },
            "16": {
                "start": {
                    "line": 149,
                    "column": 8
                },
                "end": {
                    "line": 161,
                    "column": 9
                }
            },
            "17": {
                "start": {
                    "line": 151,
                    "column": 12
                },
                "end": {
                    "line": 151,
                    "column": 54
                }
            },
            "18": {
                "start": {
                    "line": 153,
                    "column": 12
                },
                "end": {
                    "line": 153,
                    "column": 28
                }
            },
            "19": {
                "start": {
                    "line": 156,
                    "column": 12
                },
                "end": {
                    "line": 158,
                    "column": 15
                }
            },
            "20": {
                "start": {
                    "line": 157,
                    "column": 16
                },
                "end": {
                    "line": 157,
                    "column": 51
                }
            },
            "21": {
                "start": {
                    "line": 160,
                    "column": 12
                },
                "end": {
                    "line": 160,
                    "column": 24
                }
            },
            "22": {
                "start": {
                    "line": 163,
                    "column": 8
                },
                "end": {
                    "line": 164,
                    "column": 20
                }
            },
            "23": {
                "start": {
                    "line": 166,
                    "column": 8
                },
                "end": {
                    "line": 172,
                    "column": 9
                }
            },
            "24": {
                "start": {
                    "line": 167,
                    "column": 12
                },
                "end": {
                    "line": 167,
                    "column": 61
                }
            },
            "25": {
                "start": {
                    "line": 168,
                    "column": 15
                },
                "end": {
                    "line": 172,
                    "column": 9
                }
            },
            "26": {
                "start": {
                    "line": 169,
                    "column": 12
                },
                "end": {
                    "line": 169,
                    "column": 39
                }
            },
            "27": {
                "start": {
                    "line": 171,
                    "column": 12
                },
                "end": {
                    "line": 171,
                    "column": 39
                }
            },
            "28": {
                "start": {
                    "line": 174,
                    "column": 8
                },
                "end": {
                    "line": 174,
                    "column": 75
                }
            },
            "29": {
                "start": {
                    "line": 175,
                    "column": 8
                },
                "end": {
                    "line": 175,
                    "column": 34
                }
            },
            "30": {
                "start": {
                    "line": 177,
                    "column": 8
                },
                "end": {
                    "line": 183,
                    "column": 9
                }
            },
            "31": {
                "start": {
                    "line": 178,
                    "column": 12
                },
                "end": {
                    "line": 182,
                    "column": 15
                }
            },
            "32": {
                "start": {
                    "line": 185,
                    "column": 8
                },
                "end": {
                    "line": 185,
                    "column": 20
                }
            },
            "33": {
                "start": {
                    "line": 203,
                    "column": 8
                },
                "end": {
                    "line": 203,
                    "column": 44
                }
            },
            "34": {
                "start": {
                    "line": 220,
                    "column": 8
                },
                "end": {
                    "line": 220,
                    "column": 44
                }
            },
            "35": {
                "start": {
                    "line": 238,
                    "column": 8
                },
                "end": {
                    "line": 242,
                    "column": 89
                }
            },
            "36": {
                "start": {
                    "line": 244,
                    "column": 8
                },
                "end": {
                    "line": 246,
                    "column": 9
                }
            },
            "37": {
                "start": {
                    "line": 245,
                    "column": 12
                },
                "end": {
                    "line": 245,
                    "column": 23
                }
            },
            "38": {
                "start": {
                    "line": 253,
                    "column": 8
                },
                "end": {
                    "line": 255,
                    "column": 9
                }
            },
            "39": {
                "start": {
                    "line": 254,
                    "column": 12
                },
                "end": {
                    "line": 254,
                    "column": 37
                }
            },
            "40": {
                "start": {
                    "line": 257,
                    "column": 8
                },
                "end": {
                    "line": 258,
                    "column": 39
                }
            },
            "41": {
                "start": {
                    "line": 262,
                    "column": 8
                },
                "end": {
                    "line": 262,
                    "column": 19
                }
            },
            "42": {
                "start": {
                    "line": 264,
                    "column": 8
                },
                "end": {
                    "line": 272,
                    "column": 9
                }
            },
            "43": {
                "start": {
                    "line": 265,
                    "column": 12
                },
                "end": {
                    "line": 265,
                    "column": 38
                }
            },
            "44": {
                "start": {
                    "line": 267,
                    "column": 12
                },
                "end": {
                    "line": 271,
                    "column": 13
                }
            },
            "45": {
                "start": {
                    "line": 268,
                    "column": 16
                },
                "end": {
                    "line": 268,
                    "column": 33
                }
            },
            "46": {
                "start": {
                    "line": 270,
                    "column": 16
                },
                "end": {
                    "line": 270,
                    "column": 29
                }
            },
            "47": {
                "start": {
                    "line": 274,
                    "column": 8
                },
                "end": {
                    "line": 274,
                    "column": 19
                }
            },
            "48": {
                "start": {
                    "line": 290,
                    "column": 8
                },
                "end": {
                    "line": 292,
                    "column": 20
                }
            },
            "49": {
                "start": {
                    "line": 294,
                    "column": 8
                },
                "end": {
                    "line": 302,
                    "column": 9
                }
            },
            "50": {
                "start": {
                    "line": 295,
                    "column": 12
                },
                "end": {
                    "line": 295,
                    "column": 70
                }
            },
            "51": {
                "start": {
                    "line": 296,
                    "column": 15
                },
                "end": {
                    "line": 302,
                    "column": 9
                }
            },
            "52": {
                "start": {
                    "line": 297,
                    "column": 12
                },
                "end": {
                    "line": 297,
                    "column": 45
                }
            },
            "53": {
                "start": {
                    "line": 298,
                    "column": 12
                },
                "end": {
                    "line": 298,
                    "column": 30
                }
            },
            "54": {
                "start": {
                    "line": 300,
                    "column": 12
                },
                "end": {
                    "line": 300,
                    "column": 45
                }
            },
            "55": {
                "start": {
                    "line": 301,
                    "column": 12
                },
                "end": {
                    "line": 301,
                    "column": 30
                }
            },
            "56": {
                "start": {
                    "line": 304,
                    "column": 8
                },
                "end": {
                    "line": 306,
                    "column": 10
                }
            },
            "57": {
                "start": {
                    "line": 305,
                    "column": 12
                },
                "end": {
                    "line": 305,
                    "column": 56
                }
            },
            "58": {
                "start": {
                    "line": 308,
                    "column": 8
                },
                "end": {
                    "line": 308,
                    "column": 56
                }
            },
            "59": {
                "start": {
                    "line": 310,
                    "column": 8
                },
                "end": {
                    "line": 310,
                    "column": 31
                }
            },
            "60": {
                "start": {
                    "line": 326,
                    "column": 8
                },
                "end": {
                    "line": 327,
                    "column": 42
                }
            },
            "61": {
                "start": {
                    "line": 331,
                    "column": 0
                },
                "end": {
                    "line": 331,
                    "column": 27
                }
            },
            "62": {
                "start": {
                    "line": 346,
                    "column": 0
                },
                "end": {
                    "line": 346,
                    "column": 26
                }
            },
            "63": {
                "start": {
                    "line": 348,
                    "column": 0
                },
                "end": {
                    "line": 372,
                    "column": 2
                }
            },
            "64": {
                "start": {
                    "line": 369,
                    "column": 8
                },
                "end": {
                    "line": 369,
                    "column": 42
                }
            },
            "65": {
                "start": {
                    "line": 370,
                    "column": 8
                },
                "end": {
                    "line": 370,
                    "column": 20
                }
            },
            "66": {
                "start": {
                    "line": 374,
                    "column": 0
                },
                "end": {
                    "line": 374,
                    "column": 36
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 58,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 58,
                            "column": 8
                        },
                        "end": {
                            "line": 58,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 58,
                            "column": 8
                        },
                        "end": {
                            "line": 58,
                            "column": 8
                        }
                    }
                ]
            },
            "2": {
                "line": 59,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 59,
                            "column": 12
                        },
                        "end": {
                            "line": 59,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 59,
                            "column": 12
                        },
                        "end": {
                            "line": 59,
                            "column": 12
                        }
                    }
                ]
            },
            "3": {
                "line": 63,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 63,
                            "column": 12
                        },
                        "end": {
                            "line": 63,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 63,
                            "column": 12
                        },
                        "end": {
                            "line": 63,
                            "column": 12
                        }
                    }
                ]
            },
            "4": {
                "line": 143,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 143,
                            "column": 8
                        },
                        "end": {
                            "line": 143,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 143,
                            "column": 8
                        },
                        "end": {
                            "line": 143,
                            "column": 8
                        }
                    }
                ]
            },
            "5": {
                "line": 147,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 147,
                            "column": 8
                        },
                        "end": {
                            "line": 147,
                            "column": 15
                        }
                    },
                    {
                        "start": {
                            "line": 147,
                            "column": 20
                        },
                        "end": {
                            "line": 147,
                            "column": 32
                        }
                    }
                ]
            },
            "6": {
                "line": 149,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 149,
                            "column": 8
                        },
                        "end": {
                            "line": 149,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 149,
                            "column": 8
                        },
                        "end": {
                            "line": 149,
                            "column": 8
                        }
                    }
                ]
            },
            "7": {
                "line": 166,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 166,
                            "column": 8
                        },
                        "end": {
                            "line": 166,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 166,
                            "column": 8
                        },
                        "end": {
                            "line": 166,
                            "column": 8
                        }
                    }
                ]
            },
            "8": {
                "line": 168,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 168,
                            "column": 15
                        },
                        "end": {
                            "line": 168,
                            "column": 15
                        }
                    },
                    {
                        "start": {
                            "line": 168,
                            "column": 15
                        },
                        "end": {
                            "line": 168,
                            "column": 15
                        }
                    }
                ]
            },
            "9": {
                "line": 177,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 177,
                            "column": 8
                        },
                        "end": {
                            "line": 177,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 177,
                            "column": 8
                        },
                        "end": {
                            "line": 177,
                            "column": 8
                        }
                    }
                ]
            },
            "10": {
                "line": 203,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 203,
                            "column": 23
                        },
                        "end": {
                            "line": 203,
                            "column": 25
                        }
                    },
                    {
                        "start": {
                            "line": 203,
                            "column": 29
                        },
                        "end": {
                            "line": 203,
                            "column": 42
                        }
                    }
                ]
            },
            "11": {
                "line": 203,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 203,
                            "column": 37
                        },
                        "end": {
                            "line": 203,
                            "column": 38
                        }
                    },
                    {
                        "start": {
                            "line": 203,
                            "column": 41
                        },
                        "end": {
                            "line": 203,
                            "column": 42
                        }
                    }
                ]
            },
            "12": {
                "line": 220,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 220,
                            "column": 23
                        },
                        "end": {
                            "line": 220,
                            "column": 25
                        }
                    },
                    {
                        "start": {
                            "line": 220,
                            "column": 29
                        },
                        "end": {
                            "line": 220,
                            "column": 42
                        }
                    }
                ]
            },
            "13": {
                "line": 220,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 220,
                            "column": 37
                        },
                        "end": {
                            "line": 220,
                            "column": 38
                        }
                    },
                    {
                        "start": {
                            "line": 220,
                            "column": 41
                        },
                        "end": {
                            "line": 220,
                            "column": 42
                        }
                    }
                ]
            },
            "14": {
                "line": 242,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 242,
                            "column": 51
                        },
                        "end": {
                            "line": 242,
                            "column": 69
                        }
                    },
                    {
                        "start": {
                            "line": 242,
                            "column": 72
                        },
                        "end": {
                            "line": 242,
                            "column": 88
                        }
                    }
                ]
            },
            "15": {
                "line": 244,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 244,
                            "column": 8
                        },
                        "end": {
                            "line": 244,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 244,
                            "column": 8
                        },
                        "end": {
                            "line": 244,
                            "column": 8
                        }
                    }
                ]
            },
            "16": {
                "line": 253,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 253,
                            "column": 8
                        },
                        "end": {
                            "line": 253,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 253,
                            "column": 8
                        },
                        "end": {
                            "line": 253,
                            "column": 8
                        }
                    }
                ]
            },
            "17": {
                "line": 254,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 254,
                            "column": 29
                        },
                        "end": {
                            "line": 254,
                            "column": 30
                        }
                    },
                    {
                        "start": {
                            "line": 254,
                            "column": 33
                        },
                        "end": {
                            "line": 254,
                            "column": 36
                        }
                    }
                ]
            },
            "18": {
                "line": 257,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 257,
                            "column": 32
                        },
                        "end": {
                            "line": 257,
                            "column": 52
                        }
                    },
                    {
                        "start": {
                            "line": 257,
                            "column": 55
                        },
                        "end": {
                            "line": 257,
                            "column": 68
                        }
                    }
                ]
            },
            "19": {
                "line": 267,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 267,
                            "column": 12
                        },
                        "end": {
                            "line": 267,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 267,
                            "column": 12
                        },
                        "end": {
                            "line": 267,
                            "column": 12
                        }
                    }
                ]
            },
            "20": {
                "line": 294,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 294,
                            "column": 8
                        },
                        "end": {
                            "line": 294,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 294,
                            "column": 8
                        },
                        "end": {
                            "line": 294,
                            "column": 8
                        }
                    }
                ]
            },
            "21": {
                "line": 294,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 294,
                            "column": 12
                        },
                        "end": {
                            "line": 294,
                            "column": 19
                        }
                    },
                    {
                        "start": {
                            "line": 294,
                            "column": 23
                        },
                        "end": {
                            "line": 294,
                            "column": 45
                        }
                    }
                ]
            },
            "22": {
                "line": 296,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 296,
                            "column": 15
                        },
                        "end": {
                            "line": 296,
                            "column": 15
                        }
                    },
                    {
                        "start": {
                            "line": 296,
                            "column": 15
                        },
                        "end": {
                            "line": 296,
                            "column": 15
                        }
                    }
                ]
            },
            "23": {
                "line": 326,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 326,
                            "column": 30
                        },
                        "end": {
                            "line": 326,
                            "column": 47
                        }
                    },
                    {
                        "start": {
                            "line": 326,
                            "column": 50
                        },
                        "end": {
                            "line": 326,
                            "column": 60
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('tree-sortable', function (Y, NAME) {",
            "",
            "/*jshint expr:true, onevar:false */",
            "",
            "/**",
            "Extension for `Tree` that makes nodes sortable.",
            "",
            "@module tree",
            "@submodule tree-sortable",
            "@main tree-sortable",
            "**/",
            "",
            "/**",
            "Extension for `Tree` that makes nodes sortable.",
            "",
            "@class Tree.Sortable",
            "@constructor",
            "@param {Object} [config] Configuration options.",
            "@param {Function} [config.sortComparator] Default comparator function to use",
            "    when sorting a node's children if the node itself doesn't have a custom",
            "    comparator function. If not specified, insertion order will be used by",
            "    default.",
            "@param {Boolean} [config.sortReverse=false] If `true`, node children will be",
            "    sorted in reverse (descending) order by default. Otherwise they'll be sorted",
            "    in ascending order.",
            "@extensionfor Tree",
            "**/",
            "",
            "/**",
            "Fired after a node's children are re-sorted.",
            "",
            "@event sort",
            "@param {Tree.Node} node Node whose children were sorted.",
            "@param {Boolean} reverse `true` if the children were sorted in reverse",
            "    (descending) order, `false` otherwise.",
            "@param {String} src Source of the event.",
            "**/",
            "var EVT_SORT = 'sort';",
            "",
            "function Sortable() {}",
            "",
            "Sortable.prototype = {",
            "    // -- Public Properties ----------------------------------------------------",
            "",
            "    /**",
            "    If `true`, node children will be sorted in reverse (descending) order by",
            "    default. Otherwise they'll be sorted in ascending order.",
            "",
            "    @property {Boolean} sortReverse",
            "    @default false",
            "    **/",
            "    sortReverse: false,",
            "",
            "    // -- Lifecycle ------------------------------------------------------------",
            "    initializer: function (config) {",
            "        this.nodeExtensions = this.nodeExtensions.concat(Y.Tree.Node.Sortable);",
            "",
            "        if (config) {",
            "            if (config.sortComparator) {",
            "                this.sortComparator = config.sortComparator;",
            "            }",
            "",
            "            if ('sortReverse' in config) {",
            "                this.sortReverse = config.sortReverse;",
            "            }",
            "        }",
            "    },",
            "",
            "    // -- Public Methods -------------------------------------------------------",
            "",
            "    /**",
            "    Sorts the children of every node in this tree.",
            "",
            "    A `sort` event will be fired for each node whose children are sorted, which",
            "    can get very noisy. If this is a large tree, you may want to set the",
            "    `silent` option to `true` to suppress these events.",
            "",
            "    @method sort",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent] If `true`, no `sort` events will be",
            "            fired.",
            "        @param {Function} [options.sortComparator] Custom comparator function to",
            "            use. If specified, this will become the new comparator function for",
            "            each node, overwriting any previous comparator function that was set",
            "            for the node.",
            "        @param {Boolean} [options.sortReverse] If `true`, children will be",
            "            sorted in reverse (descending) order. Otherwise they'll be sorted in",
            "            ascending order. This will become each node's new sort order,",
            "            overwriting any previous sort order that was set for the node.",
            "        @param {String} [options.src] Source of the sort operation. Will be",
            "            passed along to the `sort` event facade.",
            "    @chainable",
            "    **/",
            "    sort: function (options) {",
            "        return this.sortNode(this.rootNode, Y.merge(options, {deep: true}));",
            "    },",
            "",
            "    /**",
            "    Default comparator function to use when sorting a node's children if the",
            "    node itself doesn't have a custom comparator function.",
            "",
            "    If not specified, insertion order will be used by default.",
            "",
            "    @method sortComparator",
            "    @param {Tree.Node} node Node being sorted.",
            "    @return {Number|String} Value by which the node should be sorted relative to",
            "        its siblings.",
            "    **/",
            "    sortComparator: function (node) {",
            "        return node.index();",
            "    },",
            "",
            "    /**",
            "    Sorts the children of the specified node.",
            "",
            "    By default, only the node's direct children are sorted. To sort all nodes in",
            "    the hierarchy (children, children's children, etc.), set the `deep` option",
            "    to `true`. If this is a very deep hierarchy, you may also want to set",
            "    `silent` to true to avoid generating a flood of `sort` events.",
            "",
            "    @method sortNode",
            "    @param {Tree.Node} node Node whose children should be sorted.",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.deep=false] If `true`, all of this node's",
            "            children (and their children, and so on) will be traversed and",
            "            re-sorted as well.",
            "        @param {Boolean} [options.silent] If `true`, no `sort` event will be",
            "            fired.",
            "        @param {Function} [options.sortComparator] Custom comparator function to",
            "            use. If specified, this will become the node's new comparator",
            "            function, overwriting any previous comparator function that was set",
            "            for the node.",
            "        @param {Boolean} [options.sortReverse] If `true`, children will be",
            "            sorted in reverse (descending) order. Otherwise they'll be sorted in",
            "            ascending order. This will become the node's new sort order,",
            "            overwriting any previous sort order that was set for the node.",
            "        @param {String} [options.src] Source of the sort operation. Will be",
            "            passed along to the `sort` event facade.",
            "    @chainable",
            "    **/",
            "    sortNode: function (node, options) {",
            "        // Nothing to do if the node has no children.",
            "        if (!node.children.length) {",
            "            return this;",
            "        }",
            "",
            "        options || (options = {});",
            "",
            "        if (options.deep) {",
            "            // Unset the `deep` option so we don't cause an infinite loop.",
            "            options = Y.merge(options, {deep: false});",
            "",
            "            var self = this;",
            "",
            "            // Traverse and sort all nodes (including this one).",
            "            this.traverseNode(node, function (nodeToSort) {",
            "                self.sortNode(nodeToSort, options);",
            "            });",
            "",
            "            return this;",
            "        }",
            "",
            "        var comparator = this._getSortComparator(node, options),",
            "            reverse;",
            "",
            "        if ('sortReverse' in options) {",
            "            reverse = node.sortReverse = options.sortReverse;",
            "        } else if ('sortReverse' in node) {",
            "            reverse = node.sortReverse;",
            "        } else {",
            "            reverse = this.sortReverse;",
            "        }",
            "",
            "        node.children.sort(Y.rbind(this._sort, this, comparator, reverse));",
            "        node._isIndexStale = true;",
            "",
            "        if (!options.silent) {",
            "            this.fire(EVT_SORT, {",
            "                node   : node,",
            "                reverse: !!reverse,",
            "                src    : options.src",
            "            });",
            "        }",
            "",
            "        return this;",
            "    },",
            "",
            "    // -- Protected Methods ----------------------------------------------------",
            "",
            "    /**",
            "    Compares value _a_ to value _b_ for sorting purposes.",
            "",
            "    Values are assumed to be the result of calling a sortComparator function.",
            "",
            "    @method _compare",
            "    @param {Mixed} a First value to compare.",
            "    @param {Mixed} b Second value to compare.",
            "    @return {Number} `-1` if _a_ should come before _b_, `0` if they're",
            "        equivalent, `1` if _a_ should come after _b_.",
            "    @protected",
            "    **/",
            "    _compare: function (a, b) {",
            "        return a < b ? -1 : (a > b ? 1 : 0);",
            "    },",
            "",
            "    /**",
            "    Compares value _a_ to value _b_ for sorting purposes, but sorts them in",
            "    reverse (descending) order.",
            "",
            "    Values are assumed to be the result of calling a sortComparator function.",
            "",
            "    @method _compareReverse",
            "    @param {Mixed} a First value to compare.",
            "    @param {Mixed} b Second value to compare.",
            "    @return {Number} `-1` if _a_ should come before _b_, `0` if they're",
            "        equivalent, `1` if _a_ should come after _b_.",
            "    @protected",
            "    **/",
            "    _compareReverse: function (a, b) {",
            "        return b < a ? -1 : (b > a ? 1 : 0);",
            "    },",
            "",
            "    /**",
            "    Overrides `Tree#_getDefaultNodeIndex()` to provide insertion-time sorting",
            "    for nodes inserted without an explicit index.",
            "",
            "    @method _getDefaultNodeIndex",
            "    @param {Tree.Node} parent Parent node.",
            "    @param {Tree.Node} node Node being inserted.",
            "    @param {Object} [options] Options passed to `insertNode()`.",
            "    @return {Number} Index at which _node_ should be inserted into _parent_'s",
            "        `children` array.",
            "    @protected",
            "    **/",
            "    _getDefaultNodeIndex: function (parent, node) {",
            "        /*jshint bitwise:false */",
            "",
            "        var children   = parent.children,",
            "            comparator = this._getSortComparator(parent),",
            "            max        = children.length,",
            "            min        = 0,",
            "            reverse    = 'sortReverse' in parent ? parent.sortReverse : this.sortReverse;",
            "",
            "        if (!max) {",
            "            return max;",
            "        }",
            "",
            "        // Special case: if the sortComparator is the default sortComparator,",
            "        // cheat and just return the first or last index of the children array.",
            "        //",
            "        // This is necessary because the default sortComparator relies on",
            "        // the node's index, which is always -1 for uninserted nodes.",
            "        if (comparator._unboundComparator === Sortable.prototype.sortComparator) {",
            "            return reverse ? 0 : max;",
            "        }",
            "",
            "        var compare = reverse ? this._compareReverse : this._compare,",
            "            needle  = comparator(node);",
            "",
            "        // Perform an iterative binary search to determine the correct position",
            "        // for the node based on the return value of the comparator function.",
            "        var middle;",
            "",
            "        while (min < max) {",
            "            middle = (min + max) >> 1; // Divide by two and discard remainder.",
            "",
            "            if (compare(comparator(children[middle]), needle) < 0) {",
            "                min = middle + 1;",
            "            } else {",
            "                max = middle;",
            "            }",
            "        }",
            "",
            "        return min;",
            "    },",
            "",
            "    /**",
            "    Returns a sort comparator function derived from the given _node_ and",
            "    _options_, and bound to the correct `thisObj` based on where it was found.",
            "",
            "    @method _getSortComparator",
            "    @param {Tree.Node} node Node on which to look for a `sortComparator`",
            "        function.",
            "    @param {Object} [options] Options object on which to look for a",
            "        `sortComparator` function.",
            "    @return {Function} Properly bound sort comparator function.",
            "    @protected",
            "    **/",
            "    _getSortComparator: function (node, options) {",
            "        var boundComparator,",
            "            comparator,",
            "            thisObj;",
            "",
            "        if (options && options.sortComparator) {",
            "            comparator = node.sortComparator = options.sortComparator;",
            "        } else if (node.sortComparator) {",
            "            comparator = node.sortComparator;",
            "            thisObj    = node;",
            "        } else {",
            "            comparator = this.sortComparator;",
            "            thisObj    = this;",
            "        }",
            "",
            "        boundComparator = function () {",
            "            return comparator.apply(thisObj, arguments);",
            "        };",
            "",
            "        boundComparator._unboundComparator = comparator;",
            "",
            "        return boundComparator;",
            "    },",
            "",
            "    /**",
            "    Array sort function used by `sortNode()` to re-sort a node's children.",
            "",
            "    @method _sort",
            "    @param {Tree.Node} a First node to compare.",
            "    @param {Tree.Node} b Second node to compare.",
            "    @param {Function} comparator Comparator function.",
            "    @param {Boolean} [reverse=false] If `true`, this will be a reverse",
            "        (descending) comparison.",
            "    @return {Number} `-1` if _a_ is less than _b_, `0` if equal, `1` if greater.",
            "    @protected",
            "    **/",
            "    _sort: function (a, b, comparator, reverse) {",
            "        return this[reverse ? '_compareReverse' : '_compare'](",
            "            comparator(a), comparator(b));",
            "    }",
            "};",
            "",
            "Y.Tree.Sortable = Sortable;",
            "/**",
            "@module tree",
            "@submodule tree-sortable",
            "**/",
            "",
            "/**",
            "`Tree.Node` extension that adds methods useful for nodes in trees that use the",
            "`Tree.Sortable` extension.",
            "",
            "@class Tree.Node.Sortable",
            "@constructor",
            "@extensionfor Tree.Node",
            "**/",
            "",
            "function NodeSortable() {}",
            "",
            "NodeSortable.prototype = {",
            "    /**",
            "    Sorts this node's children.",
            "",
            "    @method sort",
            "    @param {Object} [options] Options.",
            "        @param {Boolean} [options.silent] If `true`, no `sort` event will be",
            "            fired.",
            "        @param {Function} [options.sortComparator] Custom comparator function to",
            "            use. If specified, this will become the node's new comparator",
            "            function, overwriting any previous comparator function that was set",
            "            for the node.",
            "        @param {Boolean} [options.sortReverse] If `true`, children will be",
            "            sorted in reverse (descending) order. Otherwise they'll be sorted in",
            "            ascending order. This will become the node's new sort order,",
            "            overwriting any previous sort order that was set for the node.",
            "        @param {String} [options.src] Source of the sort operation. Will be",
            "            passed along to the `sort` event facade.",
            "    @chainable",
            "    **/",
            "    sort: function (options) {",
            "        this.tree.sortNode(this, options);",
            "        return this;",
            "    }",
            "};",
            "",
            "Y.Tree.Node.Sortable = NodeSortable;",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"tree\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "38": 1,
            "40": 1,
            "42": 1,
            "56": 26,
            "58": 26,
            "59": 17,
            "60": 4,
            "63": 17,
            "64": 3,
            "95": 1,
            "110": 14,
            "143": 46,
            "144": 24,
            "147": 22,
            "149": 22,
            "151": 2,
            "153": 2,
            "156": 2,
            "157": 32,
            "160": 2,
            "163": 20,
            "166": 20,
            "167": 1,
            "168": 19,
            "169": 0,
            "171": 19,
            "174": 20,
            "175": 20,
            "177": 20,
            "178": 19,
            "185": 20,
            "203": 41,
            "220": 33,
            "238": 66,
            "244": 66,
            "245": 21,
            "253": 45,
            "254": 29,
            "257": 16,
            "262": 16,
            "264": 16,
            "265": 27,
            "267": 27,
            "268": 11,
            "270": 16,
            "274": 16,
            "290": 86,
            "294": 86,
            "295": 2,
            "296": 84,
            "297": 11,
            "298": 11,
            "300": 73,
            "301": 73,
            "304": 86,
            "305": 137,
            "308": 86,
            "310": 86,
            "326": 47,
            "331": 1,
            "346": 1,
            "348": 1,
            "369": 2,
            "370": 2,
            "374": 1
        }
    }
}