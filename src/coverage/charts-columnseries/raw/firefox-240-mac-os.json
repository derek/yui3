{
    "build/series-column/series-column.js": {
        "path": "build/series-column/series-column.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 59,
            "4": 59,
            "5": 1,
            "6": 1,
            "7": 58,
            "8": 58,
            "9": 59,
            "10": 62,
            "11": 57,
            "12": 57,
            "13": 57,
            "14": 57,
            "15": 57,
            "16": 57,
            "17": 57,
            "18": 57,
            "19": 57,
            "20": 171,
            "21": 171,
            "22": 171,
            "23": 171,
            "24": 27,
            "25": 171,
            "26": 57,
            "27": 171,
            "28": 171,
            "29": 114,
            "30": 114,
            "31": 111
        },
        "b": {
            "1": [
                1,
                58
            ],
            "2": [
                57,
                5
            ],
            "3": [
                62,
                62
            ],
            "4": [
                19,
                38
            ],
            "5": [
                57,
                38
            ],
            "6": [
                27,
                144
            ],
            "7": [
                114,
                57
            ],
            "8": [
                111,
                3
            ],
            "9": [
                114,
                111
            ]
        },
        "f": {
            "1": 1,
            "2": 59,
            "3": 62
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 25
                    },
                    "end": {
                        "line": 1,
                        "column": 44
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 33,
                "loc": {
                    "start": {
                        "line": 33,
                        "column": 26
                    },
                    "end": {
                        "line": 34,
                        "column": 4
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 59,
                "loc": {
                    "start": {
                        "line": 59,
                        "column": 23
                    },
                    "end": {
                        "line": 60,
                        "column": 4
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 160,
                    "column": 74
                }
            },
            "2": {
                "start": {
                    "line": 21,
                    "column": 0
                },
                "end": {
                    "line": 157,
                    "column": 3
                }
            },
            "3": {
                "start": {
                    "line": 35,
                    "column": 8
                },
                "end": {
                    "line": 37,
                    "column": 10
                }
            },
            "4": {
                "start": {
                    "line": 38,
                    "column": 8
                },
                "end": {
                    "line": 47,
                    "column": 9
                }
            },
            "5": {
                "start": {
                    "line": 40,
                    "column": 12
                },
                "end": {
                    "line": 40,
                    "column": 32
                }
            },
            "6": {
                "start": {
                    "line": 41,
                    "column": 12
                },
                "end": {
                    "line": 41,
                    "column": 68
                }
            },
            "7": {
                "start": {
                    "line": 45,
                    "column": 12
                },
                "end": {
                    "line": 45,
                    "column": 44
                }
            },
            "8": {
                "start": {
                    "line": 46,
                    "column": 12
                },
                "end": {
                    "line": 46,
                    "column": 64
                }
            },
            "9": {
                "start": {
                    "line": 48,
                    "column": 8
                },
                "end": {
                    "line": 48,
                    "column": 22
                }
            },
            "10": {
                "start": {
                    "line": 61,
                    "column": 8
                },
                "end": {
                    "line": 110,
                    "column": 9
                }
            },
            "11": {
                "start": {
                    "line": 63,
                    "column": 12
                },
                "end": {
                    "line": 79,
                    "column": 23
                }
            },
            "12": {
                "start": {
                    "line": 80,
                    "column": 12
                },
                "end": {
                    "line": 80,
                    "column": 104
                }
            },
            "13": {
                "start": {
                    "line": 81,
                    "column": 12
                },
                "end": {
                    "line": 81,
                    "column": 85
                }
            },
            "14": {
                "start": {
                    "line": 82,
                    "column": 12
                },
                "end": {
                    "line": 82,
                    "column": 89
                }
            },
            "15": {
                "start": {
                    "line": 83,
                    "column": 12
                },
                "end": {
                    "line": 83,
                    "column": 93
                }
            },
            "16": {
                "start": {
                    "line": 84,
                    "column": 12
                },
                "end": {
                    "line": 84,
                    "column": 56
                }
            },
            "17": {
                "start": {
                    "line": 85,
                    "column": 12
                },
                "end": {
                    "line": 85,
                    "column": 77
                }
            },
            "18": {
                "start": {
                    "line": 86,
                    "column": 12
                },
                "end": {
                    "line": 86,
                    "column": 37
                }
            },
            "19": {
                "start": {
                    "line": 87,
                    "column": 12
                },
                "end": {
                    "line": 97,
                    "column": 13
                }
            },
            "20": {
                "start": {
                    "line": 89,
                    "column": 16
                },
                "end": {
                    "line": 89,
                    "column": 48
                }
            },
            "21": {
                "start": {
                    "line": 90,
                    "column": 16
                },
                "end": {
                    "line": 90,
                    "column": 72
                }
            },
            "22": {
                "start": {
                    "line": 91,
                    "column": 16
                },
                "end": {
                    "line": 91,
                    "column": 74
                }
            },
            "23": {
                "start": {
                    "line": 92,
                    "column": 16
                },
                "end": {
                    "line": 95,
                    "column": 17
                }
            },
            "24": {
                "start": {
                    "line": 94,
                    "column": 20
                },
                "end": {
                    "line": 94,
                    "column": 40
                }
            },
            "25": {
                "start": {
                    "line": 96,
                    "column": 16
                },
                "end": {
                    "line": 96,
                    "column": 39
                }
            },
            "26": {
                "start": {
                    "line": 98,
                    "column": 12
                },
                "end": {
                    "line": 109,
                    "column": 13
                }
            },
            "27": {
                "start": {
                    "line": 100,
                    "column": 16
                },
                "end": {
                    "line": 100,
                    "column": 61
                }
            },
            "28": {
                "start": {
                    "line": 101,
                    "column": 16
                },
                "end": {
                    "line": 108,
                    "column": 17
                }
            },
            "29": {
                "start": {
                    "line": 103,
                    "column": 20
                },
                "end": {
                    "line": 103,
                    "column": 42
                }
            },
            "30": {
                "start": {
                    "line": 104,
                    "column": 20
                },
                "end": {
                    "line": 107,
                    "column": 21
                }
            },
            "31": {
                "start": {
                    "line": 106,
                    "column": 24
                },
                "end": {
                    "line": 106,
                    "column": 66
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 38,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 38,
                            "column": 8
                        },
                        "end": {
                            "line": 38,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 38,
                            "column": 8
                        },
                        "end": {
                            "line": 38,
                            "column": 8
                        }
                    }
                ]
            },
            "2": {
                "line": 61,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 61,
                            "column": 8
                        },
                        "end": {
                            "line": 61,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 61,
                            "column": 8
                        },
                        "end": {
                            "line": 61,
                            "column": 8
                        }
                    }
                ]
            },
            "3": {
                "line": 61,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 61,
                            "column": 11
                        },
                        "end": {
                            "line": 61,
                            "column": 24
                        }
                    },
                    {
                        "start": {
                            "line": 61,
                            "column": 28
                        },
                        "end": {
                            "line": 61,
                            "column": 44
                        }
                    }
                ]
            },
            "4": {
                "line": 80,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 80,
                            "column": 63
                        },
                        "end": {
                            "line": 80,
                            "column": 78
                        }
                    },
                    {
                        "start": {
                            "line": 80,
                            "column": 81
                        },
                        "end": {
                            "line": 80,
                            "column": 103
                        }
                    }
                ]
            },
            "5": {
                "line": 80,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 80,
                            "column": 27
                        },
                        "end": {
                            "line": 80,
                            "column": 42
                        }
                    },
                    {
                        "start": {
                            "line": 80,
                            "column": 46
                        },
                        "end": {
                            "line": 80,
                            "column": 60
                        }
                    }
                ]
            },
            "6": {
                "line": 92,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 92,
                            "column": 16
                        },
                        "end": {
                            "line": 92,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 92,
                            "column": 16
                        },
                        "end": {
                            "line": 92,
                            "column": 16
                        }
                    }
                ]
            },
            "7": {
                "line": 101,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 101,
                            "column": 16
                        },
                        "end": {
                            "line": 101,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 101,
                            "column": 16
                        },
                        "end": {
                            "line": 101,
                            "column": 16
                        }
                    }
                ]
            },
            "8": {
                "line": 104,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 104,
                            "column": 20
                        },
                        "end": {
                            "line": 104,
                            "column": 20
                        }
                    },
                    {
                        "start": {
                            "line": 104,
                            "column": 20
                        },
                        "end": {
                            "line": 104,
                            "column": 20
                        }
                    }
                ]
            },
            "9": {
                "line": 104,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 104,
                            "column": 23
                        },
                        "end": {
                            "line": 104,
                            "column": 31
                        }
                    },
                    {
                        "start": {
                            "line": 104,
                            "column": 35
                        },
                        "end": {
                            "line": 104,
                            "column": 57
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('series-column', function (Y, NAME) {",
            "",
            "/**",
            " * Provides functionality for creating a column series.",
            " *",
            " * @module charts",
            " * @submodule series-column",
            " */",
            "/**",
            " * The ColumnSeries class renders columns positioned horizontally along a category or time axis. The columns'",
            " * lengths are proportional to the values they represent along a vertical axis.",
            " * and the relevant data points.",
            " *",
            " * @class ColumnSeries",
            " * @extends MarkerSeries",
            " * @uses Histogram",
            " * @constructor",
            " * @param {Object} config (optional) Configuration parameters.",
            " * @submodule series-column",
            " */",
            "Y.ColumnSeries = Y.Base.create(\"columnSeries\", Y.MarkerSeries, [Y.Histogram], {",
            "    /**",
            "     * Helper method for calculating the size of markers.",
            "     *",
            "     * @method _getMarkerDimensions",
            "     * @param {Number} xcoord The x-coordinate representing the data point for the marker.",
            "     * @param {Number} ycoord The y-coordinate representing the data point for the marker.",
            "     * @param {Number} calculatedSize The calculated size for the marker. For a `BarSeries` is it the width. For a `ColumnSeries` it is the height.",
            "     * @param {Number} offset Distance of position offset dictated by other marker series in the same graph.",
            "     * @return Object",
            "     * @private",
            "     */",
            "    _getMarkerDimensions: function(xcoord, ycoord, calculatedSize, offset)",
            "    {",
            "        var config = {",
            "            left: xcoord + offset",
            "        };",
            "        if(this._bottomOrigin >= ycoord)",
            "        {",
            "            config.top = ycoord;",
            "            config.calculatedSize = this._bottomOrigin - config.top;",
            "        }",
            "        else",
            "        {",
            "            config.top = this._bottomOrigin;",
            "            config.calculatedSize = ycoord - this._bottomOrigin;",
            "        }",
            "        return config;",
            "    },",
            "",
            "    /**",
            "     * Resizes and positions markers based on a mouse interaction.",
            "     *",
            "     * @method updateMarkerState",
            "     * @param {String} type state of the marker",
            "     * @param {Number} i index of the marker",
            "     * @protected",
            "     */",
            "    updateMarkerState: function(type, i)",
            "    {",
            "        if(this._markers && this._markers[i])",
            "        {",
            "            var styles = Y.clone(this.get(\"styles\").marker),",
            "                markerStyles,",
            "                state = this._getState(type),",
            "                xcoords = this.get(\"xcoords\"),",
            "                ycoords = this.get(\"ycoords\"),",
            "                marker = this._markers[i],",
            "                markers,",
            "                seriesStyles,",
            "                seriesCollection = this.get(\"seriesTypeCollection\"),",
            "                seriesLen = seriesCollection.length,",
            "                seriesSize = 0,",
            "                offset = 0,",
            "                renderer,",
            "                n = 0,",
            "                xs = [],",
            "                order = this.get(\"order\"),",
            "                config;",
            "            markerStyles = state === \"off\" || !styles[state] ? Y.clone(styles) : Y.clone(styles[state]);",
            "            markerStyles.fill.color = this._getItemColor(markerStyles.fill.color, i);",
            "            markerStyles.border.color = this._getItemColor(markerStyles.border.color, i);",
            "            config = this._getMarkerDimensions(xcoords[i], ycoords[i], styles.width, offset);",
            "            markerStyles.height = config.calculatedSize;",
            "            markerStyles.width = Math.min(this._maxSize, markerStyles.width);",
            "            marker.set(markerStyles);",
            "            for(; n < seriesLen; ++n)",
            "            {",
            "                xs[n] = xcoords[i] + seriesSize;",
            "                seriesStyles = seriesCollection[n].get(\"styles\").marker;",
            "                seriesSize += Math.min(this._maxSize, seriesStyles.width);",
            "                if(order > n)",
            "                {",
            "                    offset = seriesSize;",
            "                }",
            "                offset -= seriesSize/2;",
            "            }",
            "            for(n = 0; n < seriesLen; ++n)",
            "            {",
            "                markers = seriesCollection[n].get(\"markers\");",
            "                if(markers)",
            "                {",
            "                    renderer = markers[i];",
            "                    if(renderer && renderer !== undefined)",
            "                    {",
            "                        renderer.set(\"x\", (xs[n] - seriesSize/2));",
            "                    }",
            "                }",
            "            }",
            "        }",
            "    }",
            "}, {",
            "    ATTRS: {",
            "        /**",
            "         * Read-only attribute indicating the type of series.",
            "         *",
            "         * @attribute type",
            "         * @type String",
            "         * @readOnly",
            "         * @default column",
            "         */",
            "        type: {",
            "            value: \"column\"",
            "        }",
            "",
            "        /**",
            "         * Style properties used for drawing markers. This attribute is inherited from `MarkerSeries`. Below are the default values:",
            "         *  <dl>",
            "         *      <dt>fill</dt><dd>A hash containing the following values:",
            "         *          <dl>",
            "         *              <dt>color</dt><dd>Color of the fill. The default value is determined by the order of the series on the graph. The color",
            "         *              will be retrieved from the below array:<br/>",
            "         *              `[\"#66007f\", \"#a86f41\", \"#295454\", \"#996ab2\", \"#e8cdb7\", \"#90bdbd\",\"#000000\",\"#c3b8ca\", \"#968373\", \"#678585\"]`",
            "         *              </dd>",
            "         *              <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker fill. The default value is 1.</dd>",
            "         *          </dl>",
            "         *      </dd>",
            "         *      <dt>border</dt><dd>A hash containing the following values:",
            "         *          <dl>",
            "         *              <dt>color</dt><dd>Color of the border. The default value is determined by the order of the series on the graph. The color",
            "         *              will be retrieved from the below array:<br/>",
            "         *              `[\"#205096\", \"#b38206\", \"#000000\", \"#94001e\", \"#9d6fa0\", \"#e55b00\", \"#5e85c9\", \"#adab9e\", \"#6ac291\", \"#006457\"]`",
            "         *              <dt>alpha</dt><dd>Number from 0 to 1 indicating the opacity of the marker border. The default value is 1.</dd>",
            "         *              <dt>weight</dt><dd>Number indicating the width of the border. The default value is 1.</dd>",
            "         *          </dl>",
            "         *      </dd>",
            "         *      <dt>width</dt><dd>indicates the width of the marker. The default value is 12.</dd>",
            "         *      <dt>over</dt><dd>hash containing styles for markers when highlighted by a `mouseover` event. The default",
            "         *      values for each style is null. When an over style is not set, the non-over value will be used. For example,",
            "         *      the default value for `marker.over.fill.color` is equivalent to `marker.fill.color`.</dd>",
            "         *  </dl>",
            "         *",
            "         * @attribute styles",
            "         * @type Object",
            "         */",
            "    }",
            "});",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"series-marker\", \"series-histogram-base\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "21": 1,
            "35": 59,
            "38": 59,
            "40": 1,
            "41": 1,
            "45": 58,
            "46": 58,
            "48": 59,
            "61": 62,
            "63": 57,
            "80": 57,
            "81": 57,
            "82": 57,
            "83": 57,
            "84": 57,
            "85": 57,
            "86": 57,
            "87": 57,
            "89": 171,
            "90": 171,
            "91": 171,
            "92": 171,
            "94": 27,
            "96": 171,
            "98": 57,
            "100": 171,
            "101": 171,
            "103": 114,
            "104": 114,
            "106": 111
        }
    }
}