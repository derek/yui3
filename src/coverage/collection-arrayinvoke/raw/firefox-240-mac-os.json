{
    "build/array-invoke/array-invoke.js": {
        "path": "build/array-invoke/array-invoke.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 7,
            "4": 7,
            "5": 25,
            "6": 14,
            "7": 7
        },
        "b": {
            "1": [
                14,
                11
            ],
            "2": [
                25,
                22
            ]
        },
        "f": {
            "1": 1,
            "2": 7,
            "3": 25
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 24
                    },
                    "end": {
                        "line": 1,
                        "column": 43
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 25,
                "loc": {
                    "start": {
                        "line": 25,
                        "column": 17
                    },
                    "end": {
                        "line": 25,
                        "column": 39
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 30,
                "loc": {
                    "start": {
                        "line": 30,
                        "column": 33
                    },
                    "end": {
                        "line": 30,
                        "column": 51
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 40,
                    "column": 44
                }
            },
            "2": {
                "start": {
                    "line": 25,
                    "column": 0
                },
                "end": {
                    "line": 37,
                    "column": 2
                }
            },
            "3": {
                "start": {
                    "line": 26,
                    "column": 4
                },
                "end": {
                    "line": 28,
                    "column": 17
                }
            },
            "4": {
                "start": {
                    "line": 30,
                    "column": 4
                },
                "end": {
                    "line": 34,
                    "column": 7
                }
            },
            "5": {
                "start": {
                    "line": 31,
                    "column": 8
                },
                "end": {
                    "line": 33,
                    "column": 9
                }
            },
            "6": {
                "start": {
                    "line": 32,
                    "column": 12
                },
                "end": {
                    "line": 32,
                    "column": 50
                }
            },
            "7": {
                "start": {
                    "line": 36,
                    "column": 4
                },
                "end": {
                    "line": 36,
                    "column": 15
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 31,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 31,
                            "column": 8
                        },
                        "end": {
                            "line": 31,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 31,
                            "column": 8
                        },
                        "end": {
                            "line": 31,
                            "column": 8
                        }
                    }
                ]
            },
            "2": {
                "line": 31,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 31,
                            "column": 12
                        },
                        "end": {
                            "line": 31,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 31,
                            "column": 20
                        },
                        "end": {
                            "line": 31,
                            "column": 42
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('array-invoke', function (Y, NAME) {",
            "",
            "/**",
            "@module collection",
            "@submodule array-invoke",
            "*/",
            "",
            "/**",
            "Executes a named method on each item in an array of objects. Items in the array",
            "that do not have a function by that name will be skipped.",
            "",
            "@example",
            "",
            "    Y.Array.invoke(arrayOfDrags, 'plug', Y.Plugin.DDProxy);",
            "",
            "@method invoke",
            "@param {Array} items Array of objects supporting the named method.",
            "@param {String} name the name of the method to execute on each item.",
            "@param {Any} [args*] Any number of additional args are passed as parameters to",
            "  the execution of the named method.",
            "@return {Array} All return values, indexed according to the item index.",
            "@static",
            "@for Array",
            "**/",
            "Y.Array.invoke = function(items, name) {",
            "    var args = Y.Array(arguments, 2, true),",
            "        isFunction = Y.Lang.isFunction,",
            "        ret = [];",
            "",
            "    Y.Array.each(Y.Array(items), function(item, i) {",
            "        if (item && isFunction(item[name])) {",
            "            ret[i] = item[name].apply(item, args);",
            "        }",
            "    });",
            "",
            "    return ret;",
            "};",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"yui-base\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "25": 1,
            "26": 7,
            "30": 7,
            "31": 25,
            "32": 14,
            "36": 7
        }
    }
}