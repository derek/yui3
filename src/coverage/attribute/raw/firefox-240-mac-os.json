{
    "build/attribute-base/attribute-base.js": {
        "path": "build/attribute-base/attribute-base.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 16,
            "4": 16,
            "5": 16,
            "6": 1,
            "7": 1,
            "8": 1,
            "9": 1,
            "10": 1,
            "11": 1,
            "12": 1
        },
        "b": {},
        "f": {
            "1": 1,
            "2": 16
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 26
                    },
                    "end": {
                        "line": 1,
                        "column": 45
                    }
                }
            },
            "2": {
                "name": "Attribute",
                "line": 56,
                "loc": {
                    "start": {
                        "line": 56,
                        "column": 4
                    },
                    "end": {
                        "line": 56,
                        "column": 25
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 110,
                    "column": 94
                }
            },
            "2": {
                "start": {
                    "line": 56,
                    "column": 4
                },
                "end": {
                    "line": 60,
                    "column": 5
                }
            },
            "3": {
                "start": {
                    "line": 57,
                    "column": 8
                },
                "end": {
                    "line": 57,
                    "column": 47
                }
            },
            "4": {
                "start": {
                    "line": 58,
                    "column": 8
                },
                "end": {
                    "line": 58,
                    "column": 53
                }
            },
            "5": {
                "start": {
                    "line": 59,
                    "column": 8
                },
                "end": {
                    "line": 59,
                    "column": 49
                }
            },
            "6": {
                "start": {
                    "line": 62,
                    "column": 4
                },
                "end": {
                    "line": 62,
                    "column": 54
                }
            },
            "7": {
                "start": {
                    "line": 63,
                    "column": 4
                },
                "end": {
                    "line": 63,
                    "column": 56
                }
            },
            "8": {
                "start": {
                    "line": 66,
                    "column": 4
                },
                "end": {
                    "line": 66,
                    "column": 59
                }
            },
            "9": {
                "start": {
                    "line": 80,
                    "column": 4
                },
                "end": {
                    "line": 80,
                    "column": 60
                }
            },
            "10": {
                "start": {
                    "line": 94,
                    "column": 4
                },
                "end": {
                    "line": 94,
                    "column": 92
                }
            },
            "11": {
                "start": {
                    "line": 105,
                    "column": 4
                },
                "end": {
                    "line": 105,
                    "column": 58
                }
            },
            "12": {
                "start": {
                    "line": 107,
                    "column": 4
                },
                "end": {
                    "line": 107,
                    "column": 28
                }
            }
        },
        "branchMap": {},
        "code": [
            "(function () { YUI.add('attribute-base', function (Y, NAME) {",
            "",
            "    /**",
            "     * The attribute module provides an augmentable Attribute implementation, which",
            "     * adds configurable attributes and attribute change events to the class being",
            "     * augmented. It also provides a State class, which is used internally by Attribute,",
            "     * but can also be used independently to provide a name/property/value data structure to",
            "     * store state.",
            "     *",
            "     * @module attribute",
            "     */",
            "",
            "    /**",
            "     * The attribute-base submodule provides core attribute handling support, with everything",
            "     * aside from complex attribute handling in the provider's constructor.",
            "     *",
            "     * @module attribute",
            "     * @submodule attribute-base",
            "     */",
            "",
            "    /**",
            "     * <p>",
            "     * Attribute provides configurable attribute support along with attribute change events. It is designed to be",
            "     * augmented on to a host class, and provides the host with the ability to configure attributes to store and retrieve state,",
            "     * along with attribute change events.",
            "     * </p>",
            "     * <p>For example, attributes added to the host can be configured:</p>",
            "     * <ul>",
            "     *     <li>As read only.</li>",
            "     *     <li>As write once.</li>",
            "     *     <li>With a setter function, which can be used to manipulate",
            "     *     values passed to Attribute's <a href=\"#method_set\">set</a> method, before they are stored.</li>",
            "     *     <li>With a getter function, which can be used to manipulate stored values,",
            "     *     before they are returned by Attribute's <a href=\"#method_get\">get</a> method.</li>",
            "     *     <li>With a validator function, to validate values before they are stored.</li>",
            "     * </ul>",
            "     *",
            "     * <p>See the <a href=\"#method_addAttr\">addAttr</a> method, for the complete set of configuration",
            "     * options available for attributes.</p>",
            "     *",
            "     * <p><strong>NOTE:</strong> Most implementations will be better off extending the <a href=\"Base.html\">Base</a> class,",
            "     * instead of augmenting Attribute directly. Base augments Attribute and will handle the initial configuration",
            "     * of attributes for derived classes, accounting for values passed into the constructor.</p>",
            "     *",
            "     * @class Attribute",
            "     * @param attrs {Object} The attributes to add during construction (passed through to <a href=\"#method_addAttrs\">addAttrs</a>).",
            "     *        These can also be defined on the constructor being augmented with Attribute by defining the ATTRS property on the constructor.",
            "     * @param values {Object} The initial attribute values to apply (passed through to <a href=\"#method_addAttrs\">addAttrs</a>).",
            "     *        These are not merged/cloned. The caller is responsible for isolating user provided values if required.",
            "     * @param lazy {boolean} Whether or not to add attributes lazily (passed through to <a href=\"#method_addAttrs\">addAttrs</a>).",
            "     * @uses AttributeCore",
            "     * @uses AttributeObservable",
            "     * @uses EventTarget",
            "     * @uses AttributeExtras",
            "     */",
            "    function Attribute() {",
            "        Y.AttributeCore.apply(this, arguments);",
            "        Y.AttributeObservable.apply(this, arguments);",
            "        Y.AttributeExtras.apply(this, arguments);",
            "    }",
            "",
            "    Y.mix(Attribute, Y.AttributeCore, false, null, 1);",
            "    Y.mix(Attribute, Y.AttributeExtras, false, null, 1);",
            "",
            "    // Needs to be `true`, to overwrite methods from AttributeCore",
            "    Y.mix(Attribute, Y.AttributeObservable, true, null, 1);",
            "",
            "    /**",
            "     * <p>The value to return from an attribute setter in order to prevent the set from going through.</p>",
            "     *",
            "     * <p>You can return this value from your setter if you wish to combine validator and setter",
            "     * functionality into a single setter function, which either returns the massaged value to be stored or",
            "     * AttributeCore.INVALID_VALUE to prevent invalid values from being stored.</p>",
            "     *",
            "     * @property INVALID_VALUE",
            "     * @type Object",
            "     * @static",
            "     * @final",
            "     */",
            "    Attribute.INVALID_VALUE = Y.AttributeCore.INVALID_VALUE;",
            "",
            "    /**",
            "     * The list of properties which can be configured for",
            "     * each attribute (e.g. setter, getter, writeOnce etc.).",
            "     *",
            "     * This property is used internally as a whitelist for faster",
            "     * Y.mix operations.",
            "     *",
            "     * @property _ATTR_CFG",
            "     * @type Array",
            "     * @static",
            "     * @protected",
            "     */",
            "    Attribute._ATTR_CFG = Y.AttributeCore._ATTR_CFG.concat(Y.AttributeObservable._ATTR_CFG);",
            "",
            "    /**",
            "     * Utility method to protect an attribute configuration hash, by merging the",
            "     * entire object and the individual attr config objects.",
            "     *",
            "     * @method protectAttrs",
            "     * @static",
            "     * @param {Object} attrs A hash of attribute to configuration object pairs.",
            "     * @return {Object} A protected version of the `attrs` argument.",
            "     */",
            "    Attribute.protectAttrs = Y.AttributeCore.protectAttrs;",
            "",
            "    Y.Attribute = Attribute;",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"attribute-core\", \"attribute-observable\", \"attribute-extras\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "56": 1,
            "57": 16,
            "58": 16,
            "59": 16,
            "62": 1,
            "63": 1,
            "66": 1,
            "80": 1,
            "94": 1,
            "105": 1,
            "107": 1
        }
    },
    "build/attribute-complex/attribute-complex.js": {
        "path": "build/attribute-complex/attribute-complex.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1
        },
        "b": {},
        "f": {
            "1": 1,
            "2": 0
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 29
                    },
                    "end": {
                        "line": 1,
                        "column": 48
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 14,
                "loc": {
                    "start": {
                        "line": 14,
                        "column": 24
                    },
                    "end": {
                        "line": 14,
                        "column": 35
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 56,
                    "column": 50
                }
            },
            "2": {
                "start": {
                    "line": 12,
                    "column": 4
                },
                "end": {
                    "line": 12,
                    "column": 32
                }
            },
            "3": {
                "start": {
                    "line": 14,
                    "column": 4
                },
                "end": {
                    "line": 14,
                    "column": 38
                }
            },
            "4": {
                "start": {
                    "line": 15,
                    "column": 4
                },
                "end": {
                    "line": 50,
                    "column": 6
                }
            },
            "5": {
                "start": {
                    "line": 53,
                    "column": 4
                },
                "end": {
                    "line": 53,
                    "column": 43
                }
            }
        },
        "branchMap": {},
        "code": [
            "(function () { YUI.add('attribute-complex', function (Y, NAME) {",
            "",
            "    /**",
            "     * Adds support for attribute providers to handle complex attributes in the constructor",
            "     *",
            "     * @module attribute",
            "     * @submodule attribute-complex",
            "     * @for Attribute",
            "     * @deprecated AttributeComplex's overrides are now part of AttributeCore.",
            "     */",
            "",
            "    var Attribute = Y.Attribute;",
            "",
            "    Attribute.Complex = function() {};",
            "    Attribute.Complex.prototype = {",
            "",
            "        /**",
            "         * Utility method to split out simple attribute name/value pairs (\"x\")",
            "         * from complex attribute name/value pairs (\"x.y.z\"), so that complex",
            "         * attributes can be keyed by the top level attribute name.",
            "         *",
            "         * @method _normAttrVals",
            "         * @param {Object} valueHash An object with attribute name/value pairs",
            "         *",
            "         * @return {Object} An object literal with 2 properties - \"simple\" and \"complex\",",
            "         * containing simple and complex attribute values respectively keyed",
            "         * by the top level attribute name, or null, if valueHash is falsey.",
            "         *",
            "         * @private",
            "         */",
            "        _normAttrVals : Attribute.prototype._normAttrVals,",
            "",
            "        /**",
            "         * Returns the initial value of the given attribute from",
            "         * either the default configuration provided, or the",
            "         * over-ridden value if it exists in the set of initValues",
            "         * provided and the attribute is not read-only.",
            "         *",
            "         * @param {String} attr The name of the attribute",
            "         * @param {Object} cfg The attribute configuration object",
            "         * @param {Object} initValues The object with simple and complex attribute name/value pairs returned from _normAttrVals",
            "         *",
            "         * @return {Any} The initial value of the attribute.",
            "         *",
            "         * @method _getAttrInitVal",
            "         * @private",
            "         */",
            "        _getAttrInitVal : Attribute.prototype._getAttrInitVal",
            "",
            "    };",
            "",
            "    // Consistency with the rest of the Attribute addons for now.",
            "    Y.AttributeComplex = Attribute.Complex;",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"attribute-base\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "12": 1,
            "14": 1,
            "15": 1,
            "53": 1
        }
    }
}