{
    "build/history-base/history-base.js": {
        "path": "build/history-base/history-base.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 28,
            "5": 1,
            "6": 1,
            "7": 1,
            "8": 1,
            "9": 139,
            "10": 1,
            "11": 1,
            "12": 1,
            "13": 1,
            "14": 1,
            "15": 1,
            "16": 28,
            "17": 28,
            "18": 28,
            "19": 28,
            "20": 28,
            "21": 28,
            "22": 2,
            "23": 6,
            "24": 6,
            "25": 6,
            "26": 5,
            "27": 5,
            "28": 5,
            "29": 43,
            "30": 43,
            "31": 16,
            "32": 27,
            "33": 7,
            "34": 7,
            "35": 7,
            "36": 5,
            "37": 5,
            "38": 5,
            "39": 23,
            "40": 23,
            "41": 17,
            "42": 23,
            "43": 23,
            "44": 30,
            "45": 30,
            "46": 29,
            "47": 30,
            "48": 8,
            "49": 29,
            "50": 8,
            "51": 31,
            "52": 31,
            "53": 31,
            "54": 31,
            "55": 29,
            "56": 34,
            "57": 34,
            "58": 29,
            "59": 29,
            "60": 29,
            "61": 13,
            "62": 8,
            "63": 8,
            "64": 8,
            "65": 2,
            "66": 31,
            "67": 30,
            "68": 30,
            "69": 30,
            "70": 1
        },
        "b": {
            "1": [
                1,
                0
            ],
            "2": [
                1,
                1,
                1,
                1,
                0,
                1,
                0
            ],
            "3": [
                1,
                0,
                1,
                0
            ],
            "4": [
                28,
                23
            ],
            "5": [
                28,
                28,
                26
            ],
            "6": [
                2,
                26
            ],
            "7": [
                16,
                27
            ],
            "8": [
                16,
                0
            ],
            "9": [
                16,
                16
            ],
            "10": [
                25,
                2
            ],
            "11": [
                4,
                19
            ],
            "12": [
                17,
                6
            ],
            "13": [
                23,
                19,
                17
            ],
            "14": [
                31,
                0
            ],
            "15": [
                31,
                8
            ],
            "16": [
                29,
                2
            ],
            "17": [
                31,
                29
            ],
            "18": [
                29,
                5
            ],
            "19": [
                8,
                5
            ],
            "20": [
                13,
                8
            ],
            "21": [
                30,
                1
            ],
            "22": [
                31,
                1
            ],
            "23": [
                30,
                0
            ]
        },
        "f": {
            "1": 1,
            "2": 28,
            "3": 139,
            "4": 28,
            "5": 6,
            "6": 5,
            "7": 43,
            "8": 7,
            "9": 5,
            "10": 23,
            "11": 30,
            "12": 29,
            "13": 8,
            "14": 29,
            "15": 8,
            "16": 31,
            "17": 34,
            "18": 13,
            "19": 30,
            "20": 30
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 24
                    },
                    "end": {
                        "line": 1,
                        "column": 43
                    }
                }
            },
            "2": {
                "name": "HistoryBase",
                "line": 57,
                "loc": {
                    "start": {
                        "line": 57,
                        "column": 0
                    },
                    "end": {
                        "line": 57,
                        "column": 23
                    }
                }
            },
            "3": {
                "name": "_isSimpleObject",
                "line": 83,
                "loc": {
                    "start": {
                        "line": 83,
                        "column": 0
                    },
                    "end": {
                        "line": 83,
                        "column": 32
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 168,
                "loc": {
                    "start": {
                        "line": 168,
                        "column": 11
                    },
                    "end": {
                        "line": 168,
                        "column": 29
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 295,
                "loc": {
                    "start": {
                        "line": 295,
                        "column": 9
                    },
                    "end": {
                        "line": 295,
                        "column": 21
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 315,
                "loc": {
                    "start": {
                        "line": 315,
                        "column": 14
                    },
                    "end": {
                        "line": 315,
                        "column": 45
                    }
                }
            },
            "7": {
                "name": "(anonymous_7)",
                "line": 331,
                "loc": {
                    "start": {
                        "line": 331,
                        "column": 9
                    },
                    "end": {
                        "line": 331,
                        "column": 24
                    }
                }
            },
            "8": {
                "name": "(anonymous_8)",
                "line": 353,
                "loc": {
                    "start": {
                        "line": 353,
                        "column": 13
                    },
                    "end": {
                        "line": 353,
                        "column": 25
                    }
                }
            },
            "9": {
                "name": "(anonymous_9)",
                "line": 371,
                "loc": {
                    "start": {
                        "line": 371,
                        "column": 18
                    },
                    "end": {
                        "line": 371,
                        "column": 49
                    }
                }
            },
            "10": {
                "name": "(anonymous_10)",
                "line": 392,
                "loc": {
                    "start": {
                        "line": 392,
                        "column": 13
                    },
                    "end": {
                        "line": 392,
                        "column": 44
                    }
                }
            },
            "11": {
                "name": "(anonymous_11)",
                "line": 416,
                "loc": {
                    "start": {
                        "line": 416,
                        "column": 17
                    },
                    "end": {
                        "line": 416,
                        "column": 50
                    }
                }
            },
            "12": {
                "name": "(anonymous_12)",
                "line": 428,
                "loc": {
                    "start": {
                        "line": 428,
                        "column": 34
                    },
                    "end": {
                        "line": 428,
                        "column": 56
                    }
                }
            },
            "13": {
                "name": "(anonymous_13)",
                "line": 432,
                "loc": {
                    "start": {
                        "line": 432,
                        "column": 34
                    },
                    "end": {
                        "line": 432,
                        "column": 56
                    }
                }
            },
            "14": {
                "name": "(anonymous_14)",
                "line": 448,
                "loc": {
                    "start": {
                        "line": 448,
                        "column": 22
                    },
                    "end": {
                        "line": 448,
                        "column": 49
                    }
                }
            },
            "15": {
                "name": "(anonymous_15)",
                "line": 506,
                "loc": {
                    "start": {
                        "line": 506,
                        "column": 22
                    },
                    "end": {
                        "line": 506,
                        "column": 49
                    }
                }
            },
            "16": {
                "name": "(anonymous_16)",
                "line": 559,
                "loc": {
                    "start": {
                        "line": 559,
                        "column": 21
                    },
                    "end": {
                        "line": 559,
                        "column": 55
                    }
                }
            },
            "17": {
                "name": "(anonymous_17)",
                "line": 570,
                "loc": {
                    "start": {
                        "line": 570,
                        "column": 31
                    },
                    "end": {
                        "line": 570,
                        "column": 54
                    }
                }
            },
            "18": {
                "name": "(anonymous_18)",
                "line": 584,
                "loc": {
                    "start": {
                        "line": 584,
                        "column": 32
                    },
                    "end": {
                        "line": 584,
                        "column": 56
                    }
                }
            },
            "19": {
                "name": "(anonymous_19)",
                "line": 617,
                "loc": {
                    "start": {
                        "line": 617,
                        "column": 17
                    },
                    "end": {
                        "line": 617,
                        "column": 42
                    }
                }
            },
            "20": {
                "name": "(anonymous_20)",
                "line": 632,
                "loc": {
                    "start": {
                        "line": 632,
                        "column": 18
                    },
                    "end": {
                        "line": 632,
                        "column": 31
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 640,
                    "column": 56
                }
            },
            "2": {
                "start": {
                    "line": 43,
                    "column": 0
                },
                "end": {
                    "line": 55,
                    "column": 32
                }
            },
            "3": {
                "start": {
                    "line": 57,
                    "column": 0
                },
                "end": {
                    "line": 59,
                    "column": 1
                }
            },
            "4": {
                "start": {
                    "line": 58,
                    "column": 4
                },
                "end": {
                    "line": 58,
                    "column": 38
                }
            },
            "5": {
                "start": {
                    "line": 61,
                    "column": 0
                },
                "end": {
                    "line": 66,
                    "column": 3
                }
            },
            "6": {
                "start": {
                    "line": 68,
                    "column": 0
                },
                "end": {
                    "line": 70,
                    "column": 1
                }
            },
            "7": {
                "start": {
                    "line": 69,
                    "column": 4
                },
                "end": {
                    "line": 69,
                    "column": 26
                }
            },
            "8": {
                "start": {
                    "line": 83,
                    "column": 0
                },
                "end": {
                    "line": 85,
                    "column": 1
                }
            },
            "9": {
                "start": {
                    "line": 84,
                    "column": 4
                },
                "end": {
                    "line": 84,
                    "column": 41
                }
            },
            "10": {
                "start": {
                    "line": 96,
                    "column": 0
                },
                "end": {
                    "line": 96,
                    "column": 33
                }
            },
            "11": {
                "start": {
                    "line": 107,
                    "column": 0
                },
                "end": {
                    "line": 107,
                    "column": 30
                }
            },
            "12": {
                "start": {
                    "line": 118,
                    "column": 0
                },
                "end": {
                    "line": 118,
                    "column": 38
                }
            },
            "13": {
                "start": {
                    "line": 131,
                    "column": 0
                },
                "end": {
                    "line": 133,
                    "column": 48
                }
            },
            "14": {
                "start": {
                    "line": 154,
                    "column": 0
                },
                "end": {
                    "line": 155,
                    "column": 34
                }
            },
            "15": {
                "start": {
                    "line": 157,
                    "column": 0
                },
                "end": {
                    "line": 635,
                    "column": 9
                }
            },
            "16": {
                "start": {
                    "line": 169,
                    "column": 8
                },
                "end": {
                    "line": 169,
                    "column": 25
                }
            },
            "17": {
                "start": {
                    "line": 180,
                    "column": 8
                },
                "end": {
                    "line": 180,
                    "column": 45
                }
            },
            "18": {
                "start": {
                    "line": 190,
                    "column": 9
                },
                "end": {
                    "line": 190,
                    "column": 37
                }
            },
            "19": {
                "start": {
                    "line": 204,
                    "column": 8
                },
                "end": {
                    "line": 205,
                    "column": 44
                }
            },
            "20": {
                "start": {
                    "line": 254,
                    "column": 8
                },
                "end": {
                    "line": 257,
                    "column": 11
                }
            },
            "21": {
                "start": {
                    "line": 260,
                    "column": 8
                },
                "end": {
                    "line": 262,
                    "column": 9
                }
            },
            "22": {
                "start": {
                    "line": 261,
                    "column": 12
                },
                "end": {
                    "line": 261,
                    "column": 39
                }
            },
            "23": {
                "start": {
                    "line": 296,
                    "column": 8
                },
                "end": {
                    "line": 296,
                    "column": 46
                }
            },
            "24": {
                "start": {
                    "line": 297,
                    "column": 8
                },
                "end": {
                    "line": 297,
                    "column": 30
                }
            },
            "25": {
                "start": {
                    "line": 298,
                    "column": 8
                },
                "end": {
                    "line": 298,
                    "column": 46
                }
            },
            "26": {
                "start": {
                    "line": 316,
                    "column": 8
                },
                "end": {
                    "line": 316,
                    "column": 23
                }
            },
            "27": {
                "start": {
                    "line": 317,
                    "column": 8
                },
                "end": {
                    "line": 317,
                    "column": 27
                }
            },
            "28": {
                "start": {
                    "line": 318,
                    "column": 8
                },
                "end": {
                    "line": 318,
                    "column": 53
                }
            },
            "29": {
                "start": {
                    "line": 332,
                    "column": 8
                },
                "end": {
                    "line": 333,
                    "column": 46
                }
            },
            "30": {
                "start": {
                    "line": 335,
                    "column": 8
                },
                "end": {
                    "line": 339,
                    "column": 9
                }
            },
            "31": {
                "start": {
                    "line": 336,
                    "column": 12
                },
                "end": {
                    "line": 336,
                    "column": 77
                }
            },
            "32": {
                "start": {
                    "line": 338,
                    "column": 12
                },
                "end": {
                    "line": 338,
                    "column": 61
                }
            },
            "33": {
                "start": {
                    "line": 354,
                    "column": 8
                },
                "end": {
                    "line": 354,
                    "column": 46
                }
            },
            "34": {
                "start": {
                    "line": 355,
                    "column": 8
                },
                "end": {
                    "line": 355,
                    "column": 34
                }
            },
            "35": {
                "start": {
                    "line": 356,
                    "column": 8
                },
                "end": {
                    "line": 356,
                    "column": 46
                }
            },
            "36": {
                "start": {
                    "line": 372,
                    "column": 8
                },
                "end": {
                    "line": 372,
                    "column": 23
                }
            },
            "37": {
                "start": {
                    "line": 373,
                    "column": 8
                },
                "end": {
                    "line": 373,
                    "column": 27
                }
            },
            "38": {
                "start": {
                    "line": 374,
                    "column": 8
                },
                "end": {
                    "line": 374,
                    "column": 57
                }
            },
            "39": {
                "start": {
                    "line": 393,
                    "column": 8
                },
                "end": {
                    "line": 393,
                    "column": 80
                }
            },
            "40": {
                "start": {
                    "line": 395,
                    "column": 8
                },
                "end": {
                    "line": 398,
                    "column": 9
                }
            },
            "41": {
                "start": {
                    "line": 397,
                    "column": 12
                },
                "end": {
                    "line": 397,
                    "column": 53
                }
            },
            "42": {
                "start": {
                    "line": 400,
                    "column": 8
                },
                "end": {
                    "line": 400,
                    "column": 50
                }
            },
            "43": {
                "start": {
                    "line": 401,
                    "column": 8
                },
                "end": {
                    "line": 401,
                    "column": 20
                }
            },
            "44": {
                "start": {
                    "line": 418,
                    "column": 8
                },
                "end": {
                    "line": 425,
                    "column": 11
                }
            },
            "45": {
                "start": {
                    "line": 428,
                    "column": 8
                },
                "end": {
                    "line": 430,
                    "column": 17
                }
            },
            "46": {
                "start": {
                    "line": 429,
                    "column": 12
                },
                "end": {
                    "line": 429,
                    "column": 51
                }
            },
            "47": {
                "start": {
                    "line": 432,
                    "column": 8
                },
                "end": {
                    "line": 434,
                    "column": 17
                }
            },
            "48": {
                "start": {
                    "line": 433,
                    "column": 12
                },
                "end": {
                    "line": 433,
                    "column": 51
                }
            },
            "49": {
                "start": {
                    "line": 489,
                    "column": 8
                },
                "end": {
                    "line": 493,
                    "column": 11
                }
            },
            "50": {
                "start": {
                    "line": 540,
                    "column": 8
                },
                "end": {
                    "line": 543,
                    "column": 11
                }
            },
            "51": {
                "start": {
                    "line": 560,
                    "column": 8
                },
                "end": {
                    "line": 563,
                    "column": 27
                }
            },
            "52": {
                "start": {
                    "line": 565,
                    "column": 8
                },
                "end": {
                    "line": 565,
                    "column": 36
                }
            },
            "53": {
                "start": {
                    "line": 566,
                    "column": 8
                },
                "end": {
                    "line": 566,
                    "column": 36
                }
            },
            "54": {
                "start": {
                    "line": 568,
                    "column": 8
                },
                "end": {
                    "line": 593,
                    "column": 9
                }
            },
            "55": {
                "start": {
                    "line": 570,
                    "column": 12
                },
                "end": {
                    "line": 581,
                    "column": 21
                }
            },
            "56": {
                "start": {
                    "line": 571,
                    "column": 16
                },
                "end": {
                    "line": 571,
                    "column": 45
                }
            },
            "57": {
                "start": {
                    "line": 573,
                    "column": 16
                },
                "end": {
                    "line": 580,
                    "column": 17
                }
            },
            "58": {
                "start": {
                    "line": 574,
                    "column": 20
                },
                "end": {
                    "line": 577,
                    "column": 22
                }
            },
            "59": {
                "start": {
                    "line": 579,
                    "column": 20
                },
                "end": {
                    "line": 579,
                    "column": 37
                }
            },
            "60": {
                "start": {
                    "line": 584,
                    "column": 12
                },
                "end": {
                    "line": 590,
                    "column": 21
                }
            },
            "61": {
                "start": {
                    "line": 585,
                    "column": 16
                },
                "end": {
                    "line": 589,
                    "column": 17
                }
            },
            "62": {
                "start": {
                    "line": 586,
                    "column": 20
                },
                "end": {
                    "line": 586,
                    "column": 41
                }
            },
            "63": {
                "start": {
                    "line": 587,
                    "column": 20
                },
                "end": {
                    "line": 587,
                    "column": 43
                }
            },
            "64": {
                "start": {
                    "line": 588,
                    "column": 20
                },
                "end": {
                    "line": 588,
                    "column": 37
                }
            },
            "65": {
                "start": {
                    "line": 592,
                    "column": 12
                },
                "end": {
                    "line": 592,
                    "column": 47
                }
            },
            "66": {
                "start": {
                    "line": 595,
                    "column": 8
                },
                "end": {
                    "line": 602,
                    "column": 9
                }
            },
            "67": {
                "start": {
                    "line": 596,
                    "column": 12
                },
                "end": {
                    "line": 601,
                    "column": 24
                }
            },
            "68": {
                "start": {
                    "line": 620,
                    "column": 8
                },
                "end": {
                    "line": 620,
                    "column": 42
                }
            },
            "69": {
                "start": {
                    "line": 633,
                    "column": 8
                },
                "end": {
                    "line": 633,
                    "column": 54
                }
            },
            "70": {
                "start": {
                    "line": 637,
                    "column": 0
                },
                "end": {
                    "line": 637,
                    "column": 28
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 68,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 68,
                            "column": 0
                        },
                        "end": {
                            "line": 68,
                            "column": 0
                        }
                    },
                    {
                        "start": {
                            "line": 68,
                            "column": 0
                        },
                        "end": {
                            "line": 68,
                            "column": 0
                        }
                    }
                ]
            },
            "2": {
                "line": 131,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 131,
                            "column": 23
                        },
                        "end": {
                            "line": 131,
                            "column": 34
                        }
                    },
                    {
                        "start": {
                            "line": 131,
                            "column": 38
                        },
                        "end": {
                            "line": 131,
                            "column": 59
                        }
                    },
                    {
                        "start": {
                            "line": 132,
                            "column": 8
                        },
                        "end": {
                            "line": 132,
                            "column": 32
                        }
                    },
                    {
                        "start": {
                            "line": 132,
                            "column": 37
                        },
                        "end": {
                            "line": 132,
                            "column": 56
                        }
                    },
                    {
                        "start": {
                            "line": 132,
                            "column": 60
                        },
                        "end": {
                            "line": 132,
                            "column": 75
                        }
                    },
                    {
                        "start": {
                            "line": 133,
                            "column": 9
                        },
                        "end": {
                            "line": 133,
                            "column": 22
                        }
                    },
                    {
                        "start": {
                            "line": 133,
                            "column": 26
                        },
                        "end": {
                            "line": 133,
                            "column": 45
                        }
                    }
                ]
            },
            "3": {
                "line": 154,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 154,
                            "column": 32
                        },
                        "end": {
                            "line": 154,
                            "column": 53
                        }
                    },
                    {
                        "start": {
                            "line": 154,
                            "column": 57
                        },
                        "end": {
                            "line": 154,
                            "column": 78
                        }
                    },
                    {
                        "start": {
                            "line": 155,
                            "column": 9
                        },
                        "end": {
                            "line": 155,
                            "column": 17
                        }
                    },
                    {
                        "start": {
                            "line": 155,
                            "column": 21
                        },
                        "end": {
                            "line": 155,
                            "column": 32
                        }
                    }
                ]
            },
            "4": {
                "line": 180,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 180,
                            "column": 32
                        },
                        "end": {
                            "line": 180,
                            "column": 38
                        }
                    },
                    {
                        "start": {
                            "line": 180,
                            "column": 42
                        },
                        "end": {
                            "line": 180,
                            "column": 44
                        }
                    }
                ]
            },
            "5": {
                "line": 204,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 204,
                            "column": 44
                        },
                        "end": {
                            "line": 204,
                            "column": 62
                        }
                    },
                    {
                        "start": {
                            "line": 205,
                            "column": 16
                        },
                        "end": {
                            "line": 205,
                            "column": 35
                        }
                    },
                    {
                        "start": {
                            "line": 205,
                            "column": 39
                        },
                        "end": {
                            "line": 205,
                            "column": 43
                        }
                    }
                ]
            },
            "6": {
                "line": 260,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 260,
                            "column": 8
                        },
                        "end": {
                            "line": 260,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 260,
                            "column": 8
                        },
                        "end": {
                            "line": 260,
                            "column": 8
                        }
                    }
                ]
            },
            "7": {
                "line": 335,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 335,
                            "column": 8
                        },
                        "end": {
                            "line": 335,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 335,
                            "column": 8
                        },
                        "end": {
                            "line": 335,
                            "column": 8
                        }
                    }
                ]
            },
            "8": {
                "line": 336,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 336,
                            "column": 54
                        },
                        "end": {
                            "line": 336,
                            "column": 64
                        }
                    },
                    {
                        "start": {
                            "line": 336,
                            "column": 67
                        },
                        "end": {
                            "line": 336,
                            "column": 76
                        }
                    }
                ]
            },
            "9": {
                "line": 336,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 336,
                            "column": 19
                        },
                        "end": {
                            "line": 336,
                            "column": 27
                        }
                    },
                    {
                        "start": {
                            "line": 336,
                            "column": 31
                        },
                        "end": {
                            "line": 336,
                            "column": 51
                        }
                    }
                ]
            },
            "10": {
                "line": 338,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 338,
                            "column": 30
                        },
                        "end": {
                            "line": 338,
                            "column": 52
                        }
                    },
                    {
                        "start": {
                            "line": 338,
                            "column": 55
                        },
                        "end": {
                            "line": 338,
                            "column": 60
                        }
                    }
                ]
            },
            "11": {
                "line": 393,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 393,
                            "column": 28
                        },
                        "end": {
                            "line": 393,
                            "column": 61
                        }
                    },
                    {
                        "start": {
                            "line": 393,
                            "column": 64
                        },
                        "end": {
                            "line": 393,
                            "column": 79
                        }
                    }
                ]
            },
            "12": {
                "line": 395,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 395,
                            "column": 8
                        },
                        "end": {
                            "line": 395,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 395,
                            "column": 8
                        },
                        "end": {
                            "line": 395,
                            "column": 8
                        }
                    }
                ]
            },
            "13": {
                "line": 395,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 395,
                            "column": 12
                        },
                        "end": {
                            "line": 395,
                            "column": 25
                        }
                    },
                    {
                        "start": {
                            "line": 395,
                            "column": 29
                        },
                        "end": {
                            "line": 395,
                            "column": 51
                        }
                    },
                    {
                        "start": {
                            "line": 396,
                            "column": 16
                        },
                        "end": {
                            "line": 396,
                            "column": 49
                        }
                    }
                ]
            },
            "14": {
                "line": 565,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 565,
                            "column": 8
                        },
                        "end": {
                            "line": 565,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 565,
                            "column": 21
                        },
                        "end": {
                            "line": 565,
                            "column": 34
                        }
                    }
                ]
            },
            "15": {
                "line": 566,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 566,
                            "column": 8
                        },
                        "end": {
                            "line": 566,
                            "column": 15
                        }
                    },
                    {
                        "start": {
                            "line": 566,
                            "column": 21
                        },
                        "end": {
                            "line": 566,
                            "column": 34
                        }
                    }
                ]
            },
            "16": {
                "line": 568,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 568,
                            "column": 8
                        },
                        "end": {
                            "line": 568,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 568,
                            "column": 8
                        },
                        "end": {
                            "line": 568,
                            "column": 8
                        }
                    }
                ]
            },
            "17": {
                "line": 568,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 568,
                            "column": 12
                        },
                        "end": {
                            "line": 568,
                            "column": 37
                        }
                    },
                    {
                        "start": {
                            "line": 568,
                            "column": 41
                        },
                        "end": {
                            "line": 568,
                            "column": 67
                        }
                    }
                ]
            },
            "18": {
                "line": 573,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 573,
                            "column": 16
                        },
                        "end": {
                            "line": 573,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 573,
                            "column": 16
                        },
                        "end": {
                            "line": 573,
                            "column": 16
                        }
                    }
                ]
            },
            "19": {
                "line": 585,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 585,
                            "column": 16
                        },
                        "end": {
                            "line": 585,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 585,
                            "column": 16
                        },
                        "end": {
                            "line": 585,
                            "column": 16
                        }
                    }
                ]
            },
            "20": {
                "line": 585,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 585,
                            "column": 20
                        },
                        "end": {
                            "line": 585,
                            "column": 44
                        }
                    },
                    {
                        "start": {
                            "line": 585,
                            "column": 48
                        },
                        "end": {
                            "line": 585,
                            "column": 70
                        }
                    }
                ]
            },
            "21": {
                "line": 595,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 595,
                            "column": 8
                        },
                        "end": {
                            "line": 595,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 595,
                            "column": 8
                        },
                        "end": {
                            "line": 595,
                            "column": 8
                        }
                    }
                ]
            },
            "22": {
                "line": 595,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 595,
                            "column": 12
                        },
                        "end": {
                            "line": 595,
                            "column": 21
                        }
                    },
                    {
                        "start": {
                            "line": 595,
                            "column": 25
                        },
                        "end": {
                            "line": 595,
                            "column": 35
                        }
                    }
                ]
            },
            "23": {
                "line": 620,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 620,
                            "column": 27
                        },
                        "end": {
                            "line": 620,
                            "column": 35
                        }
                    },
                    {
                        "start": {
                            "line": 620,
                            "column": 39
                        },
                        "end": {
                            "line": 620,
                            "column": 41
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('history-base', function (Y, NAME) {",
            "",
            "/**",
            " * Provides browser history management functionality using a simple",
            " * add/replace/get paradigm. This can be used to ensure that the browser's back",
            " * and forward buttons work as the user expects and to provide bookmarkable URLs",
            " * that return the user to the current application state, even in an Ajax",
            " * application that doesn't perform full-page refreshes.",
            " *",
            " * @module history",
            " * @main history",
            " * @since 3.2.0",
            " */",
            "",
            "/**",
            " * Provides global state management backed by an object, but with no browser",
            " * history integration. For actual browser history integration and back/forward",
            " * support, use the history-html5 or history-hash modules.",
            " *",
            " * @module history",
            " * @submodule history-base",
            " * @class HistoryBase",
            " * @uses EventTarget",
            " * @constructor",
            " * @param {Object} config (optional) configuration object, which may contain",
            " *   zero or more of the following properties:",
            " *",
            " * <dl>",
            " *   <dt>force (Boolean)</dt>",
            " *   <dd>",
            " *     If `true`, a `history:change` event will be fired whenever the URL",
            " *     changes, even if there is no associated state change. Default is `false`.",
            " *   </dd>",
            " *",
            " *   <dt>initialState (Object)</dt>",
            " *   <dd>",
            " *     Initial state to set, as an object hash of key/value pairs. This will be",
            " *     merged into the current global state.",
            " *   </dd>",
            " * </dl>",
            " */",
            "",
            "var Lang      = Y.Lang,",
            "    Obj       = Y.Object,",
            "    GlobalEnv = YUI.namespace('Env.History'),",
            "    YArray    = Y.Array,",
            "",
            "    doc       = Y.config.doc,",
            "    docMode   = doc.documentMode,",
            "    win       = Y.config.win,",
            "",
            "    DEFAULT_OPTIONS = {merge: true},",
            "    EVT_CHANGE      = 'change',",
            "    SRC_ADD         = 'add',",
            "    SRC_REPLACE     = 'replace';",
            "",
            "function HistoryBase() {",
            "    this._init.apply(this, arguments);",
            "}",
            "",
            "Y.augment(HistoryBase, Y.EventTarget, null, null, {",
            "    emitFacade : true,",
            "    prefix     : 'history',",
            "    preventable: false,",
            "    queueable  : true",
            "});",
            "",
            "if (!GlobalEnv._state) {",
            "    GlobalEnv._state = {};",
            "}",
            "",
            "// -- Private Methods ----------------------------------------------------------",
            "",
            "/**",
            " * Returns <code>true</code> if <i>value</i> is a simple object and not a",
            " * function or an array.",
            " *",
            " * @method _isSimpleObject",
            " * @param {mixed} value",
            " * @return {Boolean}",
            " * @private",
            " */",
            "function _isSimpleObject(value) {",
            "    return Lang.type(value) === 'object';",
            "}",
            "",
            "// -- Public Static Properties -------------------------------------------------",
            "",
            "/**",
            " * Name of this component.",
            " *",
            " * @property NAME",
            " * @type String",
            " * @static",
            " */",
            "HistoryBase.NAME = 'historyBase';",
            "",
            "/**",
            " * Constant used to identify state changes originating from the",
            " * <code>add()</code> method.",
            " *",
            " * @property SRC_ADD",
            " * @type String",
            " * @static",
            " * @final",
            " */",
            "HistoryBase.SRC_ADD = SRC_ADD;",
            "",
            "/**",
            " * Constant used to identify state changes originating from the",
            " * <code>replace()</code> method.",
            " *",
            " * @property SRC_REPLACE",
            " * @type String",
            " * @static",
            " * @final",
            " */",
            "HistoryBase.SRC_REPLACE = SRC_REPLACE;",
            "",
            "/**",
            " * Whether or not this browser supports the HTML5 History API.",
            " *",
            " * @property html5",
            " * @type Boolean",
            " * @static",
            " */",
            "",
            "// All HTML5-capable browsers except Gecko 2+ (Firefox 4+) correctly return",
            "// true for 'onpopstate' in win. In order to support Gecko 2, we fall back to a",
            "// UA sniff for now. (current as of Firefox 4.0b2)",
            "HistoryBase.html5 = !!(win.history && win.history.pushState &&",
            "        win.history.replaceState && ('onpopstate' in win || Y.UA.gecko >= 2) &&",
            "        (!Y.UA.android || Y.UA.android >= 2.4));",
            "",
            "/**",
            " * Whether or not this browser supports the <code>window.onhashchange</code>",
            " * event natively. Note that even if this is <code>true</code>, you may",
            " * still want to use HistoryHash's synthetic <code>hashchange</code> event",
            " * since it normalizes implementation differences and fixes spec violations",
            " * across various browsers.",
            " *",
            " * @property nativeHashChange",
            " * @type Boolean",
            " * @static",
            " */",
            "",
            "// Most browsers that support hashchange expose it on the window. Opera 10.6+",
            "// exposes it on the document (but you can still attach to it on the window).",
            "//",
            "// IE8 supports the hashchange event, but only in IE8 Standards",
            "// Mode. However, IE8 in IE7 compatibility mode still defines the",
            "// event but never fires it, so we can't just detect the event. We also can't",
            "// just UA sniff for IE8, since other browsers support this event as well.",
            "HistoryBase.nativeHashChange = ('onhashchange' in win || 'onhashchange' in doc) &&",
            "        (!docMode || docMode > 7);",
            "",
            "Y.mix(HistoryBase.prototype, {",
            "    // -- Initialization -------------------------------------------------------",
            "",
            "    /**",
            "     * Initializes this HistoryBase instance. This method is called by the",
            "     * constructor.",
            "     *",
            "     * @method _init",
            "     * @param {Object} config configuration object",
            "     * @protected",
            "     */",
            "    _init: function (config) {",
            "        var initialState;",
            "",
            "        /**",
            "         * Configuration object provided by the user on instantiation, or an",
            "         * empty object if one wasn't provided.",
            "         *",
            "         * @property _config",
            "         * @type Object",
            "         * @default {}",
            "         * @protected",
            "         */",
            "        config = this._config = config || {};",
            "",
            "        /**",
            "         * If `true`, a `history:change` event will be fired whenever the URL",
            "         * changes, even if there is no associated state change.",
            "         *",
            "         * @property force",
            "         * @type Boolean",
            "         * @default false",
            "         */",
            "         this.force = !!config.force;",
            "",
            "        /**",
            "         * Resolved initial state: a merge of the user-supplied initial state",
            "         * (if any) and any initial state provided by a subclass. This may",
            "         * differ from <code>_config.initialState</code>. If neither the config",
            "         * nor a subclass supplies an initial state, this property will be",
            "         * <code>null</code>.",
            "         *",
            "         * @property _initialState",
            "         * @type Object|null",
            "         * @default {}",
            "         * @protected",
            "         */",
            "        initialState = this._initialState = this._initialState ||",
            "                config.initialState || null;",
            "",
            "        /**",
            "         * Fired when the state changes. To be notified of all state changes",
            "         * regardless of the History or YUI instance that generated them,",
            "         * subscribe to this event on <code>Y.Global</code>. If you would rather",
            "         * be notified only about changes generated by this specific History",
            "         * instance, subscribe to this event on the instance.",
            "         *",
            "         * @event history:change",
            "         * @param {EventFacade} e Event facade with the following additional",
            "         *   properties:",
            "         *",
            "         * <dl>",
            "         *   <dt>changed (Object)</dt>",
            "         *   <dd>",
            "         *     Object hash of state items that have been added or changed. The",
            "         *     key is the item key, and the value is an object containing",
            "         *     <code>newVal</code> and <code>prevVal</code> properties",
            "         *     representing the values of the item both before and after the",
            "         *     change. If the item was newly added, <code>prevVal</code> will be",
            "         *     <code>undefined</code>.",
            "         *   </dd>",
            "         *",
            "         *   <dt>newVal (Object)</dt>",
            "         *   <dd>",
            "         *     Object hash of key/value pairs of all state items after the",
            "         *     change.",
            "         *   </dd>",
            "         *",
            "         *   <dt>prevVal (Object)</dt>",
            "         *   <dd>",
            "         *     Object hash of key/value pairs of all state items before the",
            "         *     change.",
            "         *   </dd>",
            "         *",
            "         *   <dt>removed (Object)</dt>",
            "         *   <dd>",
            "         *     Object hash of key/value pairs of state items that have been",
            "         *     removed. Values are the old values prior to removal.",
            "         *   </dd>",
            "         *",
            "         *   <dt>src (String)</dt>",
            "         *   <dd>",
            "         *     The source of the event. This can be used to selectively ignore",
            "         *     events generated by certain sources.",
            "         *   </dd>",
            "         * </dl>",
            "         */",
            "        this.publish(EVT_CHANGE, {",
            "            broadcast: 2,",
            "            defaultFn: this._defChangeFn",
            "        });",
            "",
            "        // If initialState was provided, merge it into the current state.",
            "        if (initialState) {",
            "            this.replace(initialState);",
            "        }",
            "    },",
            "",
            "    // -- Public Methods -------------------------------------------------------",
            "",
            "    /**",
            "     * Adds a state entry with new values for the specified keys. By default,",
            "     * the new state will be merged into the existing state, and new values will",
            "     * override existing values. Specifying a <code>null</code> or",
            "     * <code>undefined</code> value will cause that key to be removed from the",
            "     * new state entry.",
            "     *",
            "     * @method add",
            "     * @param {Object} state Object hash of key/value pairs.",
            "     * @param {Object} options (optional) Zero or more of the following options:",
            "     *   <dl>",
            "     *     <dt>merge (Boolean)</dt>",
            "     *     <dd>",
            "     *       <p>",
            "     *       If <code>true</code> (the default), the new state will be merged",
            "     *       into the existing state. New values will override existing values,",
            "     *       and <code>null</code> or <code>undefined</code> values will be",
            "     *       removed from the state.",
            "     *       </p>",
            "     *",
            "     *       <p>",
            "     *       If <code>false</code>, the existing state will be discarded as a",
            "     *       whole and the new state will take its place.",
            "     *       </p>",
            "     *     </dd>",
            "     *   </dl>",
            "     * @chainable",
            "     */",
            "    add: function () {",
            "        var args = YArray(arguments, 0, true);",
            "        args.unshift(SRC_ADD);",
            "        return this._change.apply(this, args);",
            "    },",
            "",
            "    /**",
            "     * Adds a state entry with a new value for a single key. By default, the new",
            "     * value will be merged into the existing state values, and will override an",
            "     * existing value with the same key if there is one. Specifying a",
            "     * <code>null</code> or <code>undefined</code> value will cause the key to",
            "     * be removed from the new state entry.",
            "     *",
            "     * @method addValue",
            "     * @param {String} key State parameter key.",
            "     * @param {String} value New value.",
            "     * @param {Object} options (optional) Zero or more options. See",
            "     *   <code>add()</code> for a list of supported options.",
            "     * @chainable",
            "     */",
            "    addValue: function (key, value, options) {",
            "        var state = {};",
            "        state[key] = value;",
            "        return this._change(SRC_ADD, state, options);",
            "    },",
            "",
            "    /**",
            "     * Returns the current value of the state parameter specified by <i>key</i>,",
            "     * or an object hash of key/value pairs for all current state parameters if",
            "     * no key is specified.",
            "     *",
            "     * @method get",
            "     * @param {String} key (optional) State parameter key.",
            "     * @return {Object|String} Value of the specified state parameter, or an",
            "     *   object hash of key/value pairs for all current state parameters.",
            "     */",
            "    get: function (key) {",
            "        var state    = GlobalEnv._state,",
            "            isObject = _isSimpleObject(state);",
            "",
            "        if (key) {",
            "            return isObject && Obj.owns(state, key) ? state[key] : undefined;",
            "        } else {",
            "            return isObject ? Y.mix({}, state, true) : state; // mix provides a fast shallow clone.",
            "        }",
            "    },",
            "",
            "    /**",
            "     * Same as <code>add()</code> except that a new browser history entry will",
            "     * not be created. Instead, the current history entry will be replaced with",
            "     * the new state.",
            "     *",
            "     * @method replace",
            "     * @param {Object} state Object hash of key/value pairs.",
            "     * @param {Object} options (optional) Zero or more options. See",
            "     *   <code>add()</code> for a list of supported options.",
            "     * @chainable",
            "     */",
            "    replace: function () {",
            "        var args = YArray(arguments, 0, true);",
            "        args.unshift(SRC_REPLACE);",
            "        return this._change.apply(this, args);",
            "    },",
            "",
            "    /**",
            "     * Same as <code>addValue()</code> except that a new browser history entry",
            "     * will not be created. Instead, the current history entry will be replaced",
            "     * with the new state.",
            "     *",
            "     * @method replaceValue",
            "     * @param {String} key State parameter key.",
            "     * @param {String} value New value.",
            "     * @param {Object} options (optional) Zero or more options. See",
            "     *   <code>add()</code> for a list of supported options.",
            "     * @chainable",
            "     */",
            "    replaceValue: function (key, value, options) {",
            "        var state = {};",
            "        state[key] = value;",
            "        return this._change(SRC_REPLACE, state, options);",
            "    },",
            "",
            "    // -- Protected Methods ----------------------------------------------------",
            "",
            "    /**",
            "     * Changes the state. This method provides a common implementation shared by",
            "     * the public methods for changing state.",
            "     *",
            "     * @method _change",
            "     * @param {String} src Source of the change, for inclusion in event facades",
            "     *   to facilitate filtering.",
            "     * @param {Object} state Object hash of key/value pairs.",
            "     * @param {Object} options (optional) Zero or more options. See",
            "     *   <code>add()</code> for a list of supported options.",
            "     * @protected",
            "     * @chainable",
            "     */",
            "    _change: function (src, state, options) {",
            "        options = options ? Y.merge(DEFAULT_OPTIONS, options) : DEFAULT_OPTIONS;",
            "",
            "        if (options.merge && _isSimpleObject(state) &&",
            "                _isSimpleObject(GlobalEnv._state)) {",
            "            state = Y.merge(GlobalEnv._state, state);",
            "        }",
            "",
            "        this._resolveChanges(src, state, options);",
            "        return this;",
            "    },",
            "",
            "    /**",
            "     * Called by _resolveChanges() when the state has changed. This method takes",
            "     * care of actually firing the necessary events.",
            "     *",
            "     * @method _fireEvents",
            "     * @param {String} src Source of the changes, for inclusion in event facades",
            "     *   to facilitate filtering.",
            "     * @param {Object} changes Resolved changes.",
            "     * @param {Object} options Zero or more options. See <code>add()</code> for",
            "     *   a list of supported options.",
            "     * @protected",
            "     */",
            "    _fireEvents: function (src, changes, options) {",
            "        // Fire the global change event.",
            "        this.fire(EVT_CHANGE, {",
            "            _options: options,",
            "            changed : changes.changed,",
            "            newVal  : changes.newState,",
            "            prevVal : changes.prevState,",
            "            removed : changes.removed,",
            "            src     : src",
            "        });",
            "",
            "        // Fire change/remove events for individual items.",
            "        Obj.each(changes.changed, function (value, key) {",
            "            this._fireChangeEvent(src, key, value);",
            "        }, this);",
            "",
            "        Obj.each(changes.removed, function (value, key) {",
            "            this._fireRemoveEvent(src, key, value);",
            "        }, this);",
            "    },",
            "",
            "    /**",
            "     * Fires a dynamic \"[key]Change\" event.",
            "     *",
            "     * @method _fireChangeEvent",
            "     * @param {String} src source of the change, for inclusion in event facades",
            "     *   to facilitate filtering",
            "     * @param {String} key key of the item that was changed",
            "     * @param {Object} value object hash containing <i>newVal</i> and",
            "     *   <i>prevVal</i> properties for the changed item",
            "     * @protected",
            "     */",
            "    _fireChangeEvent: function (src, key, value) {",
            "        /**",
            "         * <p>",
            "         * Dynamic event fired when an individual history item is added or",
            "         * changed. The name of this event depends on the name of the key that",
            "         * changed. To listen to change events for a key named \"foo\", subscribe",
            "         * to the <code>fooChange</code> event; for a key named \"bar\", subscribe",
            "         * to <code>barChange</code>, etc.",
            "         * </p>",
            "         *",
            "         * <p>",
            "         * Key-specific events are only fired for instance-level changes; that",
            "         * is, changes that were made via the same History instance on which the",
            "         * event is subscribed. To be notified of changes made by other History",
            "         * instances, subscribe to the global <code>history:change</code> event.",
            "         * </p>",
            "         *",
            "         * @event [key]Change",
            "         * @param {EventFacade} e Event facade with the following additional",
            "         *   properties:",
            "         *",
            "         * <dl>",
            "         *   <dt>newVal (mixed)</dt>",
            "         *   <dd>",
            "         *     The new value of the item after the change.",
            "         *   </dd>",
            "         *",
            "         *   <dt>prevVal (mixed)</dt>",
            "         *   <dd>",
            "         *     The previous value of the item before the change, or",
            "         *     <code>undefined</code> if the item was just added and has no",
            "         *     previous value.",
            "         *   </dd>",
            "         *",
            "         *   <dt>src (String)</dt>",
            "         *   <dd>",
            "         *     The source of the event. This can be used to selectively ignore",
            "         *     events generated by certain sources.",
            "         *   </dd>",
            "         * </dl>",
            "         */",
            "        this.fire(key + 'Change', {",
            "            newVal : value.newVal,",
            "            prevVal: value.prevVal,",
            "            src    : src",
            "        });",
            "    },",
            "",
            "    /**",
            "     * Fires a dynamic \"[key]Remove\" event.",
            "     *",
            "     * @method _fireRemoveEvent",
            "     * @param {String} src source of the change, for inclusion in event facades",
            "     *   to facilitate filtering",
            "     * @param {String} key key of the item that was removed",
            "     * @param {mixed} value value of the item prior to its removal",
            "     * @protected",
            "     */",
            "    _fireRemoveEvent: function (src, key, value) {",
            "        /**",
            "         * <p>",
            "         * Dynamic event fired when an individual history item is removed. The",
            "         * name of this event depends on the name of the key that was removed.",
            "         * To listen to remove events for a key named \"foo\", subscribe to the",
            "         * <code>fooRemove</code> event; for a key named \"bar\", subscribe to",
            "         * <code>barRemove</code>, etc.",
            "         * </p>",
            "         *",
            "         * <p>",
            "         * Key-specific events are only fired for instance-level changes; that",
            "         * is, changes that were made via the same History instance on which the",
            "         * event is subscribed. To be notified of changes made by other History",
            "         * instances, subscribe to the global <code>history:change</code> event.",
            "         * </p>",
            "         *",
            "         * @event [key]Remove",
            "         * @param {EventFacade} e Event facade with the following additional",
            "         *   properties:",
            "         *",
            "         * <dl>",
            "         *   <dt>prevVal (mixed)</dt>",
            "         *   <dd>",
            "         *     The value of the item before it was removed.",
            "         *   </dd>",
            "         *",
            "         *   <dt>src (String)</dt>",
            "         *   <dd>",
            "         *     The source of the event. This can be used to selectively ignore",
            "         *     events generated by certain sources.",
            "         *   </dd>",
            "         * </dl>",
            "         */",
            "        this.fire(key + 'Remove', {",
            "            prevVal: value,",
            "            src    : src",
            "        });",
            "    },",
            "",
            "    /**",
            "     * Resolves the changes (if any) between <i>newState</i> and the current",
            "     * state and fires appropriate events if things have changed.",
            "     *",
            "     * @method _resolveChanges",
            "     * @param {String} src source of the changes, for inclusion in event facades",
            "     *   to facilitate filtering",
            "     * @param {Object} newState object hash of key/value pairs representing the",
            "     *   new state",
            "     * @param {Object} options Zero or more options. See <code>add()</code> for",
            "     *   a list of supported options.",
            "     * @protected",
            "     */",
            "    _resolveChanges: function (src, newState, options) {",
            "        var changed   = {},",
            "            isChanged,",
            "            prevState = GlobalEnv._state,",
            "            removed   = {};",
            "",
            "        newState || (newState = {});",
            "        options  || (options  = {});",
            "",
            "        if (_isSimpleObject(newState) && _isSimpleObject(prevState)) {",
            "            // Figure out what was added or changed.",
            "            Obj.each(newState, function (newVal, key) {",
            "                var prevVal = prevState[key];",
            "",
            "                if (newVal !== prevVal) {",
            "                    changed[key] = {",
            "                        newVal : newVal,",
            "                        prevVal: prevVal",
            "                    };",
            "",
            "                    isChanged = true;",
            "                }",
            "            }, this);",
            "",
            "            // Figure out what was removed.",
            "            Obj.each(prevState, function (prevVal, key) {",
            "                if (!Obj.owns(newState, key) || newState[key] === null) {",
            "                    delete newState[key];",
            "                    removed[key] = prevVal;",
            "                    isChanged = true;",
            "                }",
            "            }, this);",
            "        } else {",
            "            isChanged = newState !== prevState;",
            "        }",
            "",
            "        if (isChanged || this.force) {",
            "            this._fireEvents(src, {",
            "                changed  : changed,",
            "                newState : newState,",
            "                prevState: prevState,",
            "                removed  : removed",
            "            }, options);",
            "        }",
            "    },",
            "",
            "    /**",
            "     * Stores the specified state. Don't call this method directly; go through",
            "     * _resolveChanges() to ensure that changes are resolved and all events are",
            "     * fired properly.",
            "     *",
            "     * @method _storeState",
            "     * @param {String} src source of the changes",
            "     * @param {Object} newState new state to store",
            "     * @param {Object} options Zero or more options. See <code>add()</code> for",
            "     *   a list of supported options.",
            "     * @protected",
            "     */",
            "    _storeState: function (src, newState) {",
            "        // Note: the src and options params aren't used here, but they are used",
            "        // by subclasses.",
            "        GlobalEnv._state = newState || {};",
            "    },",
            "",
            "    // -- Protected Event Handlers ---------------------------------------------",
            "",
            "    /**",
            "     * Default <code>history:change</code> event handler.",
            "     *",
            "     * @method _defChangeFn",
            "     * @param {EventFacade} e state change event facade",
            "     * @protected",
            "     */",
            "    _defChangeFn: function (e) {",
            "        this._storeState(e.src, e.newVal, e._options);",
            "    }",
            "}, true);",
            "",
            "Y.HistoryBase = HistoryBase;",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"event-custom-complex\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "43": 1,
            "57": 1,
            "58": 28,
            "61": 1,
            "68": 1,
            "69": 1,
            "83": 1,
            "84": 139,
            "96": 1,
            "107": 1,
            "118": 1,
            "131": 1,
            "154": 1,
            "157": 1,
            "169": 28,
            "180": 28,
            "190": 28,
            "204": 28,
            "254": 28,
            "260": 28,
            "261": 2,
            "296": 6,
            "297": 6,
            "298": 6,
            "316": 5,
            "317": 5,
            "318": 5,
            "332": 43,
            "335": 43,
            "336": 16,
            "338": 27,
            "354": 7,
            "355": 7,
            "356": 7,
            "372": 5,
            "373": 5,
            "374": 5,
            "393": 23,
            "395": 23,
            "397": 17,
            "400": 23,
            "401": 23,
            "418": 30,
            "428": 30,
            "429": 29,
            "432": 30,
            "433": 8,
            "489": 29,
            "540": 8,
            "560": 31,
            "565": 31,
            "566": 31,
            "568": 31,
            "570": 29,
            "571": 34,
            "573": 34,
            "574": 29,
            "579": 29,
            "584": 29,
            "585": 13,
            "586": 8,
            "587": 8,
            "588": 8,
            "592": 2,
            "595": 31,
            "596": 30,
            "620": 30,
            "633": 30,
            "637": 1
        }
    }
}