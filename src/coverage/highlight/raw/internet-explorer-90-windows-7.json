{
    "build/highlight-base/highlight-base.js": {
        "path": "build/highlight-base/highlight-base.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 25,
            "4": 32,
            "5": 32,
            "6": 12,
            "7": 32,
            "8": 32,
            "9": 32,
            "10": 32,
            "11": 32,
            "12": 43,
            "13": 43,
            "14": 37,
            "15": 32,
            "16": 20,
            "17": 32,
            "18": 8,
            "19": 24,
            "20": 1,
            "21": 3,
            "22": 2,
            "23": 25,
            "24": 25,
            "25": 12,
            "26": 25,
            "27": 25,
            "28": 25,
            "29": 72,
            "30": 12,
            "31": 60,
            "32": 25,
            "33": 25,
            "34": 107,
            "35": 2,
            "36": 1
        },
        "b": {
            "1": [
                4,
                21
            ],
            "2": [
                25,
                4
            ],
            "3": [
                12,
                20
            ],
            "4": [
                9,
                23
            ],
            "5": [
                32,
                20
            ],
            "6": [
                21,
                11
            ],
            "7": [
                37,
                6
            ],
            "8": [
                29,
                8
            ],
            "9": [
                20,
                12
            ],
            "10": [
                8,
                24
            ],
            "11": [
                6,
                18
            ],
            "12": [
                1,
                1
            ],
            "13": [
                3,
                1
            ],
            "14": [
                12,
                13
            ],
            "15": [
                9,
                16
            ],
            "16": [
                25,
                16
            ],
            "17": [
                12,
                60
            ],
            "18": [
                20,
                52
            ]
        },
        "f": {
            "1": 1,
            "2": 25,
            "3": 32,
            "4": 1,
            "5": 3,
            "6": 2,
            "7": 25,
            "8": 72,
            "9": 107,
            "10": 2
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 26
                    },
                    "end": {
                        "line": 1,
                        "column": 45
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 75,
                "loc": {
                    "start": {
                        "line": 75,
                        "column": 15
                    },
                    "end": {
                        "line": 75,
                        "column": 40
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 133,
                "loc": {
                    "start": {
                        "line": 133,
                        "column": 9
                    },
                    "end": {
                        "line": 133,
                        "column": 47
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 188,
                "loc": {
                    "start": {
                        "line": 188,
                        "column": 13
                    },
                    "end": {
                        "line": 188,
                        "column": 51
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 208,
                "loc": {
                    "start": {
                        "line": 208,
                        "column": 11
                    },
                    "end": {
                        "line": 208,
                        "column": 49
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 223,
                "loc": {
                    "start": {
                        "line": 223,
                        "column": 15
                    },
                    "end": {
                        "line": 223,
                        "column": 44
                    }
                }
            },
            "7": {
                "name": "(anonymous_7)",
                "line": 247,
                "loc": {
                    "start": {
                        "line": 247,
                        "column": 11
                    },
                    "end": {
                        "line": 247,
                        "column": 49
                    }
                }
            },
            "8": {
                "name": "(anonymous_8)",
                "line": 269,
                "loc": {
                    "start": {
                        "line": 269,
                        "column": 35
                    },
                    "end": {
                        "line": 269,
                        "column": 60
                    }
                }
            },
            "9": {
                "name": "(anonymous_9)",
                "line": 284,
                "loc": {
                    "start": {
                        "line": 284,
                        "column": 33
                    },
                    "end": {
                        "line": 284,
                        "column": 49
                    }
                }
            },
            "10": {
                "name": "(anonymous_10)",
                "line": 301,
                "loc": {
                    "start": {
                        "line": 301,
                        "column": 15
                    },
                    "end": {
                        "line": 301,
                        "column": 44
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 312,
                    "column": 96
                }
            },
            "2": {
                "start": {
                    "line": 27,
                    "column": 0
                },
                "end": {
                    "line": 307,
                    "column": 2
                }
            },
            "3": {
                "start": {
                    "line": 79,
                    "column": 9
                },
                "end": {
                    "line": 80,
                    "column": 62
                }
            },
            "4": {
                "start": {
                    "line": 134,
                    "column": 8
                },
                "end": {
                    "line": 135,
                    "column": 49
                }
            },
            "5": {
                "start": {
                    "line": 137,
                    "column": 8
                },
                "end": {
                    "line": 139,
                    "column": 9
                }
            },
            "6": {
                "start": {
                    "line": 138,
                    "column": 12
                },
                "end": {
                    "line": 138,
                    "column": 35
                }
            },
            "7": {
                "start": {
                    "line": 142,
                    "column": 8
                },
                "end": {
                    "line": 142,
                    "column": 48
                }
            },
            "8": {
                "start": {
                    "line": 143,
                    "column": 8
                },
                "end": {
                    "line": 143,
                    "column": 82
                }
            },
            "9": {
                "start": {
                    "line": 144,
                    "column": 8
                },
                "end": {
                    "line": 144,
                    "column": 59
                }
            },
            "10": {
                "start": {
                    "line": 145,
                    "column": 8
                },
                "end": {
                    "line": 145,
                    "column": 58
                }
            },
            "11": {
                "start": {
                    "line": 150,
                    "column": 8
                },
                "end": {
                    "line": 156,
                    "column": 9
                }
            },
            "12": {
                "start": {
                    "line": 151,
                    "column": 12
                },
                "end": {
                    "line": 151,
                    "column": 32
                }
            },
            "13": {
                "start": {
                    "line": 153,
                    "column": 12
                },
                "end": {
                    "line": 155,
                    "column": 13
                }
            },
            "14": {
                "start": {
                    "line": 154,
                    "column": 16
                },
                "end": {
                    "line": 154,
                    "column": 84
                }
            },
            "15": {
                "start": {
                    "line": 159,
                    "column": 8
                },
                "end": {
                    "line": 161,
                    "column": 9
                }
            },
            "16": {
                "start": {
                    "line": 160,
                    "column": 12
                },
                "end": {
                    "line": 160,
                    "column": 45
                }
            },
            "17": {
                "start": {
                    "line": 164,
                    "column": 8
                },
                "end": {
                    "line": 166,
                    "column": 9
                }
            },
            "18": {
                "start": {
                    "line": 165,
                    "column": 12
                },
                "end": {
                    "line": 165,
                    "column": 28
                }
            },
            "19": {
                "start": {
                    "line": 168,
                    "column": 8
                },
                "end": {
                    "line": 174,
                    "column": 10
                }
            },
            "20": {
                "start": {
                    "line": 189,
                    "column": 8
                },
                "end": {
                    "line": 190,
                    "column": 73
                }
            },
            "21": {
                "start": {
                    "line": 209,
                    "column": 8
                },
                "end": {
                    "line": 210,
                    "column": 70
                }
            },
            "22": {
                "start": {
                    "line": 227,
                    "column": 8
                },
                "end": {
                    "line": 227,
                    "column": 73
                }
            },
            "23": {
                "start": {
                    "line": 248,
                    "column": 8
                },
                "end": {
                    "line": 251,
                    "column": 18
                }
            },
            "24": {
                "start": {
                    "line": 253,
                    "column": 8
                },
                "end": {
                    "line": 255,
                    "column": 9
                }
            },
            "25": {
                "start": {
                    "line": 254,
                    "column": 12
                },
                "end": {
                    "line": 254,
                    "column": 35
                }
            },
            "26": {
                "start": {
                    "line": 257,
                    "column": 8
                },
                "end": {
                    "line": 257,
                    "column": 48
                }
            },
            "27": {
                "start": {
                    "line": 260,
                    "column": 8
                },
                "end": {
                    "line": 264,
                    "column": 10
                }
            },
            "28": {
                "start": {
                    "line": 269,
                    "column": 8
                },
                "end": {
                    "line": 275,
                    "column": 10
                }
            },
            "29": {
                "start": {
                    "line": 270,
                    "column": 12
                },
                "end": {
                    "line": 272,
                    "column": 13
                }
            },
            "30": {
                "start": {
                    "line": 271,
                    "column": 16
                },
                "end": {
                    "line": 271,
                    "column": 69
                }
            },
            "31": {
                "start": {
                    "line": 274,
                    "column": 12
                },
                "end": {
                    "line": 274,
                    "column": 37
                }
            },
            "32": {
                "start": {
                    "line": 279,
                    "column": 8
                },
                "end": {
                    "line": 282,
                    "column": 11
                }
            },
            "33": {
                "start": {
                    "line": 284,
                    "column": 8
                },
                "end": {
                    "line": 286,
                    "column": 20
                }
            },
            "34": {
                "start": {
                    "line": 285,
                    "column": 12
                },
                "end": {
                    "line": 285,
                    "column": 41
                }
            },
            "35": {
                "start": {
                    "line": 305,
                    "column": 8
                },
                "end": {
                    "line": 305,
                    "column": 73
                }
            },
            "36": {
                "start": {
                    "line": 309,
                    "column": 0
                },
                "end": {
                    "line": 309,
                    "column": 24
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 79,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 79,
                            "column": 41
                        },
                        "end": {
                            "line": 79,
                            "column": 46
                        }
                    },
                    {
                        "start": {
                            "line": 80,
                            "column": 20
                        },
                        "end": {
                            "line": 80,
                            "column": 61
                        }
                    }
                ]
            },
            "2": {
                "line": 79,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 79,
                            "column": 16
                        },
                        "end": {
                            "line": 79,
                            "column": 18
                        }
                    },
                    {
                        "start": {
                            "line": 79,
                            "column": 22
                        },
                        "end": {
                            "line": 79,
                            "column": 38
                        }
                    }
                ]
            },
            "3": {
                "line": 137,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 137,
                            "column": 8
                        },
                        "end": {
                            "line": 137,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 137,
                            "column": 8
                        },
                        "end": {
                            "line": 137,
                            "column": 8
                        }
                    }
                ]
            },
            "4": {
                "line": 143,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 143,
                            "column": 40
                        },
                        "end": {
                            "line": 143,
                            "column": 62
                        }
                    },
                    {
                        "start": {
                            "line": 143,
                            "column": 65
                        },
                        "end": {
                            "line": 143,
                            "column": 81
                        }
                    }
                ]
            },
            "5": {
                "line": 144,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 144,
                            "column": 19
                        },
                        "end": {
                            "line": 144,
                            "column": 35
                        }
                    },
                    {
                        "start": {
                            "line": 144,
                            "column": 39
                        },
                        "end": {
                            "line": 144,
                            "column": 58
                        }
                    }
                ]
            },
            "6": {
                "line": 145,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 145,
                            "column": 38
                        },
                        "end": {
                            "line": 145,
                            "column": 45
                        }
                    },
                    {
                        "start": {
                            "line": 145,
                            "column": 48
                        },
                        "end": {
                            "line": 145,
                            "column": 57
                        }
                    }
                ]
            },
            "7": {
                "line": 153,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 153,
                            "column": 12
                        },
                        "end": {
                            "line": 153,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 153,
                            "column": 12
                        },
                        "end": {
                            "line": 153,
                            "column": 12
                        }
                    }
                ]
            },
            "8": {
                "line": 154,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 154,
                            "column": 53
                        },
                        "end": {
                            "line": 154,
                            "column": 72
                        }
                    },
                    {
                        "start": {
                            "line": 154,
                            "column": 75
                        },
                        "end": {
                            "line": 154,
                            "column": 81
                        }
                    }
                ]
            },
            "9": {
                "line": 159,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 159,
                            "column": 8
                        },
                        "end": {
                            "line": 159,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 159,
                            "column": 8
                        },
                        "end": {
                            "line": 159,
                            "column": 8
                        }
                    }
                ]
            },
            "10": {
                "line": 164,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 164,
                            "column": 8
                        },
                        "end": {
                            "line": 164,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 164,
                            "column": 8
                        },
                        "end": {
                            "line": 164,
                            "column": 8
                        }
                    }
                ]
            },
            "11": {
                "line": 171,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 171,
                            "column": 40
                        },
                        "end": {
                            "line": 171,
                            "column": 43
                        }
                    },
                    {
                        "start": {
                            "line": 171,
                            "column": 46
                        },
                        "end": {
                            "line": 171,
                            "column": 50
                        }
                    }
                ]
            },
            "12": {
                "line": 190,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 190,
                            "column": 24
                        },
                        "end": {
                            "line": 190,
                            "column": 31
                        }
                    },
                    {
                        "start": {
                            "line": 190,
                            "column": 35
                        },
                        "end": {
                            "line": 190,
                            "column": 47
                        }
                    }
                ]
            },
            "13": {
                "line": 210,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 210,
                            "column": 24
                        },
                        "end": {
                            "line": 210,
                            "column": 31
                        }
                    },
                    {
                        "start": {
                            "line": 210,
                            "column": 35
                        },
                        "end": {
                            "line": 210,
                            "column": 47
                        }
                    }
                ]
            },
            "14": {
                "line": 253,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 253,
                            "column": 8
                        },
                        "end": {
                            "line": 253,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 253,
                            "column": 8
                        },
                        "end": {
                            "line": 253,
                            "column": 8
                        }
                    }
                ]
            },
            "15": {
                "line": 261,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 261,
                            "column": 31
                        },
                        "end": {
                            "line": 261,
                            "column": 38
                        }
                    },
                    {
                        "start": {
                            "line": 261,
                            "column": 41
                        },
                        "end": {
                            "line": 263,
                            "column": 14
                        }
                    }
                ]
            },
            "16": {
                "line": 269,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 269,
                            "column": 17
                        },
                        "end": {
                            "line": 269,
                            "column": 31
                        }
                    },
                    {
                        "start": {
                            "line": 269,
                            "column": 35
                        },
                        "end": {
                            "line": 275,
                            "column": 9
                        }
                    }
                ]
            },
            "17": {
                "line": 270,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 270,
                            "column": 12
                        },
                        "end": {
                            "line": 270,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 270,
                            "column": 12
                        },
                        "end": {
                            "line": 270,
                            "column": 12
                        }
                    }
                ]
            },
            "18": {
                "line": 270,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 270,
                            "column": 55
                        },
                        "end": {
                            "line": 270,
                            "column": 59
                        }
                    },
                    {
                        "start": {
                            "line": 270,
                            "column": 62
                        },
                        "end": {
                            "line": 270,
                            "column": 80
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('highlight-base', function (Y, NAME) {",
            "",
            "/**",
            "Provides methods for highlighting strings within other strings by wrapping",
            "them in HTML.",
            "",
            "@module highlight",
            "@submodule highlight-base",
            "@main",
            "@since 3.3.0",
            "**/",
            "",
            "/**",
            "Provides methods for highlighting strings within other strings by wrapping",
            "them in HTML.",
            "",
            "The highlight methods first escape any special HTML characters in the input",
            "strings and then highlight the appropriate substrings by wrapping them in a",
            "`<b class=\"yui3-highlight\"></b>` element. The `<b>` element is used rather than",
            "`<strong>` in accordance with HTML5's definition of `<b>` as being purely",
            "presentational, which is exactly what highlighting is.",
            "",
            "@class Highlight",
            "@static",
            "**/",
            "",
            "var YArray    = Y.Array,",
            "    Escape    = Y.Escape,",
            "    WordBreak = Y.Text.WordBreak,",
            "",
            "    isArray = Y.Lang.isArray,",
            "",
            "    EMPTY_OBJECT = {},",
            "",
            "    // Regex string that captures zero or one unclosed HTML entities. Used in",
            "    // the static regex template properties below. The entity matching is",
            "    // intentionally loose here, since there's a world of complexity involved in",
            "    // doing strict matching for this use case.",
            "    UNCLOSED_ENTITY = '(&[^;\\\\s]*)?',",
            "",
            "Highlight = {",
            "    // -- Protected Static Properties ------------------------------------------",
            "",
            "    /**",
            "    Regular expression template for highlighting a match that occurs anywhere",
            "    in a string. The placeholder `%needles` will be replaced with a list of",
            "    needles to match, joined by `|` characters.",
            "",
            "    This regex should have two capturing subpatterns:",
            "",
            "      1. Zero or one unclosed HTML entity (e.g. \"&amp\" without a \";\" at the",
            "         end).",
            "      2. The `%needles` placeholder.",
            "",
            "    The first subpattern match is used to emulate a negative lookbehind",
            "    assertion in order to prevent highlighting inside HTML entities.",
            "",
            "    @property _REGEX",
            "    @type String",
            "    @protected",
            "    @static",
            "    @final",
            "    **/",
            "    _REGEX: UNCLOSED_ENTITY + '(%needles)',",
            "",
            "    /**",
            "    Regex replacer function or string for normal matches.",
            "",
            "    @property _REPLACER",
            "    @type Function|String",
            "    @protected",
            "    @static",
            "    @final",
            "    **/",
            "    _REPLACER: function (match, p1, p2) {",
            "         // Mimicking a negative lookbehind assertion to prevent matches inside",
            "         // HTML entities. Hat tip to Steven Levithan for the technique:",
            "         // http://blog.stevenlevithan.com/archives/mimic-lookbehind-javascript",
            "         return p1 && !(/\\s/).test(p2) ? match :",
            "                    Highlight._TEMPLATE.replace(/\\{s\\}/g, p2);",
            "     },",
            "",
            "    /**",
            "    Regular expression template for highlighting start-of-string matches",
            "    (i.e., only matches that occur at the beginning of a string). The",
            "    placeholder `%needles` will be replaced with a list of needles to match,",
            "    joined by `|` characters.",
            "",
            "    See `_REGEX` for a description of the capturing subpatterns this regex",
            "    string should contain.",
            "",
            "    @property _START_REGEX",
            "    @type String",
            "    @protected",
            "    @static",
            "    @final",
            "     */",
            "    _START_REGEX: '^' + UNCLOSED_ENTITY + '(%needles)',",
            "",
            "    /**",
            "    Highlight template which will be used as a replacement for matched",
            "    substrings. The placeholder `{s}` will be replaced with the matched",
            "    substring.",
            "",
            "    @property _TEMPLATE",
            "    @type String",
            "    @default '<b class=\"yui3-highlight\">{s}</b>'",
            "    @protected",
            "    @static",
            "    @final",
            "    **/",
            "    _TEMPLATE: '<b class=\"' + Y.ClassNameManager.getClassName('highlight') + '\">{s}</b>',",
            "",
            "    // -- Public Static Methods ------------------------------------------------",
            "",
            "    /**",
            "    Highlights all occurrences in the _haystack_ string of the items in the",
            "    _needles_ array, regardless of where they occur. The returned string will",
            "    have all HTML characters escaped except for the highlighting markup.",
            "",
            "    @method all",
            "    @param {String} haystack String to apply highlighting to.",
            "    @param {String|String[]} needles String or array of strings that should be",
            "        highlighted.",
            "    @param {Object} [options] Options object.",
            "    @param {Boolean} [options.caseSensitive=false] If `true`, matching will",
            "        be case-sensitive.",
            "    @param {Boolean} [options.startsWith=false] If `true`, matches must be",
            "        anchored to the beginning of the string.",
            "    @return {String} Escaped and highlighted copy of _haystack_.",
            "    @static",
            "    **/",
            "    all: function (haystack, needles, options) {",
            "        var validNeedles = [],",
            "            esc, i, len, needle, regex, replacer;",
            "",
            "        if (!options) {",
            "            options = EMPTY_OBJECT;",
            "        }",
            "",
            "        // TODO: document options.replacer",
            "        esc      = options.escapeHTML !== false;",
            "        regex    = options.startsWith ? Highlight._START_REGEX : Highlight._REGEX;",
            "        replacer = options.replacer || Highlight._REPLACER;",
            "        needles  = isArray(needles) ? needles : [needles];",
            "",
            "        // Escape HTML characters and special regular expression characters in",
            "        // the needles so they can be used in a regex and matched against the",
            "        // escaped haystack.",
            "        for (i = 0, len = needles.length; i < len; ++i) {",
            "            needle = needles[i];",
            "",
            "            if (needle) {",
            "                validNeedles.push(Escape.regex(esc ? Escape.html(needle) : needle));",
            "            }",
            "        }",
            "",
            "        // Escape HTML characters in the haystack to prevent HTML injection.",
            "        if (esc) {",
            "            haystack = Escape.html(haystack);",
            "        }",
            "",
            "        // No point continuing if there are no needles.",
            "        if (!validNeedles.length) {",
            "            return haystack;",
            "        }",
            "",
            "        return haystack.replace(",
            "            new RegExp(",
            "                regex.replace('%needles', validNeedles.join('|')),",
            "                options.caseSensitive ? 'g' : 'gi'",
            "            ),",
            "            replacer",
            "        );",
            "    },",
            "",
            "    /**",
            "    Same as `all()`, but case-sensitive by default.",
            "",
            "    @method allCase",
            "    @param {String} haystack String to apply highlighting to.",
            "    @param {String|String[]} needles String or array of strings that should be",
            "      highlighted.",
            "    @param {Object} [options] Options object. See `all()` for details.",
            "    @return {String} Escaped and highlighted copy of _haystack_.",
            "    @static",
            "    **/",
            "    allCase: function (haystack, needles, options) {",
            "        return Highlight.all(haystack, needles,",
            "                Y.merge(options || EMPTY_OBJECT, {caseSensitive: true}));",
            "    },",
            "",
            "    /**",
            "    Highlights _needles_ that occur at the start of _haystack_. The returned",
            "    string will have all HTML characters escaped except for the highlighting",
            "    markup.",
            "",
            "    @method start",
            "    @param {String} haystack String to apply highlighting to.",
            "    @param {String|String[]} needles String or array of strings that should be",
            "      highlighted.",
            "    @param {Object} [options] Options object.",
            "    @param {Boolean} [options.caseSensitive=false] If `true`, matching will",
            "        be case-sensitive.",
            "    @return {String} Escaped and highlighted copy of _haystack_.",
            "    @static",
            "    **/",
            "    start: function (haystack, needles, options) {",
            "        return Highlight.all(haystack, needles,",
            "                Y.merge(options || EMPTY_OBJECT, {startsWith: true}));",
            "    },",
            "",
            "    /**",
            "    Same as `start()`, but case-sensitive by default.",
            "",
            "    @method startCase",
            "    @param {String} haystack String to apply highlighting to.",
            "    @param {String|String[]} needles String or array of strings that should be",
            "      highlighted.",
            "    @return {String} Escaped and highlighted copy of _haystack_.",
            "    @static",
            "    **/",
            "    startCase: function (haystack, needles) {",
            "        // No options passthru for now, since it would be redundant. If start()",
            "        // ever supports more options than caseSensitive, then we'll start",
            "        // passing the options through.",
            "        return Highlight.start(haystack, needles, {caseSensitive: true});",
            "    },",
            "",
            "    /**",
            "    Highlights complete words in the _haystack_ string that are also in the",
            "    _needles_ array. The returned string will have all HTML characters escaped",
            "    except for the highlighting markup.",
            "",
            "    @method words",
            "    @param {String} haystack String to apply highlighting to.",
            "    @param {String|String[]} needles String or array of strings containing words",
            "      that should be highlighted. If a string is passed, it will be split",
            "      into words; if an array is passed, it is assumed to have already been",
            "      split.",
            "    @param {Object} [options] Options object.",
            "    @param {Boolean} [options.caseSensitive=false] If `true`, matching will",
            "        be case-sensitive.",
            "    @return {String} Escaped and highlighted copy of _haystack_.",
            "    @static",
            "    **/",
            "    words: function (haystack, needles, options) {",
            "        var caseSensitive,",
            "            mapper,",
            "            template = Highlight._TEMPLATE,",
            "            words;",
            "",
            "        if (!options) {",
            "            options = EMPTY_OBJECT;",
            "        }",
            "",
            "        caseSensitive = !!options.caseSensitive;",
            "",
            "        // Convert needles to a hash for faster lookups.",
            "        needles = YArray.hash(",
            "            isArray(needles) ? needles : WordBreak.getUniqueWords(needles, {",
            "                ignoreCase: !caseSensitive",
            "            })",
            "        );",
            "",
            "        // The default word mapping function can be overridden with a custom",
            "        // one. This is used to implement accent-folded highlighting in the",
            "        // highlight-accentfold module.",
            "        mapper = options.mapper || function (word, needles) {",
            "            if (needles.hasOwnProperty(caseSensitive ? word : word.toLowerCase())) {",
            "                return template.replace(/\\{s\\}/g, Escape.html(word));",
            "            }",
            "",
            "            return Escape.html(word);",
            "        };",
            "",
            "        // Split the haystack into an array of words, including punctuation and",
            "        // whitespace so we can rebuild the string later.",
            "        words = WordBreak.getWords(haystack, {",
            "            includePunctuation: true,",
            "            includeWhitespace : true",
            "        });",
            "",
            "        return YArray.map(words, function (word) {",
            "            return mapper(word, needles);",
            "        }).join('');",
            "    },",
            "",
            "    /**",
            "    Same as `words()`, but case-sensitive by default.",
            "",
            "    @method wordsCase",
            "    @param {String} haystack String to apply highlighting to.",
            "    @param {String|String[]} needles String or array of strings containing words",
            "      that should be highlighted. If a string is passed, it will be split",
            "      into words; if an array is passed, it is assumed to have already been",
            "      split.",
            "    @return {String} Escaped and highlighted copy of _haystack_.",
            "    @static",
            "    **/",
            "    wordsCase: function (haystack, needles) {",
            "        // No options passthru for now, since it would be redundant. If words()",
            "        // ever supports more options than caseSensitive, then we'll start",
            "        // passing the options through.",
            "        return Highlight.words(haystack, needles, {caseSensitive: true});",
            "    }",
            "};",
            "",
            "Y.Highlight = Highlight;",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"array-extras\", \"classnamemanager\", \"escape\", \"text-wordbreak\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "27": 1,
            "79": 25,
            "134": 32,
            "137": 32,
            "138": 12,
            "142": 32,
            "143": 32,
            "144": 32,
            "145": 32,
            "150": 32,
            "151": 43,
            "153": 43,
            "154": 37,
            "159": 32,
            "160": 20,
            "164": 32,
            "165": 8,
            "168": 24,
            "189": 1,
            "209": 3,
            "227": 2,
            "248": 25,
            "253": 25,
            "254": 12,
            "257": 25,
            "260": 25,
            "269": 25,
            "270": 72,
            "271": 12,
            "274": 60,
            "279": 25,
            "284": 25,
            "285": 107,
            "305": 2,
            "309": 1
        }
    },
    "build/highlight-accentfold/highlight-accentfold.js": {
        "path": "build/highlight-accentfold/highlight-accentfold.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 12,
            "4": 12,
            "5": 7,
            "6": 7,
            "7": 0,
            "8": 7,
            "9": 7,
            "10": 7,
            "11": 12,
            "12": 12,
            "13": 10,
            "14": 12,
            "15": 17,
            "16": 17,
            "17": 7,
            "18": 17,
            "19": 12,
            "20": 3,
            "21": 9,
            "22": 9,
            "23": 35,
            "24": 8,
            "25": 27
        },
        "b": {
            "1": [
                0,
                7
            ],
            "2": [
                7,
                0
            ],
            "3": [
                12,
                9
            ],
            "4": [
                10,
                2
            ],
            "5": [
                7,
                10
            ],
            "6": [
                8,
                27
            ]
        },
        "f": {
            "1": 1,
            "2": 12,
            "3": 7,
            "4": 3,
            "5": 9,
            "6": 35
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 32
                    },
                    "end": {
                        "line": 1,
                        "column": 51
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 36,
                "loc": {
                    "start": {
                        "line": 36,
                        "column": 13
                    },
                    "end": {
                        "line": 36,
                        "column": 51
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 58,
                "loc": {
                    "start": {
                        "line": 58,
                        "column": 22
                    },
                    "end": {
                        "line": 58,
                        "column": 62
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 112,
                "loc": {
                    "start": {
                        "line": 112,
                        "column": 15
                    },
                    "end": {
                        "line": 112,
                        "column": 44
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 128,
                "loc": {
                    "start": {
                        "line": 128,
                        "column": 15
                    },
                    "end": {
                        "line": 128,
                        "column": 44
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 132,
                "loc": {
                    "start": {
                        "line": 132,
                        "column": 20
                    },
                    "end": {
                        "line": 132,
                        "column": 45
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 144,
                    "column": 69
                }
            },
            "2": {
                "start": {
                    "line": 15,
                    "column": 0
                },
                "end": {
                    "line": 141,
                    "column": 3
                }
            },
            "3": {
                "start": {
                    "line": 37,
                    "column": 8
                },
                "end": {
                    "line": 40,
                    "column": 41
                }
            },
            "4": {
                "start": {
                    "line": 42,
                    "column": 8
                },
                "end": {
                    "line": 75,
                    "column": 36
                }
            },
            "5": {
                "start": {
                    "line": 59,
                    "column": 16
                },
                "end": {
                    "line": 59,
                    "column": 24
                }
            },
            "6": {
                "start": {
                    "line": 62,
                    "column": 16
                },
                "end": {
                    "line": 64,
                    "column": 17
                }
            },
            "7": {
                "start": {
                    "line": 63,
                    "column": 20
                },
                "end": {
                    "line": 63,
                    "column": 33
                }
            },
            "8": {
                "start": {
                    "line": 66,
                    "column": 16
                },
                "end": {
                    "line": 66,
                    "column": 42
                }
            },
            "9": {
                "start": {
                    "line": 68,
                    "column": 16
                },
                "end": {
                    "line": 71,
                    "column": 19
                }
            },
            "10": {
                "start": {
                    "line": 73,
                    "column": 16
                },
                "end": {
                    "line": 73,
                    "column": 37
                }
            },
            "11": {
                "start": {
                    "line": 80,
                    "column": 8
                },
                "end": {
                    "line": 80,
                    "column": 84
                }
            },
            "12": {
                "start": {
                    "line": 84,
                    "column": 8
                },
                "end": {
                    "line": 86,
                    "column": 9
                }
            },
            "13": {
                "start": {
                    "line": 85,
                    "column": 12
                },
                "end": {
                    "line": 85,
                    "column": 54
                }
            },
            "14": {
                "start": {
                    "line": 89,
                    "column": 8
                },
                "end": {
                    "line": 97,
                    "column": 9
                }
            },
            "15": {
                "start": {
                    "line": 90,
                    "column": 12
                },
                "end": {
                    "line": 90,
                    "column": 47
                }
            },
            "16": {
                "start": {
                    "line": 92,
                    "column": 12
                },
                "end": {
                    "line": 94,
                    "column": 13
                }
            },
            "17": {
                "start": {
                    "line": 93,
                    "column": 16
                },
                "end": {
                    "line": 93,
                    "column": 72
                }
            },
            "18": {
                "start": {
                    "line": 96,
                    "column": 12
                },
                "end": {
                    "line": 96,
                    "column": 31
                }
            },
            "19": {
                "start": {
                    "line": 99,
                    "column": 8
                },
                "end": {
                    "line": 99,
                    "column": 32
                }
            },
            "20": {
                "start": {
                    "line": 113,
                    "column": 8
                },
                "end": {
                    "line": 113,
                    "column": 72
                }
            },
            "21": {
                "start": {
                    "line": 129,
                    "column": 8
                },
                "end": {
                    "line": 129,
                    "column": 43
                }
            },
            "22": {
                "start": {
                    "line": 131,
                    "column": 8
                },
                "end": {
                    "line": 139,
                    "column": 11
                }
            },
            "23": {
                "start": {
                    "line": 133,
                    "column": 16
                },
                "end": {
                    "line": 135,
                    "column": 17
                }
            },
            "24": {
                "start": {
                    "line": 134,
                    "column": 20
                },
                "end": {
                    "line": 134,
                    "column": 73
                }
            },
            "25": {
                "start": {
                    "line": 137,
                    "column": 16
                },
                "end": {
                    "line": 137,
                    "column": 41
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 62,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 62,
                            "column": 16
                        },
                        "end": {
                            "line": 62,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 62,
                            "column": 16
                        },
                        "end": {
                            "line": 62,
                            "column": 16
                        }
                    }
                ]
            },
            "2": {
                "line": 62,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 62,
                            "column": 20
                        },
                        "end": {
                            "line": 62,
                            "column": 22
                        }
                    },
                    {
                        "start": {
                            "line": 62,
                            "column": 26
                        },
                        "end": {
                            "line": 62,
                            "column": 52
                        }
                    }
                ]
            },
            "3": {
                "line": 75,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 75,
                            "column": 11
                        },
                        "end": {
                            "line": 75,
                            "column": 18
                        }
                    },
                    {
                        "start": {
                            "line": 75,
                            "column": 22
                        },
                        "end": {
                            "line": 75,
                            "column": 34
                        }
                    }
                ]
            },
            "4": {
                "line": 84,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 84,
                            "column": 8
                        },
                        "end": {
                            "line": 84,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 84,
                            "column": 8
                        },
                        "end": {
                            "line": 84,
                            "column": 8
                        }
                    }
                ]
            },
            "5": {
                "line": 92,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 92,
                            "column": 12
                        },
                        "end": {
                            "line": 92,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 92,
                            "column": 12
                        },
                        "end": {
                            "line": 92,
                            "column": 12
                        }
                    }
                ]
            },
            "6": {
                "line": 133,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 133,
                            "column": 16
                        },
                        "end": {
                            "line": 133,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 133,
                            "column": 16
                        },
                        "end": {
                            "line": 133,
                            "column": 16
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('highlight-accentfold', function (Y, NAME) {",
            "",
            "/**",
            "Adds accent-folding highlighters to `Y.Highlight`.",
            "",
            "@module highlight",
            "@submodule highlight-accentfold",
            "**/",
            "",
            "/**",
            "@class Highlight",
            "@static",
            "**/",
            "",
            "var AccentFold = Y.Text.AccentFold,",
            "    Escape     = Y.Escape,",
            "",
            "    EMPTY_OBJECT = {},",
            "",
            "Highlight = Y.mix(Y.Highlight, {",
            "    // -- Public Static Methods ------------------------------------------------",
            "",
            "    /**",
            "    Accent-folding version of `all()`.",
            "",
            "    @method allFold",
            "    @param {String} haystack String to apply highlighting to.",
            "    @param {String|String[]} needles String or array of strings that should be",
            "      highlighted.",
            "    @param {Object} [options] Options object.",
            "    @param {Boolean} [options.startsWith=false] If `true`, matches must be",
            "        anchored to the beginning of the string.",
            "    @return {String} Escaped and highlighted copy of _haystack_.",
            "    @static",
            "    **/",
            "    allFold: function (haystack, needles, options) {",
            "        var template = Highlight._TEMPLATE,",
            "            results  = [],",
            "            startPos = 0,",
            "            chunk, i, len, match, result;",
            "",
            "        options = Y.merge({",
            "            // This tells Highlight.all() not to escape HTML, in order to ensure",
            "            // usable match offsets. The output of all() is discarded, and we",
            "            // perform our own escaping before returning the highlighted string.",
            "            escapeHTML: false,",
            "",
            "            // While the highlight regex operates on the accent-folded strings,",
            "            // this replacer will highlight the matched positions in the",
            "            // original string.",
            "            //",
            "            // Note: this implementation doesn't handle multi-character folds,",
            "            // like \"æ\" -> \"ae\". Doing so correctly would be prohibitively",
            "            // expensive both in terms of code size and runtime performance, so",
            "            // I've chosen to take the pragmatic route and just not do it at",
            "            // all. This is one of many reasons why accent folding is best done",
            "            // on the server.",
            "            replacer: function (match, p1, foldedNeedle, pos) {",
            "                var len;",
            "",
            "                // Ignore matches inside HTML entities.",
            "                if (p1 && !(/\\s/).test(foldedNeedle)) {",
            "                    return match;",
            "                }",
            "",
            "                len = foldedNeedle.length;",
            "",
            "                results.push([",
            "                    haystack.substring(startPos, pos), // substring between previous match and this match",
            "                    haystack.substr(pos, len)          // match to be highlighted",
            "                ]);",
            "",
            "                startPos = pos + len;",
            "            }",
            "        }, options || EMPTY_OBJECT);",
            "",
            "        // Run the highlighter on the folded strings. We don't care about the",
            "        // output; our replacer function will build the canonical highlighted",
            "        // string, with original accented characters.",
            "        Highlight.all(AccentFold.fold(haystack), AccentFold.fold(needles), options);",
            "",
            "        // Tack on the remainder of the haystack that wasn't highlighted, if",
            "        // any.",
            "        if (startPos < haystack.length) {",
            "            results.push([haystack.substr(startPos)]);",
            "        }",
            "",
            "        // Highlight and escape the string.",
            "        for (i = 0, len = results.length; i < len; ++i) {",
            "            chunk = Escape.html(results[i][0]);",
            "",
            "            if ((match = results[i][1])) {",
            "                chunk += template.replace(/\\{s\\}/g, Escape.html(match));",
            "            }",
            "",
            "            results[i] = chunk;",
            "        }",
            "",
            "        return results.join('');",
            "    },",
            "",
            "    /**",
            "    Accent-folding version of `start()`.",
            "",
            "    @method startFold",
            "    @param {String} haystack String to apply highlighting to.",
            "    @param {String|String[]} needles String or array of strings that should be",
            "      highlighted.",
            "    @return {String} Escaped and highlighted copy of _haystack_.",
            "    @static",
            "    **/",
            "    startFold: function (haystack, needles) {",
            "        return Highlight.allFold(haystack, needles, {startsWith: true});",
            "    },",
            "",
            "    /**",
            "    Accent-folding version of `words()`.",
            "",
            "    @method wordsFold",
            "    @param {String} haystack String to apply highlighting to.",
            "    @param {String|String[]} needles String or array of strings containing words",
            "      that should be highlighted. If a string is passed, it will be split",
            "      into words; if an array is passed, it is assumed to have already been",
            "      split.",
            "    @return {String} Escaped and highlighted copy of _haystack_.",
            "    @static",
            "    **/",
            "    wordsFold: function (haystack, needles) {",
            "        var template = Highlight._TEMPLATE;",
            "",
            "        return Highlight.words(haystack, AccentFold.fold(needles), {",
            "            mapper: function (word, needles) {",
            "                if (needles.hasOwnProperty(AccentFold.fold(word))) {",
            "                    return template.replace(/\\{s\\}/g, Escape.html(word));",
            "                }",
            "",
            "                return Escape.html(word);",
            "            }",
            "        });",
            "    }",
            "});",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"highlight-base\", \"text-accentfold\"]});",
            "",
            "}());"
        ],
        "l": {
            "1": 1,
            "15": 1,
            "37": 12,
            "42": 12,
            "59": 7,
            "62": 7,
            "63": 0,
            "66": 7,
            "68": 7,
            "73": 7,
            "80": 12,
            "84": 12,
            "85": 10,
            "89": 12,
            "90": 17,
            "92": 17,
            "93": 7,
            "96": 17,
            "99": 12,
            "113": 3,
            "129": 9,
            "131": 9,
            "133": 35,
            "134": 8,
            "137": 27
        }
    }
}