{
    "build/dataschema-base/dataschema-base.js": {
        "path": "build/dataschema-base/dataschema-base.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 0,
            "4": 267,
            "5": 50,
            "6": 50,
            "7": 50,
            "8": 267,
            "9": 1,
            "10": 1
        },
        "b": {
            "1": [
                50,
                217
            ],
            "2": [
                37,
                13
            ],
            "3": [
                50,
                0
            ]
        },
        "f": {
            "1": 1,
            "2": 0,
            "3": 267
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 27
                    },
                    "end": {
                        "line": 1,
                        "column": 46
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 36,
                "loc": {
                    "start": {
                        "line": 36,
                        "column": 11
                    },
                    "end": {
                        "line": 36,
                        "column": 34
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 48,
                "loc": {
                    "start": {
                        "line": 48,
                        "column": 11
                    },
                    "end": {
                        "line": 48,
                        "column": 34
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 66,
                    "column": 40
                }
            },
            "2": {
                "start": {
                    "line": 20,
                    "column": 0
                },
                "end": {
                    "line": 60,
                    "column": 2
                }
            },
            "3": {
                "start": {
                    "line": 37,
                    "column": 8
                },
                "end": {
                    "line": 37,
                    "column": 20
                }
            },
            "4": {
                "start": {
                    "line": 49,
                    "column": 8
                },
                "end": {
                    "line": 57,
                    "column": 9
                }
            },
            "5": {
                "start": {
                    "line": 50,
                    "column": 12
                },
                "end": {
                    "line": 51,
                    "column": 54
                }
            },
            "6": {
                "start": {
                    "line": 52,
                    "column": 12
                },
                "end": {
                    "line": 56,
                    "column": 13
                }
            },
            "7": {
                "start": {
                    "line": 53,
                    "column": 16
                },
                "end": {
                    "line": 53,
                    "column": 49
                }
            },
            "8": {
                "start": {
                    "line": 58,
                    "column": 8
                },
                "end": {
                    "line": 58,
                    "column": 21
                }
            },
            "9": {
                "start": {
                    "line": 62,
                    "column": 0
                },
                "end": {
                    "line": 62,
                    "column": 44
                }
            },
            "10": {
                "start": {
                    "line": 63,
                    "column": 0
                },
                "end": {
                    "line": 63,
                    "column": 23
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 49,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 49,
                            "column": 8
                        },
                        "end": {
                            "line": 49,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 49,
                            "column": 8
                        },
                        "end": {
                            "line": 49,
                            "column": 8
                        }
                    }
                ]
            },
            "2": {
                "line": 50,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 51,
                            "column": 12
                        },
                        "end": {
                            "line": 51,
                            "column": 24
                        }
                    },
                    {
                        "start": {
                            "line": 51,
                            "column": 27
                        },
                        "end": {
                            "line": 51,
                            "column": 53
                        }
                    }
                ]
            },
            "3": {
                "line": 52,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 52,
                            "column": 12
                        },
                        "end": {
                            "line": 52,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 52,
                            "column": 12
                        },
                        "end": {
                            "line": 52,
                            "column": 12
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('dataschema-base', function (Y, NAME) {",
            "",
            "/**",
            " * The DataSchema utility provides a common configurable interface for widgets to",
            " * apply a given schema to a variety of data.",
            " *",
            " * @module dataschema",
            " * @main dataschema",
            " */",
            "",
            "/**",
            " * Provides the base DataSchema implementation, which can be extended to ",
            " * create DataSchemas for specific data formats, such XML, JSON, text and",
            " * arrays.",
            " *",
            " * @module dataschema",
            " * @submodule dataschema-base",
            " */",
            "",
            "var LANG = Y.Lang,",
            "/**",
            " * Base class for the YUI DataSchema Utility.",
            " * @class DataSchema.Base",
            " * @static",
            " */",
            "    SchemaBase = {",
            "    /**",
            "     * Overridable method returns data as-is.",
            "     *",
            "     * @method apply",
            "     * @param schema {Object} Schema to apply.",
            "     * @param data {Object} Data.",
            "     * @return {Object} Schema-parsed data.",
            "     * @static",
            "     */",
            "    apply: function(schema, data) {",
            "        return data;",
            "    },",
            "    ",
            "    /**",
            "     * Applies field parser, if defined",
            "     *",
            "     * @method parse",
            "     * @param value {Object} Original value.",
            "     * @param field {Object} Field.",
            "     * @return {Object} Type-converted value.",
            "     */",
            "    parse: function(value, field) {",
            "        if(field.parser) {",
            "            var parser = (LANG.isFunction(field.parser)) ?",
            "            field.parser : Y.Parsers[field.parser+''];",
            "            if(parser) {",
            "                value = parser.call(this, value);",
            "            }",
            "            else {",
            "            }",
            "        }",
            "        return value;",
            "    }",
            "};",
            "",
            "Y.namespace(\"DataSchema\").Base = SchemaBase;",
            "Y.namespace(\"Parsers\");",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"base\"]});",
            "",
            "}());"
        ]
    },
    "build/dataschema-array/dataschema-array.js": {
        "path": "build/dataschema-array/dataschema-array.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 6,
            "4": 6,
            "5": 5,
            "6": 5,
            "7": 0,
            "8": 1,
            "9": 6,
            "10": 5,
            "11": 5,
            "12": 15,
            "13": 15,
            "14": 15,
            "15": 15,
            "16": 10,
            "17": 30,
            "18": 30,
            "19": 30,
            "20": 30,
            "21": 5,
            "22": 4,
            "23": 1,
            "24": 15,
            "25": 5,
            "26": 5,
            "27": 1
        },
        "b": {
            "1": [
                5,
                1
            ],
            "2": [
                5,
                0
            ],
            "3": [
                5,
                5
            ],
            "4": [
                10,
                5
            ],
            "5": [
                15,
                11
            ],
            "6": [
                0,
                5
            ],
            "7": [
                4,
                1
            ],
            "8": [
                10,
                5
            ],
            "9": [
                20,
                10
            ],
            "10": [
                15,
                15
            ],
            "11": [
                4,
                1
            ]
        },
        "f": {
            "1": 1,
            "2": 6,
            "3": 5
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 28
                    },
                    "end": {
                        "line": 1,
                        "column": 47
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 121,
                "loc": {
                    "start": {
                        "line": 121,
                        "column": 15
                    },
                    "end": {
                        "line": 121,
                        "column": 38
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 152,
                "loc": {
                    "start": {
                        "line": 152,
                        "column": 23
                    },
                    "end": {
                        "line": 152,
                        "column": 60
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 186,
                    "column": 51
                }
            },
            "2": {
                "start": {
                    "line": 21,
                    "column": 0
                },
                "end": {
                    "line": 181,
                    "column": 6
                }
            },
            "3": {
                "start": {
                    "line": 122,
                    "column": 12
                },
                "end": {
                    "line": 123,
                    "column": 48
                }
            },
            "4": {
                "start": {
                    "line": 125,
                    "column": 12
                },
                "end": {
                    "line": 136,
                    "column": 13
                }
            },
            "5": {
                "start": {
                    "line": 126,
                    "column": 16
                },
                "end": {
                    "line": 132,
                    "column": 17
                }
            },
            "6": {
                "start": {
                    "line": 128,
                    "column": 20
                },
                "end": {
                    "line": 128,
                    "column": 108
                }
            },
            "7": {
                "start": {
                    "line": 131,
                    "column": 20
                },
                "end": {
                    "line": 131,
                    "column": 47
                }
            },
            "8": {
                "start": {
                    "line": 135,
                    "column": 16
                },
                "end": {
                    "line": 135,
                    "column": 73
                }
            },
            "9": {
                "start": {
                    "line": 138,
                    "column": 12
                },
                "end": {
                    "line": 138,
                    "column": 28
                }
            },
            "10": {
                "start": {
                    "line": 153,
                    "column": 12
                },
                "end": {
                    "line": 154,
                    "column": 60
                }
            },
            "11": {
                "start": {
                    "line": 156,
                    "column": 12
                },
                "end": {
                    "line": 176,
                    "column": 13
                }
            },
            "12": {
                "start": {
                    "line": 157,
                    "column": 16
                },
                "end": {
                    "line": 157,
                    "column": 28
                }
            },
            "13": {
                "start": {
                    "line": 158,
                    "column": 16
                },
                "end": {
                    "line": 158,
                    "column": 35
                }
            },
            "14": {
                "start": {
                    "line": 159,
                    "column": 16
                },
                "end": {
                    "line": 159,
                    "column": 135
                }
            },
            "15": {
                "start": {
                    "line": 160,
                    "column": 16
                },
                "end": {
                    "line": 174,
                    "column": 17
                }
            },
            "16": {
                "start": {
                    "line": 161,
                    "column": 20
                },
                "end": {
                    "line": 166,
                    "column": 21
                }
            },
            "17": {
                "start": {
                    "line": 162,
                    "column": 24
                },
                "end": {
                    "line": 162,
                    "column": 42
                }
            },
            "18": {
                "start": {
                    "line": 163,
                    "column": 24
                },
                "end": {
                    "line": 163,
                    "column": 81
                }
            },
            "19": {
                "start": {
                    "line": 164,
                    "column": 24
                },
                "end": {
                    "line": 164,
                    "column": 85
                }
            },
            "20": {
                "start": {
                    "line": 165,
                    "column": 24
                },
                "end": {
                    "line": 165,
                    "column": 87
                }
            },
            "21": {
                "start": {
                    "line": 168,
                    "column": 21
                },
                "end": {
                    "line": 174,
                    "column": 17
                }
            },
            "22": {
                "start": {
                    "line": 169,
                    "column": 20
                },
                "end": {
                    "line": 169,
                    "column": 34
                }
            },
            "23": {
                "start": {
                    "line": 173,
                    "column": 20
                },
                "end": {
                    "line": 173,
                    "column": 34
                }
            },
            "24": {
                "start": {
                    "line": 175,
                    "column": 16
                },
                "end": {
                    "line": 175,
                    "column": 36
                }
            },
            "25": {
                "start": {
                    "line": 177,
                    "column": 12
                },
                "end": {
                    "line": 177,
                    "column": 39
                }
            },
            "26": {
                "start": {
                    "line": 179,
                    "column": 12
                },
                "end": {
                    "line": 179,
                    "column": 28
                }
            },
            "27": {
                "start": {
                    "line": 183,
                    "column": 0
                },
                "end": {
                    "line": 183,
                    "column": 59
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 125,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 125,
                            "column": 12
                        },
                        "end": {
                            "line": 125,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 125,
                            "column": 12
                        },
                        "end": {
                            "line": 125,
                            "column": 12
                        }
                    }
                ]
            },
            "2": {
                "line": 126,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 126,
                            "column": 16
                        },
                        "end": {
                            "line": 126,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 126,
                            "column": 16
                        },
                        "end": {
                            "line": 126,
                            "column": 16
                        }
                    }
                ]
            },
            "3": {
                "line": 126,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 126,
                            "column": 19
                        },
                        "end": {
                            "line": 126,
                            "column": 25
                        }
                    },
                    {
                        "start": {
                            "line": 126,
                            "column": 29
                        },
                        "end": {
                            "line": 126,
                            "column": 62
                        }
                    }
                ]
            },
            "4": {
                "line": 159,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 159,
                            "column": 73
                        },
                        "end": {
                            "line": 159,
                            "column": 74
                        }
                    },
                    {
                        "start": {
                            "line": 159,
                            "column": 77
                        },
                        "end": {
                            "line": 159,
                            "column": 134
                        }
                    }
                ]
            },
            "5": {
                "line": 159,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 159,
                            "column": 24
                        },
                        "end": {
                            "line": 159,
                            "column": 43
                        }
                    },
                    {
                        "start": {
                            "line": 159,
                            "column": 47
                        },
                        "end": {
                            "line": 159,
                            "column": 69
                        }
                    }
                ]
            },
            "6": {
                "line": 159,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 159,
                            "column": 100
                        },
                        "end": {
                            "line": 159,
                            "column": 101
                        }
                    },
                    {
                        "start": {
                            "line": 159,
                            "column": 104
                        },
                        "end": {
                            "line": 159,
                            "column": 134
                        }
                    }
                ]
            },
            "7": {
                "line": 159,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 159,
                            "column": 128
                        },
                        "end": {
                            "line": 159,
                            "column": 129
                        }
                    },
                    {
                        "start": {
                            "line": 159,
                            "column": 132
                        },
                        "end": {
                            "line": 159,
                            "column": 134
                        }
                    }
                ]
            },
            "8": {
                "line": 160,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 160,
                            "column": 16
                        },
                        "end": {
                            "line": 160,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 160,
                            "column": 16
                        },
                        "end": {
                            "line": 160,
                            "column": 16
                        }
                    }
                ]
            },
            "9": {
                "line": 163,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 163,
                            "column": 63
                        },
                        "end": {
                            "line": 163,
                            "column": 72
                        }
                    },
                    {
                        "start": {
                            "line": 163,
                            "column": 75
                        },
                        "end": {
                            "line": 163,
                            "column": 80
                        }
                    }
                ]
            },
            "10": {
                "line": 164,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 164,
                            "column": 65
                        },
                        "end": {
                            "line": 164,
                            "column": 74
                        }
                    },
                    {
                        "start": {
                            "line": 164,
                            "column": 77
                        },
                        "end": {
                            "line": 164,
                            "column": 84
                        }
                    }
                ]
            },
            "11": {
                "line": 168,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 168,
                            "column": 21
                        },
                        "end": {
                            "line": 168,
                            "column": 21
                        }
                    },
                    {
                        "start": {
                            "line": 168,
                            "column": 21
                        },
                        "end": {
                            "line": 168,
                            "column": 21
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('dataschema-array', function (Y, NAME) {",
            "",
            "/**",
            " * Provides a DataSchema implementation which can be used to work with data",
            " * stored in arrays.",
            " *",
            " * @module dataschema",
            " * @submodule dataschema-array",
            " */",
            "",
            "/**",
            "Provides a DataSchema implementation which can be used to work with data",
            "stored in arrays.",
            "",
            "See the `apply` method below for usage.",
            "",
            "@class DataSchema.Array",
            "@extends DataSchema.Base",
            "@static",
            "**/",
            "var LANG = Y.Lang,",
            "",
            "    SchemaArray = {",
            "",
            "        ////////////////////////////////////////////////////////////////////////",
            "        //",
            "        // DataSchema.Array static methods",
            "        //",
            "        ////////////////////////////////////////////////////////////////////////",
            "",
            "        /**",
            "        Applies a schema to an array of data, returning a normalized object",
            "        with results in the `results` property. The `meta` property of the",
            "        response object is present for consistency, but is assigned an empty",
            "        object.  If the input data is absent or not an array, an `error`",
            "        property will be added.",
            "",
            "        The input array is expected to contain objects, arrays, or strings.",
            "",
            "        If _schema_ is not specified or _schema.resultFields_ is not an array,",
            "        `response.results` will be assigned the input array unchanged.",
            "",
            "        When a _schema_ is specified, the following will occur:",
            "",
            "        If the input array contains strings, they will be copied as-is into the",
            "        `response.results` array.",
            "",
            "        If the input array contains arrays, `response.results` will contain an",
            "        array of objects with key:value pairs assuming the fields in",
            "        _schema.resultFields_ are ordered in accordance with the data array",
            "        values.",
            "",
            "        If the input array contains objects, the identified",
            "        _schema.resultFields_ will be used to extract a value from those",
            "        objects for the output result.",
            "",
            "        _schema.resultFields_ field identifiers are objects with the following properties:",
            "",
            "          * `key`   : <strong>(required)</strong> The locator name (String)",
            "          * `parser`: A function or the name of a function on `Y.Parsers` used",
            "                to convert the input value into a normalized type.  Parser",
            "                functions are passed the value as input and are expected to",
            "                return a value.",
            "",
            "        If no value parsing is needed, you can use strings as identifiers",
            "        instead of objects (see example below).",
            "",
            "        @example",
            "            // Process array of arrays",
            "            var schema = { resultFields: [ 'fruit', 'color' ] },",
            "                data = [",
            "                    [ 'Banana', 'yellow' ],",
            "                    [ 'Orange', 'orange' ],",
            "                    [ 'Eggplant', 'purple' ]",
            "                ];",
            "",
            "            var response = Y.DataSchema.Array.apply(schema, data);",
            "",
            "            // response.results[0] is { fruit: \"Banana\", color: \"yellow\" }",
            "",
            "            ",
            "            // Process array of objects",
            "            data = [",
            "                { fruit: 'Banana', color: 'yellow', price: '1.96' },",
            "                { fruit: 'Orange', color: 'orange', price: '2.04' },",
            "                { fruit: 'Eggplant', color: 'purple', price: '4.31' }",
            "            ];",
            "",
            "            response = Y.DataSchema.Array.apply(schema, data);",
            "",
            "            // response.results[0] is { fruit: \"Banana\", color: \"yellow\" }",
            "",
            "",
            "            // Use parsers",
            "            schema.resultFields = [",
            "                {",
            "                    key: 'fruit',",
            "                    parser: function (val) { return val.toUpperCase(); }",
            "                },",
            "                {",
            "                    key: 'price',",
            "                    parser: 'number' // Uses Y.Parsers.number",
            "                }",
            "            ];",
            "",
            "            response = Y.DataSchema.Array.apply(schema, data);",
            "",
            "            // Note price was converted from a numeric string to a number",
            "            // response.results[0] looks like { fruit: \"BANANA\", price: 1.96 }",
            "         ",
            "        @method apply",
            "        @param {Object} [schema] Schema to apply.  Supported configuration",
            "            properties are:",
            "          @param {Array} [schema.resultFields] Field identifiers to",
            "              locate/assign values in the response records. See above for",
            "              details.",
            "        @param {Array} data Array data.",
            "        @return {Object} An Object with properties `results` and `meta`",
            "        @static",
            "        **/",
            "        apply: function(schema, data) {",
            "            var data_in = data,",
            "                data_out = {results:[],meta:{}};",
            "",
            "            if(LANG.isArray(data_in)) {",
            "                if(schema && LANG.isArray(schema.resultFields)) {",
            "                    // Parse results data",
            "                    data_out = SchemaArray._parseResults.call(this, schema.resultFields, data_in, data_out);",
            "                }",
            "                else {",
            "                    data_out.results = data_in;",
            "                }",
            "            }",
            "            else {",
            "                data_out.error = new Error(\"Array schema parse failure\");",
            "            }",
            "",
            "            return data_out;",
            "        },",
            "",
            "        /**",
            "         * Schema-parsed list of results from full data",
            "         *",
            "         * @method _parseResults",
            "         * @param fields {Array} Schema to parse against.",
            "         * @param array_in {Array} Array to parse.",
            "         * @param data_out {Object} In-progress parsed data to update.",
            "         * @return {Object} Parsed data object.",
            "         * @static",
            "         * @protected",
            "         */",
            "        _parseResults: function(fields, array_in, data_out) {",
            "            var results = [],",
            "                result, item, type, field, key, value, i, j;",
            "",
            "            for(i=array_in.length-1; i>-1; i--) {",
            "                result = {};",
            "                item = array_in[i];",
            "                type = (LANG.isObject(item) && !LANG.isFunction(item)) ? 2 : (LANG.isArray(item)) ? 1 : (LANG.isString(item)) ? 0 : -1;",
            "                if(type > 0) {",
            "                    for(j=fields.length-1; j>-1; j--) {",
            "                        field = fields[j];",
            "                        key = (!LANG.isUndefined(field.key)) ? field.key : field;",
            "                        value = (!LANG.isUndefined(item[key])) ? item[key] : item[j];",
            "                        result[key] = Y.DataSchema.Base.parse.call(this, value, field);",
            "                    }",
            "                }",
            "                else if(type === 0) {",
            "                    result = item;",
            "                }",
            "                else {",
            "                    //TODO: null or {}?",
            "                    result = null;",
            "                }",
            "                results[i] = result;",
            "            }",
            "            data_out.results = results;",
            "",
            "            return data_out;",
            "        }",
            "    };",
            "",
            "Y.DataSchema.Array = Y.mix(SchemaArray, Y.DataSchema.Base);",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"dataschema-base\"]});",
            "",
            "}());"
        ]
    },
    "build/dataschema-json/dataschema-json.js": {
        "path": "build/dataschema-json/dataschema-json.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 48,
            "5": 48,
            "6": 46,
            "7": 10,
            "8": 10,
            "9": 5,
            "10": 5,
            "11": 46,
            "12": 46,
            "13": 69,
            "14": 15,
            "15": 48,
            "16": 62,
            "17": 62,
            "18": 108,
            "19": 92,
            "20": 16,
            "21": 16,
            "22": 62,
            "23": 15,
            "24": 15,
            "25": 1,
            "26": 1,
            "27": 0,
            "28": 0,
            "29": 15,
            "30": 14,
            "31": 14,
            "32": 5,
            "33": 1,
            "34": 15,
            "35": 14,
            "36": 14,
            "37": 10,
            "38": 10,
            "39": 0,
            "40": 4,
            "41": 3,
            "42": 3,
            "43": 14,
            "44": 10,
            "45": 10,
            "46": 27,
            "47": 27,
            "48": 27,
            "49": 27,
            "50": 27,
            "51": 27,
            "52": 19,
            "53": 8,
            "54": 27,
            "55": 27,
            "56": 1,
            "57": 10,
            "58": 29,
            "59": 29,
            "60": 29,
            "61": 29,
            "62": 20,
            "63": 20,
            "64": 20,
            "65": 8,
            "66": 8,
            "67": 5,
            "68": 5,
            "69": 5,
            "70": 15,
            "71": 29,
            "72": 66,
            "73": 66,
            "74": 29,
            "75": 3,
            "76": 3,
            "77": 3,
            "78": 0,
            "79": 29,
            "80": 10,
            "81": 10,
            "82": 5,
            "83": 5,
            "84": 5,
            "85": 7,
            "86": 7,
            "87": 7,
            "88": 7,
            "89": 0,
            "90": 5,
            "91": 1
        },
        "b": {
            "1": [
                46,
                2
            ],
            "2": [
                15,
                54
            ],
            "3": [
                92,
                16
            ],
            "4": [
                108,
                108
            ],
            "5": [
                1,
                14
            ],
            "6": [
                14,
                1
            ],
            "7": [
                15,
                14
            ],
            "8": [
                5,
                9
            ],
            "9": [
                12,
                2
            ],
            "10": [
                12,
                2
            ],
            "11": [
                10,
                4
            ],
            "12": [
                10,
                0
            ],
            "13": [
                3,
                1
            ],
            "14": [
                27,
                15
            ],
            "15": [
                27,
                16
            ],
            "16": [
                27,
                0
            ],
            "17": [
                19,
                8
            ],
            "18": [
                1,
                26
            ],
            "19": [
                1,
                26
            ],
            "20": [
                29,
                0
            ],
            "21": [
                8,
                12
            ],
            "22": [
                5,
                3
            ],
            "23": [
                0,
                66
            ],
            "24": [
                0,
                3
            ],
            "25": [
                5,
                0
            ],
            "26": [
                7,
                0
            ],
            "27": [
                7,
                0
            ],
            "28": [
                7,
                7
            ]
        },
        "f": {
            "1": 1,
            "2": 48,
            "3": 10,
            "4": 5,
            "5": 62,
            "6": 15,
            "7": 14,
            "8": 10,
            "9": 5
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 27
                    },
                    "end": {
                        "line": 1,
                        "column": 46
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 44,
                "loc": {
                    "start": {
                        "line": 44,
                        "column": 13
                    },
                    "end": {
                        "line": 44,
                        "column": 31
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 56,
                "loc": {
                    "start": {
                        "line": 56,
                        "column": 16
                    },
                    "end": {
                        "line": 56,
                        "column": 35
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 58,
                "loc": {
                    "start": {
                        "line": 58,
                        "column": 16
                    },
                    "end": {
                        "line": 58,
                        "column": 32
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 88,
                "loc": {
                    "start": {
                        "line": 88,
                        "column": 22
                    },
                    "end": {
                        "line": 88,
                        "column": 44
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 221,
                "loc": {
                    "start": {
                        "line": 221,
                        "column": 11
                    },
                    "end": {
                        "line": 221,
                        "column": 34
                    }
                }
            },
            "7": {
                "name": "(anonymous_7)",
                "line": 263,
                "loc": {
                    "start": {
                        "line": 263,
                        "column": 19
                    },
                    "end": {
                        "line": 263,
                        "column": 55
                    }
                }
            },
            "8": {
                "name": "(anonymous_8)",
                "line": 303,
                "loc": {
                    "start": {
                        "line": 303,
                        "column": 21
                    },
                    "end": {
                        "line": 303,
                        "column": 58
                    }
                }
            },
            "9": {
                "name": "(anonymous_9)",
                "line": 416,
                "loc": {
                    "start": {
                        "line": 416,
                        "column": 16
                    },
                    "end": {
                        "line": 416,
                        "column": 56
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 439,
                    "column": 59
                }
            },
            "2": {
                "start": {
                    "line": 19,
                    "column": 0
                },
                "end": {
                    "line": 27,
                    "column": 15
                }
            },
            "3": {
                "start": {
                    "line": 29,
                    "column": 0
                },
                "end": {
                    "line": 433,
                    "column": 2
                }
            },
            "4": {
                "start": {
                    "line": 45,
                    "column": 8
                },
                "end": {
                    "line": 47,
                    "column": 18
                }
            },
            "5": {
                "start": {
                    "line": 49,
                    "column": 8
                },
                "end": {
                    "line": 75,
                    "column": 9
                }
            },
            "6": {
                "start": {
                    "line": 54,
                    "column": 12
                },
                "end": {
                    "line": 59,
                    "column": 34
                }
            },
            "7": {
                "start": {
                    "line": 56,
                    "column": 36
                },
                "end": {
                    "line": 56,
                    "column": 47
                }
            },
            "8": {
                "start": {
                    "line": 56,
                    "column": 47
                },
                "end": {
                    "line": 56,
                    "column": 65
                }
            },
            "9": {
                "start": {
                    "line": 58,
                    "column": 33
                },
                "end": {
                    "line": 58,
                    "column": 59
                }
            },
            "10": {
                "start": {
                    "line": 58,
                    "column": 59
                },
                "end": {
                    "line": 58,
                    "column": 77
                }
            },
            "11": {
                "start": {
                    "line": 65,
                    "column": 12
                },
                "end": {
                    "line": 65,
                    "column": 38
                }
            },
            "12": {
                "start": {
                    "line": 66,
                    "column": 12
                },
                "end": {
                    "line": 70,
                    "column": 13
                }
            },
            "13": {
                "start": {
                    "line": 67,
                    "column": 16
                },
                "end": {
                    "line": 69,
                    "column": 17
                }
            },
            "14": {
                "start": {
                    "line": 68,
                    "column": 20
                },
                "end": {
                    "line": 68,
                    "column": 67
                }
            },
            "15": {
                "start": {
                    "line": 76,
                    "column": 8
                },
                "end": {
                    "line": 76,
                    "column": 20
                }
            },
            "16": {
                "start": {
                    "line": 89,
                    "column": 8
                },
                "end": {
                    "line": 90,
                    "column": 30
                }
            },
            "17": {
                "start": {
                    "line": 91,
                    "column": 8
                },
                "end": {
                    "line": 98,
                    "column": 9
                }
            },
            "18": {
                "start": {
                    "line": 92,
                    "column": 12
                },
                "end": {
                    "line": 97,
                    "column": 13
                }
            },
            "19": {
                "start": {
                    "line": 93,
                    "column": 16
                },
                "end": {
                    "line": 93,
                    "column": 37
                }
            },
            "20": {
                "start": {
                    "line": 95,
                    "column": 16
                },
                "end": {
                    "line": 95,
                    "column": 33
                }
            },
            "21": {
                "start": {
                    "line": 96,
                    "column": 16
                },
                "end": {
                    "line": 96,
                    "column": 22
                }
            },
            "22": {
                "start": {
                    "line": 99,
                    "column": 8
                },
                "end": {
                    "line": 99,
                    "column": 20
                }
            },
            "23": {
                "start": {
                    "line": 222,
                    "column": 8
                },
                "end": {
                    "line": 223,
                    "column": 49
                }
            },
            "24": {
                "start": {
                    "line": 226,
                    "column": 8
                },
                "end": {
                    "line": 234,
                    "column": 9
                }
            },
            "25": {
                "start": {
                    "line": 227,
                    "column": 12
                },
                "end": {
                    "line": 233,
                    "column": 13
                }
            },
            "26": {
                "start": {
                    "line": 228,
                    "column": 16
                },
                "end": {
                    "line": 228,
                    "column": 45
                }
            },
            "27": {
                "start": {
                    "line": 231,
                    "column": 16
                },
                "end": {
                    "line": 231,
                    "column": 35
                }
            },
            "28": {
                "start": {
                    "line": 232,
                    "column": 16
                },
                "end": {
                    "line": 232,
                    "column": 32
                }
            },
            "29": {
                "start": {
                    "line": 236,
                    "column": 8
                },
                "end": {
                    "line": 247,
                    "column": 9
                }
            },
            "30": {
                "start": {
                    "line": 238,
                    "column": 12
                },
                "end": {
                    "line": 238,
                    "column": 86
                }
            },
            "31": {
                "start": {
                    "line": 241,
                    "column": 12
                },
                "end": {
                    "line": 243,
                    "column": 13
                }
            },
            "32": {
                "start": {
                    "line": 242,
                    "column": 16
                },
                "end": {
                    "line": 242,
                    "column": 87
                }
            },
            "33": {
                "start": {
                    "line": 246,
                    "column": 12
                },
                "end": {
                    "line": 246,
                    "column": 68
                }
            },
            "34": {
                "start": {
                    "line": 249,
                    "column": 8
                },
                "end": {
                    "line": 249,
                    "column": 24
                }
            },
            "35": {
                "start": {
                    "line": 264,
                    "column": 8
                },
                "end": {
                    "line": 272,
                    "column": 32
                }
            },
            "36": {
                "start": {
                    "line": 274,
                    "column": 8
                },
                "end": {
                    "line": 287,
                    "column": 9
                }
            },
            "37": {
                "start": {
                    "line": 279,
                    "column": 12
                },
                "end": {
                    "line": 283,
                    "column": 13
                }
            },
            "38": {
                "start": {
                    "line": 280,
                    "column": 16
                },
                "end": {
                    "line": 280,
                    "column": 105
                }
            },
            "39": {
                "start": {
                    "line": 282,
                    "column": 16
                },
                "end": {
                    "line": 282,
                    "column": 43
                }
            },
            "40": {
                "start": {
                    "line": 284,
                    "column": 15
                },
                "end": {
                    "line": 287,
                    "column": 9
                }
            },
            "41": {
                "start": {
                    "line": 285,
                    "column": 12
                },
                "end": {
                    "line": 285,
                    "column": 34
                }
            },
            "42": {
                "start": {
                    "line": 286,
                    "column": 12
                },
                "end": {
                    "line": 286,
                    "column": 73
                }
            },
            "43": {
                "start": {
                    "line": 289,
                    "column": 8
                },
                "end": {
                    "line": 289,
                    "column": 24
                }
            },
            "44": {
                "start": {
                    "line": 304,
                    "column": 8
                },
                "end": {
                    "line": 309,
                    "column": 27
                }
            },
            "45": {
                "start": {
                    "line": 312,
                    "column": 8
                },
                "end": {
                    "line": 347,
                    "column": 9
                }
            },
            "46": {
                "start": {
                    "line": 313,
                    "column": 12
                },
                "end": {
                    "line": 313,
                    "column": 30
                }
            },
            "47": {
                "start": {
                    "line": 314,
                    "column": 12
                },
                "end": {
                    "line": 314,
                    "column": 37
                }
            },
            "48": {
                "start": {
                    "line": 315,
                    "column": 12
                },
                "end": {
                    "line": 315,
                    "column": 43
                }
            },
            "49": {
                "start": {
                    "line": 318,
                    "column": 12
                },
                "end": {
                    "line": 318,
                    "column": 47
                }
            },
            "50": {
                "start": {
                    "line": 319,
                    "column": 12
                },
                "end": {
                    "line": 333,
                    "column": 13
                }
            },
            "51": {
                "start": {
                    "line": 320,
                    "column": 16
                },
                "end": {
                    "line": 331,
                    "column": 17
                }
            },
            "52": {
                "start": {
                    "line": 321,
                    "column": 20
                },
                "end": {
                    "line": 324,
                    "column": 23
                }
            },
            "53": {
                "start": {
                    "line": 326,
                    "column": 20
                },
                "end": {
                    "line": 330,
                    "column": 23
                }
            },
            "54": {
                "start": {
                    "line": 337,
                    "column": 12
                },
                "end": {
                    "line": 339,
                    "column": 53
                }
            },
            "55": {
                "start": {
                    "line": 341,
                    "column": 12
                },
                "end": {
                    "line": 346,
                    "column": 13
                }
            },
            "56": {
                "start": {
                    "line": 342,
                    "column": 16
                },
                "end": {
                    "line": 345,
                    "column": 19
                }
            },
            "57": {
                "start": {
                    "line": 351,
                    "column": 8
                },
                "end": {
                    "line": 400,
                    "column": 9
                }
            },
            "58": {
                "start": {
                    "line": 352,
                    "column": 12
                },
                "end": {
                    "line": 352,
                    "column": 24
                }
            },
            "59": {
                "start": {
                    "line": 353,
                    "column": 12
                },
                "end": {
                    "line": 353,
                    "column": 33
                }
            },
            "60": {
                "start": {
                    "line": 354,
                    "column": 12
                },
                "end": {
                    "line": 399,
                    "column": 13
                }
            },
            "61": {
                "start": {
                    "line": 356,
                    "column": 16
                },
                "end": {
                    "line": 378,
                    "column": 17
                }
            },
            "62": {
                "start": {
                    "line": 357,
                    "column": 20
                },
                "end": {
                    "line": 357,
                    "column": 43
                }
            },
            "63": {
                "start": {
                    "line": 358,
                    "column": 20
                },
                "end": {
                    "line": 358,
                    "column": 73
                }
            },
            "64": {
                "start": {
                    "line": 359,
                    "column": 20
                },
                "end": {
                    "line": 374,
                    "column": 21
                }
            },
            "65": {
                "start": {
                    "line": 360,
                    "column": 24
                },
                "end": {
                    "line": 360,
                    "column": 82
                }
            },
            "66": {
                "start": {
                    "line": 364,
                    "column": 24
                },
                "end": {
                    "line": 373,
                    "column": 25
                }
            },
            "67": {
                "start": {
                    "line": 365,
                    "column": 28
                },
                "end": {
                    "line": 368,
                    "column": 31
                }
            },
            "68": {
                "start": {
                    "line": 371,
                    "column": 28
                },
                "end": {
                    "line": 371,
                    "column": 53
                }
            },
            "69": {
                "start": {
                    "line": 372,
                    "column": 28
                },
                "end": {
                    "line": 372,
                    "column": 37
                }
            },
            "70": {
                "start": {
                    "line": 376,
                    "column": 20
                },
                "end": {
                    "line": 377,
                    "column": 80
                }
            },
            "71": {
                "start": {
                    "line": 381,
                    "column": 16
                },
                "end": {
                    "line": 387,
                    "column": 17
                }
            },
            "72": {
                "start": {
                    "line": 382,
                    "column": 20
                },
                "end": {
                    "line": 382,
                    "column": 42
                }
            },
            "73": {
                "start": {
                    "line": 384,
                    "column": 20
                },
                "end": {
                    "line": 386,
                    "column": 66
                }
            },
            "74": {
                "start": {
                    "line": 390,
                    "column": 16
                },
                "end": {
                    "line": 397,
                    "column": 17
                }
            },
            "75": {
                "start": {
                    "line": 391,
                    "column": 20
                },
                "end": {
                    "line": 391,
                    "column": 46
                }
            },
            "76": {
                "start": {
                    "line": 392,
                    "column": 20
                },
                "end": {
                    "line": 392,
                    "column": 81
                }
            },
            "77": {
                "start": {
                    "line": 394,
                    "column": 20
                },
                "end": {
                    "line": 396,
                    "column": 21
                }
            },
            "78": {
                "start": {
                    "line": 395,
                    "column": 24
                },
                "end": {
                    "line": 395,
                    "column": 43
                }
            },
            "79": {
                "start": {
                    "line": 398,
                    "column": 16
                },
                "end": {
                    "line": 398,
                    "column": 36
                }
            },
            "80": {
                "start": {
                    "line": 401,
                    "column": 8
                },
                "end": {
                    "line": 401,
                    "column": 35
                }
            },
            "81": {
                "start": {
                    "line": 402,
                    "column": 8
                },
                "end": {
                    "line": 402,
                    "column": 24
                }
            },
            "82": {
                "start": {
                    "line": 417,
                    "column": 8
                },
                "end": {
                    "line": 430,
                    "column": 9
                }
            },
            "83": {
                "start": {
                    "line": 418,
                    "column": 12
                },
                "end": {
                    "line": 418,
                    "column": 26
                }
            },
            "84": {
                "start": {
                    "line": 419,
                    "column": 12
                },
                "end": {
                    "line": 426,
                    "column": 13
                }
            },
            "85": {
                "start": {
                    "line": 420,
                    "column": 16
                },
                "end": {
                    "line": 425,
                    "column": 17
                }
            },
            "86": {
                "start": {
                    "line": 421,
                    "column": 20
                },
                "end": {
                    "line": 421,
                    "column": 63
                }
            },
            "87": {
                "start": {
                    "line": 422,
                    "column": 20
                },
                "end": {
                    "line": 424,
                    "column": 21
                }
            },
            "88": {
                "start": {
                    "line": 423,
                    "column": 24
                },
                "end": {
                    "line": 423,
                    "column": 88
                }
            },
            "89": {
                "start": {
                    "line": 429,
                    "column": 12
                },
                "end": {
                    "line": 429,
                    "column": 75
                }
            },
            "90": {
                "start": {
                    "line": 431,
                    "column": 8
                },
                "end": {
                    "line": 431,
                    "column": 24
                }
            },
            "91": {
                "start": {
                    "line": 436,
                    "column": 0
                },
                "end": {
                    "line": 436,
                    "column": 44
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 49,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 49,
                            "column": 8
                        },
                        "end": {
                            "line": 49,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 49,
                            "column": 8
                        },
                        "end": {
                            "line": 49,
                            "column": 8
                        }
                    }
                ]
            },
            "2": {
                "line": 67,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 67,
                            "column": 16
                        },
                        "end": {
                            "line": 67,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 67,
                            "column": 16
                        },
                        "end": {
                            "line": 67,
                            "column": 16
                        }
                    }
                ]
            },
            "3": {
                "line": 92,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 92,
                            "column": 12
                        },
                        "end": {
                            "line": 92,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 92,
                            "column": 12
                        },
                        "end": {
                            "line": 92,
                            "column": 12
                        }
                    }
                ]
            },
            "4": {
                "line": 92,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 92,
                            "column": 16
                        },
                        "end": {
                            "line": 92,
                            "column": 30
                        }
                    },
                    {
                        "start": {
                            "line": 92,
                            "column": 35
                        },
                        "end": {
                            "line": 92,
                            "column": 50
                        }
                    }
                ]
            },
            "5": {
                "line": 226,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 226,
                            "column": 8
                        },
                        "end": {
                            "line": 226,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 226,
                            "column": 8
                        },
                        "end": {
                            "line": 226,
                            "column": 8
                        }
                    }
                ]
            },
            "6": {
                "line": 236,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 236,
                            "column": 8
                        },
                        "end": {
                            "line": 236,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 236,
                            "column": 8
                        },
                        "end": {
                            "line": 236,
                            "column": 8
                        }
                    }
                ]
            },
            "7": {
                "line": 236,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 236,
                            "column": 12
                        },
                        "end": {
                            "line": 236,
                            "column": 29
                        }
                    },
                    {
                        "start": {
                            "line": 236,
                            "column": 33
                        },
                        "end": {
                            "line": 236,
                            "column": 39
                        }
                    }
                ]
            },
            "8": {
                "line": 241,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 241,
                            "column": 12
                        },
                        "end": {
                            "line": 241,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 241,
                            "column": 12
                        },
                        "end": {
                            "line": 241,
                            "column": 12
                        }
                    }
                ]
            },
            "9": {
                "line": 267,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 268,
                            "column": 25
                        },
                        "end": {
                            "line": 270,
                            "column": 61
                        }
                    },
                    {
                        "start": {
                            "line": 272,
                            "column": 24
                        },
                        "end": {
                            "line": 272,
                            "column": 31
                        }
                    }
                ]
            },
            "10": {
                "line": 268,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 268,
                            "column": 25
                        },
                        "end": {
                            "line": 268,
                            "column": 48
                        }
                    },
                    {
                        "start": {
                            "line": 270,
                            "column": 28
                        },
                        "end": {
                            "line": 270,
                            "column": 61
                        }
                    }
                ]
            },
            "11": {
                "line": 274,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 274,
                            "column": 8
                        },
                        "end": {
                            "line": 274,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 274,
                            "column": 8
                        },
                        "end": {
                            "line": 274,
                            "column": 8
                        }
                    }
                ]
            },
            "12": {
                "line": 279,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 279,
                            "column": 12
                        },
                        "end": {
                            "line": 279,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 279,
                            "column": 12
                        },
                        "end": {
                            "line": 279,
                            "column": 12
                        }
                    }
                ]
            },
            "13": {
                "line": 284,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 284,
                            "column": 15
                        },
                        "end": {
                            "line": 284,
                            "column": 15
                        }
                    },
                    {
                        "start": {
                            "line": 284,
                            "column": 15
                        },
                        "end": {
                            "line": 284,
                            "column": 15
                        }
                    }
                ]
            },
            "14": {
                "line": 314,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 314,
                            "column": 18
                        },
                        "end": {
                            "line": 314,
                            "column": 27
                        }
                    },
                    {
                        "start": {
                            "line": 314,
                            "column": 31
                        },
                        "end": {
                            "line": 314,
                            "column": 36
                        }
                    }
                ]
            },
            "15": {
                "line": 315,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 315,
                            "column": 22
                        },
                        "end": {
                            "line": 315,
                            "column": 35
                        }
                    },
                    {
                        "start": {
                            "line": 315,
                            "column": 39
                        },
                        "end": {
                            "line": 315,
                            "column": 42
                        }
                    }
                ]
            },
            "16": {
                "line": 319,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 319,
                            "column": 12
                        },
                        "end": {
                            "line": 319,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 319,
                            "column": 12
                        },
                        "end": {
                            "line": 319,
                            "column": 12
                        }
                    }
                ]
            },
            "17": {
                "line": 320,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 320,
                            "column": 16
                        },
                        "end": {
                            "line": 320,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 320,
                            "column": 16
                        },
                        "end": {
                            "line": 320,
                            "column": 16
                        }
                    }
                ]
            },
            "18": {
                "line": 337,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 338,
                            "column": 24
                        },
                        "end": {
                            "line": 338,
                            "column": 36
                        }
                    },
                    {
                        "start": {
                            "line": 339,
                            "column": 24
                        },
                        "end": {
                            "line": 339,
                            "column": 52
                        }
                    }
                ]
            },
            "19": {
                "line": 341,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 341,
                            "column": 12
                        },
                        "end": {
                            "line": 341,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 341,
                            "column": 12
                        },
                        "end": {
                            "line": 341,
                            "column": 12
                        }
                    }
                ]
            },
            "20": {
                "line": 354,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 354,
                            "column": 12
                        },
                        "end": {
                            "line": 354,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 354,
                            "column": 12
                        },
                        "end": {
                            "line": 354,
                            "column": 12
                        }
                    }
                ]
            },
            "21": {
                "line": 359,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 359,
                            "column": 20
                        },
                        "end": {
                            "line": 359,
                            "column": 20
                        }
                    },
                    {
                        "start": {
                            "line": 359,
                            "column": 20
                        },
                        "end": {
                            "line": 359,
                            "column": 20
                        }
                    }
                ]
            },
            "22": {
                "line": 364,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 364,
                            "column": 24
                        },
                        "end": {
                            "line": 364,
                            "column": 24
                        }
                    },
                    {
                        "start": {
                            "line": 364,
                            "column": 24
                        },
                        "end": {
                            "line": 364,
                            "column": 24
                        }
                    }
                ]
            },
            "23": {
                "line": 385,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 386,
                            "column": 28
                        },
                        "end": {
                            "line": 386,
                            "column": 37
                        }
                    },
                    {
                        "start": {
                            "line": 386,
                            "column": 40
                        },
                        "end": {
                            "line": 386,
                            "column": 57
                        }
                    }
                ]
            },
            "24": {
                "line": 394,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 394,
                            "column": 20
                        },
                        "end": {
                            "line": 394,
                            "column": 20
                        }
                    },
                    {
                        "start": {
                            "line": 394,
                            "column": 20
                        },
                        "end": {
                            "line": 394,
                            "column": 20
                        }
                    }
                ]
            },
            "25": {
                "line": 417,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 417,
                            "column": 8
                        },
                        "end": {
                            "line": 417,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 417,
                            "column": 8
                        },
                        "end": {
                            "line": 417,
                            "column": 8
                        }
                    }
                ]
            },
            "26": {
                "line": 420,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 420,
                            "column": 16
                        },
                        "end": {
                            "line": 420,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 420,
                            "column": 16
                        },
                        "end": {
                            "line": 420,
                            "column": 16
                        }
                    }
                ]
            },
            "27": {
                "line": 422,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 422,
                            "column": 20
                        },
                        "end": {
                            "line": 422,
                            "column": 20
                        }
                    },
                    {
                        "start": {
                            "line": 422,
                            "column": 20
                        },
                        "end": {
                            "line": 422,
                            "column": 20
                        }
                    }
                ]
            },
            "28": {
                "line": 422,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 422,
                            "column": 24
                        },
                        "end": {
                            "line": 422,
                            "column": 28
                        }
                    },
                    {
                        "start": {
                            "line": 422,
                            "column": 32
                        },
                        "end": {
                            "line": 422,
                            "column": 39
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('dataschema-json', function (Y, NAME) {",
            "",
            "/**",
            "Provides a DataSchema implementation which can be used to work with JSON data.",
            "",
            "@module dataschema",
            "@submodule dataschema-json",
            "**/",
            "",
            "/**",
            "Provides a DataSchema implementation which can be used to work with JSON data.",
            "",
            "See the `apply` method for usage.",
            "",
            "@class DataSchema.JSON",
            "@extends DataSchema.Base",
            "@static",
            "**/",
            "var LANG = Y.Lang,",
            "    isFunction = LANG.isFunction,",
            "    isObject   = LANG.isObject,",
            "    isArray    = LANG.isArray,",
            "    // TODO: I don't think the calls to Base.* need to be done via Base since",
            "    // Base is mixed into SchemaJSON.  Investigate for later.",
            "    Base       = Y.DataSchema.Base,",
            "",
            "    SchemaJSON;",
            "    ",
            "SchemaJSON = {",
            "",
            "/////////////////////////////////////////////////////////////////////////////",
            "//",
            "// DataSchema.JSON static methods",
            "//",
            "/////////////////////////////////////////////////////////////////////////////",
            "    /**",
            "     * Utility function converts JSON locator strings into walkable paths",
            "     *",
            "     * @method getPath",
            "     * @param locator {String} JSON value locator.",
            "     * @return {String[]} Walkable path to data value.",
            "     * @static",
            "     */",
            "    getPath: function(locator) {",
            "        var path = null,",
            "            keys = [],",
            "            i = 0;",
            "",
            "        if (locator) {",
            "            // Strip the [\"string keys\"] and [1] array indexes",
            "            // TODO: the first two steps can probably be reduced to one with",
            "            // /\\[\\s*(['\"])?(.*?)\\1\\s*\\]/g, but the array indices would be",
            "            // stored as strings.  This is not likely an issue.",
            "            locator = locator.",
            "                replace(/\\[\\s*(['\"])(.*?)\\1\\s*\\]/g,",
            "                function (x,$1,$2) {keys[i]=$2;return '.@'+(i++);}).",
            "                replace(/\\[(\\d+)\\]/g,",
            "                function (x,$1) {keys[i]=parseInt($1,10)|0;return '.@'+(i++);}).",
            "                replace(/^\\./,''); // remove leading dot",
            "",
            "            // Validate against problematic characters.",
            "            // commented out because the path isn't sent to eval, so it",
            "            // should be safe. I'm not sure what makes a locator invalid.",
            "            //if (!/[^\\w\\.\\$@]/.test(locator)) {",
            "            path = locator.split('.');",
            "            for (i=path.length-1; i >= 0; --i) {",
            "                if (path[i].charAt(0) === '@') {",
            "                    path[i] = keys[parseInt(path[i].substr(1),10)];",
            "                }",
            "            }",
            "            /*}",
            "            else {",
            "            }",
            "            */",
            "        }",
            "        return path;",
            "    },",
            "",
            "    /**",
            "     * Utility function to walk a path and return the value located there.",
            "     *",
            "     * @method getLocationValue",
            "     * @param path {String[]} Locator path.",
            "     * @param data {String} Data to traverse.",
            "     * @return {Object} Data value at location.",
            "     * @static",
            "     */",
            "    getLocationValue: function (path, data) {",
            "        var i = 0,",
            "            len = path.length;",
            "        for (;i<len;i++) {",
            "            if (isObject(data) && (path[i] in data)) {",
            "                data = data[path[i]];",
            "            } else {",
            "                data = undefined;",
            "                break;",
            "            }",
            "        }",
            "        return data;",
            "    },",
            "",
            "    /**",
            "    Applies a schema to an array of data located in a JSON structure, returning",
            "    a normalized object with results in the `results` property. Additional",
            "    information can be parsed out of the JSON for inclusion in the `meta`",
            "    property of the response object.  If an error is encountered during",
            "    processing, an `error` property will be added.",
            "",
            "    The input _data_ is expected to be an object or array.  If it is a string,",
            "    it will be passed through `Y.JSON.parse()`.",
            "",
            "    If _data_ contains an array of data records to normalize, specify the",
            "    _schema.resultListLocator_ as a dot separated path string just as you would",
            "    reference it in JavaScript.  So if your _data_ object has a record array at",
            "    _data.response.results_, use _schema.resultListLocator_ =",
            "    \"response.results\". Bracket notation can also be used for array indices or",
            "    object properties (e.g. \"response['results']\");  This is called a \"path",
            "    locator\"",
            "",
            "    Field data in the result list is extracted with field identifiers in",
            "    _schema.resultFields_.  Field identifiers are objects with the following",
            "    properties:",
            "",
            "      * `key`   : <strong>(required)</strong> The path locator (String)",
            "      * `parser`: A function or the name of a function on `Y.Parsers` used",
            "            to convert the input value into a normalized type.  Parser",
            "            functions are passed the value as input and are expected to",
            "            return a value.",
            "",
            "    If no value parsing is needed, you can use path locators (strings) ",
            "    instead of field identifiers (objects) -- see example below.",
            "",
            "    If no processing of the result list array is needed, _schema.resultFields_",
            "    can be omitted; the `response.results` will point directly to the array.",
            "",
            "    If the result list contains arrays, `response.results` will contain an",
            "    array of objects with key:value pairs assuming the fields in",
            "    _schema.resultFields_ are ordered in accordance with the data array",
            "    values.",
            "",
            "    If the result list contains objects, the identified _schema.resultFields_",
            "    will be used to extract a value from those objects for the output result.",
            "",
            "    To extract additional information from the JSON, include an array of",
            "    path locators in _schema.metaFields_.  The collected values will be",
            "    stored in `response.meta`.",
            "",
            "",
            "    @example",
            "        // Process array of arrays",
            "        var schema = {",
            "                resultListLocator: 'produce.fruit',",
            "                resultFields: [ 'name', 'color' ]",
            "            },",
            "            data = {",
            "                produce: {",
            "                    fruit: [",
            "                        [ 'Banana', 'yellow' ],",
            "                        [ 'Orange', 'orange' ],",
            "                        [ 'Eggplant', 'purple' ]",
            "                    ]",
            "                }",
            "            };",
            "",
            "        var response = Y.DataSchema.JSON.apply(schema, data);",
            "",
            "        // response.results[0] is { name: \"Banana\", color: \"yellow\" }",
            "",
            "        ",
            "        // Process array of objects + some metadata",
            "        schema.metaFields = [ 'lastInventory' ];",
            "",
            "        data = {",
            "            produce: {",
            "                fruit: [",
            "                    { name: 'Banana', color: 'yellow', price: '1.96' },",
            "                    { name: 'Orange', color: 'orange', price: '2.04' },",
            "                    { name: 'Eggplant', color: 'purple', price: '4.31' }",
            "                ]",
            "            },",
            "            lastInventory: '2011-07-19'",
            "        };",
            "",
            "        response = Y.DataSchema.JSON.apply(schema, data);",
            "",
            "        // response.results[0] is { name: \"Banana\", color: \"yellow\" }",
            "        // response.meta.lastInventory is '2001-07-19'",
            "",
            "",
            "        // Use parsers",
            "        schema.resultFields = [",
            "            {",
            "                key: 'name',",
            "                parser: function (val) { return val.toUpperCase(); }",
            "            },",
            "            {",
            "                key: 'price',",
            "                parser: 'number' // Uses Y.Parsers.number",
            "            }",
            "        ];",
            "",
            "        response = Y.DataSchema.JSON.apply(schema, data);",
            "",
            "        // Note price was converted from a numeric string to a number",
            "        // response.results[0] looks like { fruit: \"BANANA\", price: 1.96 }",
            "     ",
            "    @method apply",
            "    @param {Object} [schema] Schema to apply.  Supported configuration",
            "        properties are:",
            "      @param {String} [schema.resultListLocator] Path locator for the",
            "          location of the array of records to flatten into `response.results`",
            "      @param {Array} [schema.resultFields] Field identifiers to",
            "          locate/assign values in the response records. See above for",
            "          details.",
            "      @param {Array} [schema.metaFields] Path locators to extract extra",
            "          non-record related information from the data object.",
            "    @param {Object|Array|String} data JSON data or its string serialization.",
            "    @return {Object} An Object with properties `results` and `meta`",
            "    @static",
            "    **/",
            "    apply: function(schema, data) {",
            "        var data_in = data,",
            "            data_out = { results: [], meta: {} };",
            "",
            "        // Convert incoming JSON strings",
            "        if (!isObject(data)) {",
            "            try {",
            "                data_in = Y.JSON.parse(data);",
            "            }",
            "            catch(e) {",
            "                data_out.error = e;",
            "                return data_out;",
            "            }",
            "        }",
            "",
            "        if (isObject(data_in) && schema) {",
            "            // Parse results data",
            "            data_out = SchemaJSON._parseResults.call(this, schema, data_in, data_out);",
            "",
            "            // Parse meta data",
            "            if (schema.metaFields !== undefined) {",
            "                data_out = SchemaJSON._parseMeta(schema.metaFields, data_in, data_out);",
            "            }",
            "        }",
            "        else {",
            "            data_out.error = new Error(\"JSON schema parse failure\");",
            "        }",
            "",
            "        return data_out;",
            "    },",
            "",
            "    /**",
            "     * Schema-parsed list of results from full data",
            "     *",
            "     * @method _parseResults",
            "     * @param schema {Object} Schema to parse against.",
            "     * @param json_in {Object} JSON to parse.",
            "     * @param data_out {Object} In-progress parsed data to update.",
            "     * @return {Object} Parsed data object.",
            "     * @static",
            "     * @protected",
            "     */",
            "    _parseResults: function(schema, json_in, data_out) {",
            "        var getPath  = SchemaJSON.getPath,",
            "            getValue = SchemaJSON.getLocationValue,",
            "            path     = getPath(schema.resultListLocator),",
            "            results  = path ?",
            "                        (getValue(path, json_in) ||",
            "                         // Fall back to treat resultListLocator as a simple key",
            "                            json_in[schema.resultListLocator]) :",
            "                        // Or if no resultListLocator is supplied, use the input",
            "                        json_in;",
            "",
            "        if (isArray(results)) {",
            "            // if no result fields are passed in, then just take",
            "            // the results array whole-hog Sometimes you're getting",
            "            // an array of strings, or want the whole object, so",
            "            // resultFields don't make sense.",
            "            if (isArray(schema.resultFields)) {",
            "                data_out = SchemaJSON._getFieldValues.call(this, schema.resultFields, results, data_out);",
            "            } else {",
            "                data_out.results = results;",
            "            }",
            "        } else if (schema.resultListLocator) {",
            "            data_out.results = [];",
            "            data_out.error = new Error(\"JSON results retrieval failure\");",
            "        }",
            "",
            "        return data_out;",
            "    },",
            "",
            "    /**",
            "     * Get field data values out of list of full results",
            "     *",
            "     * @method _getFieldValues",
            "     * @param fields {Array} Fields to find.",
            "     * @param array_in {Array} Results to parse.",
            "     * @param data_out {Object} In-progress parsed data to update.",
            "     * @return {Object} Parsed data object.",
            "     * @static",
            "     * @protected",
            "     */",
            "    _getFieldValues: function(fields, array_in, data_out) {",
            "        var results = [],",
            "            len = fields.length,",
            "            i, j,",
            "            field, key, locator, path, parser, val,",
            "            simplePaths = [], complexPaths = [], fieldParsers = [],",
            "            result, record;",
            "",
            "        // First collect hashes of simple paths, complex paths, and parsers",
            "        for (i=0; i<len; i++) {",
            "            field = fields[i]; // A field can be a simple string or a hash",
            "            key = field.key || field; // Find the key",
            "            locator = field.locator || key; // Find the locator",
            "",
            "            // Validate and store locators for later",
            "            path = SchemaJSON.getPath(locator);",
            "            if (path) {",
            "                if (path.length === 1) {",
            "                    simplePaths.push({",
            "                        key : key,",
            "                        path: path[0]",
            "                    });",
            "                } else {",
            "                    complexPaths.push({",
            "                        key    : key,",
            "                        path   : path,",
            "                        locator: locator",
            "                    });",
            "                }",
            "            } else {",
            "            }",
            "",
            "            // Validate and store parsers for later",
            "            //TODO: use Y.DataSchema.parse?",
            "            parser = (isFunction(field.parser)) ?",
            "                        field.parser :",
            "                        Y.Parsers[field.parser + ''];",
            "",
            "            if (parser) {",
            "                fieldParsers.push({",
            "                    key   : key,",
            "                    parser: parser",
            "                });",
            "            }",
            "        }",
            "",
            "        // Traverse list of array_in, creating records of simple fields,",
            "        // complex fields, and applying parsers as necessary",
            "        for (i=array_in.length-1; i>=0; --i) {",
            "            record = {};",
            "            result = array_in[i];",
            "            if(result) {",
            "                // Cycle through complexLocators",
            "                for (j=complexPaths.length - 1; j>=0; --j) {",
            "                    path = complexPaths[j];",
            "                    val = SchemaJSON.getLocationValue(path.path, result);",
            "                    if (val === undefined) {",
            "                        val = SchemaJSON.getLocationValue([path.locator], result);",
            "                        // Fail over keys like \"foo.bar\" from nested parsing",
            "                        // to single token parsing if a value is found in",
            "                        // results[\"foo.bar\"]",
            "                        if (val !== undefined) {",
            "                            simplePaths.push({",
            "                                key:  path.key,",
            "                                path: path.locator",
            "                            });",
            "                            // Don't try to process the path as complex",
            "                            // for further results",
            "                            complexPaths.splice(i,1);",
            "                            continue;",
            "                        }",
            "                    }",
            "",
            "                    record[path.key] = Base.parse.call(this,",
            "                        (SchemaJSON.getLocationValue(path.path, result)), path);",
            "                }",
            "",
            "                // Cycle through simpleLocators",
            "                for (j = simplePaths.length - 1; j >= 0; --j) {",
            "                    path = simplePaths[j];",
            "                    // Bug 1777850: The result might be an array instead of object",
            "                    record[path.key] = Base.parse.call(this,",
            "                            ((result[path.path] === undefined) ?",
            "                            result[j] : result[path.path]), path);",
            "                }",
            "",
            "                // Cycle through fieldParsers",
            "                for (j=fieldParsers.length-1; j>=0; --j) {",
            "                    key = fieldParsers[j].key;",
            "                    record[key] = fieldParsers[j].parser.call(this, record[key]);",
            "                    // Safety net",
            "                    if (record[key] === undefined) {",
            "                        record[key] = null;",
            "                    }",
            "                }",
            "                results[i] = record;",
            "            }",
            "        }",
            "        data_out.results = results;",
            "        return data_out;",
            "    },",
            "",
            "    /**",
            "     * Parses results data according to schema",
            "     *",
            "     * @method _parseMeta",
            "     * @param metaFields {Object} Metafields definitions.",
            "     * @param json_in {Object} JSON to parse.",
            "     * @param data_out {Object} In-progress parsed data to update.",
            "     * @return {Object} Schema-parsed meta data.",
            "     * @static",
            "     * @protected",
            "     */",
            "    _parseMeta: function(metaFields, json_in, data_out) {",
            "        if (isObject(metaFields)) {",
            "            var key, path;",
            "            for(key in metaFields) {",
            "                if (metaFields.hasOwnProperty(key)) {",
            "                    path = SchemaJSON.getPath(metaFields[key]);",
            "                    if (path && json_in) {",
            "                        data_out.meta[key] = SchemaJSON.getLocationValue(path, json_in);",
            "                    }",
            "                }",
            "            }",
            "        }",
            "        else {",
            "            data_out.error = new Error(\"JSON meta data retrieval failure\");",
            "        }",
            "        return data_out;",
            "    }",
            "};",
            "",
            "// TODO: Y.Object + mix() might be better here",
            "Y.DataSchema.JSON = Y.mix(SchemaJSON, Base);",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"dataschema-base\", \"json\"]});",
            "",
            "}());"
        ]
    },
    "build/dataschema-xml/dataschema-xml.js": {
        "path": "build/dataschema-xml/dataschema-xml.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 7,
            "5": 7,
            "6": 6,
            "7": 6,
            "8": 1,
            "9": 7,
            "10": 147,
            "11": 147,
            "12": 147,
            "13": 147,
            "14": 147,
            "15": 147,
            "16": 0,
            "17": 148,
            "18": 148,
            "19": 0,
            "20": 0,
            "21": 0,
            "22": 0,
            "23": 0,
            "24": 0,
            "25": 0,
            "26": 0,
            "27": 0,
            "28": 0,
            "29": 0,
            "30": 0,
            "31": 0,
            "32": 0,
            "33": 0,
            "34": 0,
            "35": 0,
            "36": 0,
            "37": 0,
            "38": 0,
            "39": 0,
            "40": 0,
            "41": 0,
            "42": 0,
            "43": 0,
            "44": 0,
            "45": 0,
            "46": 0,
            "47": 0,
            "48": 0,
            "49": 0,
            "50": 0,
            "51": 0,
            "52": 0,
            "53": 0,
            "54": 150,
            "55": 150,
            "56": 3,
            "57": 3,
            "58": 3,
            "59": 147,
            "60": 6,
            "61": 0,
            "62": 0,
            "63": 0,
            "64": 0,
            "65": 6,
            "66": 41,
            "67": 41,
            "68": 150,
            "69": 41,
            "70": 9,
            "71": 9,
            "72": 9,
            "73": 8,
            "74": 8,
            "75": 38,
            "76": 1,
            "77": 1,
            "78": 3,
            "79": 3,
            "80": 9,
            "81": 7,
            "82": 2,
            "83": 9,
            "84": 1
        },
        "b": {
            "1": [
                6,
                1
            ],
            "2": [
                7,
                7,
                6
            ],
            "3": [
                147,
                18,
                9
            ],
            "4": [
                147,
                0
            ],
            "5": [
                147,
                0,
                0,
                0,
                0,
                0
            ],
            "6": [
                148,
                0
            ],
            "7": [
                147,
                1
            ],
            "8": [
                0,
                0
            ],
            "9": [
                0,
                0
            ],
            "10": [
                0,
                0
            ],
            "11": [
                0,
                0
            ],
            "12": [
                0,
                0
            ],
            "13": [
                0,
                0
            ],
            "14": [
                0,
                0
            ],
            "15": [
                0,
                0
            ],
            "16": [
                0,
                0
            ],
            "17": [
                0,
                0
            ],
            "18": [
                0,
                0
            ],
            "19": [
                0,
                0
            ],
            "20": [
                0,
                0
            ],
            "21": [
                150,
                9
            ],
            "22": [
                3,
                147
            ],
            "23": [
                0,
                6
            ],
            "24": [
                0,
                0
            ],
            "25": [
                0,
                0
            ],
            "26": [
                9,
                0
            ],
            "27": [
                9,
                9
            ],
            "28": [
                9,
                4
            ],
            "29": [
                8,
                1
            ],
            "30": [
                7,
                2
            ]
        },
        "f": {
            "1": 1,
            "2": 7,
            "3": 147,
            "4": 148,
            "5": 0,
            "6": 150,
            "7": 6,
            "8": 41,
            "9": 9
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 26
                    },
                    "end": {
                        "line": 1,
                        "column": 45
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 116,
                "loc": {
                    "start": {
                        "line": 116,
                        "column": 11
                    },
                    "end": {
                        "line": 116,
                        "column": 34
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 143,
                "loc": {
                    "start": {
                        "line": 143,
                        "column": 23
                    },
                    "end": {
                        "line": 143,
                        "column": 48
                    }
                }
            },
            "4": {
                "name": "(anonymous_4)",
                "line": 180,
                "loc": {
                    "start": {
                        "line": 180,
                        "column": 21
                    },
                    "end": {
                        "line": 180,
                        "column": 56
                    }
                }
            },
            "5": {
                "name": "(anonymous_5)",
                "line": 254,
                "loc": {
                    "start": {
                        "line": 254,
                        "column": 29
                    },
                    "end": {
                        "line": 254,
                        "column": 40
                    }
                }
            },
            "6": {
                "name": "(anonymous_6)",
                "line": 276,
                "loc": {
                    "start": {
                        "line": 276,
                        "column": 17
                    },
                    "end": {
                        "line": 276,
                        "column": 50
                    }
                }
            },
            "7": {
                "name": "(anonymous_7)",
                "line": 300,
                "loc": {
                    "start": {
                        "line": 300,
                        "column": 16
                    },
                    "end": {
                        "line": 300,
                        "column": 58
                    }
                }
            },
            "8": {
                "name": "(anonymous_8)",
                "line": 324,
                "loc": {
                    "start": {
                        "line": 324,
                        "column": 18
                    },
                    "end": {
                        "line": 324,
                        "column": 44
                    }
                }
            },
            "9": {
                "name": "(anonymous_9)",
                "line": 346,
                "loc": {
                    "start": {
                        "line": 346,
                        "column": 19
                    },
                    "end": {
                        "line": 346,
                        "column": 55
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 383,
                    "column": 51
                }
            },
            "2": {
                "start": {
                    "line": 19,
                    "column": 0
                },
                "end": {
                    "line": 27,
                    "column": 14
                }
            },
            "3": {
                "start": {
                    "line": 29,
                    "column": 0
                },
                "end": {
                    "line": 378,
                    "column": 2
                }
            },
            "4": {
                "start": {
                    "line": 117,
                    "column": 8
                },
                "end": {
                    "line": 118,
                    "column": 49
                }
            },
            "5": {
                "start": {
                    "line": 120,
                    "column": 8
                },
                "end": {
                    "line": 128,
                    "column": 9
                }
            },
            "6": {
                "start": {
                    "line": 122,
                    "column": 12
                },
                "end": {
                    "line": 122,
                    "column": 73
                }
            },
            "7": {
                "start": {
                    "line": 125,
                    "column": 12
                },
                "end": {
                    "line": 125,
                    "column": 81
                }
            },
            "8": {
                "start": {
                    "line": 127,
                    "column": 12
                },
                "end": {
                    "line": 127,
                    "column": 67
                }
            },
            "9": {
                "start": {
                    "line": 130,
                    "column": 8
                },
                "end": {
                    "line": 130,
                    "column": 24
                }
            },
            "10": {
                "start": {
                    "line": 144,
                    "column": 8
                },
                "end": {
                    "line": 146,
                    "column": 38
                }
            },
            "11": {
                "start": {
                    "line": 148,
                    "column": 8
                },
                "end": {
                    "line": 163,
                    "column": 9
                }
            },
            "12": {
                "start": {
                    "line": 149,
                    "column": 12
                },
                "end": {
                    "line": 149,
                    "column": 73
                }
            },
            "13": {
                "start": {
                    "line": 150,
                    "column": 12
                },
                "end": {
                    "line": 152,
                    "column": 13
                }
            },
            "14": {
                "start": {
                    "line": 151,
                    "column": 16
                },
                "end": {
                    "line": 151,
                    "column": 107
                }
            },
            "15": {
                "start": {
                    "line": 161,
                    "column": 12
                },
                "end": {
                    "line": 161,
                    "column": 68
                }
            },
            "16": {
                "start": {
                    "line": 165,
                    "column": 8
                },
                "end": {
                    "line": 165,
                    "column": 20
                }
            },
            "17": {
                "start": {
                    "line": 182,
                    "column": 8
                },
                "end": {
                    "line": 263,
                    "column": 9
                }
            },
            "18": {
                "start": {
                    "line": 183,
                    "column": 12
                },
                "end": {
                    "line": 183,
                    "column": 176
                }
            },
            "19": {
                "start": {
                    "line": 188,
                    "column": 12
                },
                "end": {
                    "line": 188,
                    "column": 122
                }
            },
            "20": {
                "start": {
                    "line": 191,
                    "column": 12
                },
                "end": {
                    "line": 248,
                    "column": 13
                }
            },
            "21": {
                "start": {
                    "line": 193,
                    "column": 16
                },
                "end": {
                    "line": 195,
                    "column": 30
                }
            },
            "22": {
                "start": {
                    "line": 194,
                    "column": 19
                },
                "end": {
                    "line": 194,
                    "column": 68
                }
            },
            "23": {
                "start": {
                    "line": 197,
                    "column": 16
                },
                "end": {
                    "line": 197,
                    "column": 54
                }
            },
            "24": {
                "start": {
                    "line": 202,
                    "column": 16
                },
                "end": {
                    "line": 232,
                    "column": 17
                }
            },
            "25": {
                "start": {
                    "line": 203,
                    "column": 20
                },
                "end": {
                    "line": 203,
                    "column": 47
                }
            },
            "26": {
                "start": {
                    "line": 206,
                    "column": 20
                },
                "end": {
                    "line": 231,
                    "column": 21
                }
            },
            "27": {
                "start": {
                    "line": 207,
                    "column": 24
                },
                "end": {
                    "line": 207,
                    "column": 96
                }
            },
            "28": {
                "start": {
                    "line": 209,
                    "column": 24
                },
                "end": {
                    "line": 209,
                    "column": 33
                }
            },
            "29": {
                "start": {
                    "line": 210,
                    "column": 24
                },
                "end": {
                    "line": 210,
                    "column": 59
                }
            },
            "30": {
                "start": {
                    "line": 211,
                    "column": 24
                },
                "end": {
                    "line": 211,
                    "column": 37
                }
            },
            "31": {
                "start": {
                    "line": 214,
                    "column": 25
                },
                "end": {
                    "line": 231,
                    "column": 21
                }
            },
            "32": {
                "start": {
                    "line": 215,
                    "column": 24
                },
                "end": {
                    "line": 215,
                    "column": 72
                }
            },
            "33": {
                "start": {
                    "line": 216,
                    "column": 24
                },
                "end": {
                    "line": 216,
                    "column": 99
                }
            },
            "34": {
                "start": {
                    "line": 219,
                    "column": 25
                },
                "end": {
                    "line": 231,
                    "column": 21
                }
            },
            "35": {
                "start": {
                    "line": 220,
                    "column": 24
                },
                "end": {
                    "line": 220,
                    "column": 82
                }
            },
            "36": {
                "start": {
                    "line": 221,
                    "column": 24
                },
                "end": {
                    "line": 221,
                    "column": 83
                }
            },
            "37": {
                "start": {
                    "line": 224,
                    "column": 25
                },
                "end": {
                    "line": 231,
                    "column": 21
                }
            },
            "38": {
                "start": {
                    "line": 225,
                    "column": 24
                },
                "end": {
                    "line": 230,
                    "column": 25
                }
            },
            "39": {
                "start": {
                    "line": 226,
                    "column": 28
                },
                "end": {
                    "line": 229,
                    "column": 29
                }
            },
            "40": {
                "start": {
                    "line": 227,
                    "column": 32
                },
                "end": {
                    "line": 227,
                    "column": 64
                }
            },
            "41": {
                "start": {
                    "line": 228,
                    "column": 32
                },
                "end": {
                    "line": 228,
                    "column": 39
                }
            },
            "42": {
                "start": {
                    "line": 234,
                    "column": 16
                },
                "end": {
                    "line": 247,
                    "column": 17
                }
            },
            "43": {
                "start": {
                    "line": 236,
                    "column": 20
                },
                "end": {
                    "line": 246,
                    "column": 21
                }
            },
            "44": {
                "start": {
                    "line": 237,
                    "column": 24
                },
                "end": {
                    "line": 237,
                    "column": 53
                }
            },
            "45": {
                "start": {
                    "line": 240,
                    "column": 25
                },
                "end": {
                    "line": 246,
                    "column": 21
                }
            },
            "46": {
                "start": {
                    "line": 241,
                    "column": 24
                },
                "end": {
                    "line": 241,
                    "column": 63
                }
            },
            "47": {
                "start": {
                    "line": 245,
                    "column": 24
                },
                "end": {
                    "line": 245,
                    "column": 70
                }
            },
            "48": {
                "start": {
                    "line": 251,
                    "column": 12
                },
                "end": {
                    "line": 262,
                    "column": 14
                }
            },
            "49": {
                "start": {
                    "line": 255,
                    "column": 20
                },
                "end": {
                    "line": 255,
                    "column": 77
                }
            },
            "50": {
                "start": {
                    "line": 255,
                    "column": 59
                },
                "end": {
                    "line": 255,
                    "column": 76
                }
            },
            "51": {
                "start": {
                    "line": 256,
                    "column": 20
                },
                "end": {
                    "line": 256,
                    "column": 57
                }
            },
            "52": {
                "start": {
                    "line": 257,
                    "column": 20
                },
                "end": {
                    "line": 257,
                    "column": 36
                }
            },
            "53": {
                "start": {
                    "line": 258,
                    "column": 20
                },
                "end": {
                    "line": 258,
                    "column": 34
                }
            },
            "54": {
                "start": {
                    "line": 277,
                    "column": 8
                },
                "end": {
                    "line": 278,
                    "column": 19
                }
            },
            "55": {
                "start": {
                    "line": 280,
                    "column": 8
                },
                "end": {
                    "line": 287,
                    "column": 9
                }
            },
            "56": {
                "start": {
                    "line": 281,
                    "column": 12
                },
                "end": {
                    "line": 281,
                    "column": 47
                }
            },
            "57": {
                "start": {
                    "line": 282,
                    "column": 12
                },
                "end": {
                    "line": 282,
                    "column": 76
                }
            },
            "58": {
                "start": {
                    "line": 284,
                    "column": 12
                },
                "end": {
                    "line": 284,
                    "column": 41
                }
            },
            "59": {
                "start": {
                    "line": 286,
                    "column": 12
                },
                "end": {
                    "line": 286,
                    "column": 70
                }
            },
            "60": {
                "start": {
                    "line": 301,
                    "column": 8
                },
                "end": {
                    "line": 310,
                    "column": 9
                }
            },
            "61": {
                "start": {
                    "line": 302,
                    "column": 12
                },
                "end": {
                    "line": 303,
                    "column": 62
                }
            },
            "62": {
                "start": {
                    "line": 305,
                    "column": 12
                },
                "end": {
                    "line": 309,
                    "column": 13
                }
            },
            "63": {
                "start": {
                    "line": 306,
                    "column": 16
                },
                "end": {
                    "line": 308,
                    "column": 17
                }
            },
            "64": {
                "start": {
                    "line": 307,
                    "column": 20
                },
                "end": {
                    "line": 307,
                    "column": 94
                }
            },
            "65": {
                "start": {
                    "line": 311,
                    "column": 8
                },
                "end": {
                    "line": 311,
                    "column": 24
                }
            },
            "66": {
                "start": {
                    "line": 325,
                    "column": 8
                },
                "end": {
                    "line": 325,
                    "column": 27
                }
            },
            "67": {
                "start": {
                    "line": 328,
                    "column": 8
                },
                "end": {
                    "line": 330,
                    "column": 9
                }
            },
            "68": {
                "start": {
                    "line": 329,
                    "column": 12
                },
                "end": {
                    "line": 329,
                    "column": 62
                }
            },
            "69": {
                "start": {
                    "line": 332,
                    "column": 8
                },
                "end": {
                    "line": 332,
                    "column": 22
                }
            },
            "70": {
                "start": {
                    "line": 347,
                    "column": 8
                },
                "end": {
                    "line": 375,
                    "column": 9
                }
            },
            "71": {
                "start": {
                    "line": 348,
                    "column": 12
                },
                "end": {
                    "line": 351,
                    "column": 36
                }
            },
            "72": {
                "start": {
                    "line": 353,
                    "column": 12
                },
                "end": {
                    "line": 368,
                    "column": 13
                }
            },
            "73": {
                "start": {
                    "line": 354,
                    "column": 16
                },
                "end": {
                    "line": 354,
                    "column": 82
                }
            },
            "74": {
                "start": {
                    "line": 357,
                    "column": 16
                },
                "end": {
                    "line": 359,
                    "column": 17
                }
            },
            "75": {
                "start": {
                    "line": 358,
                    "column": 20
                },
                "end": {
                    "line": 358,
                    "column": 77
                }
            },
            "76": {
                "start": {
                    "line": 361,
                    "column": 16
                },
                "end": {
                    "line": 361,
                    "column": 96
                }
            },
            "77": {
                "start": {
                    "line": 364,
                    "column": 16
                },
                "end": {
                    "line": 367,
                    "column": 17
                }
            },
            "78": {
                "start": {
                    "line": 365,
                    "column": 20
                },
                "end": {
                    "line": 365,
                    "column": 70
                }
            },
            "79": {
                "start": {
                    "line": 366,
                    "column": 20
                },
                "end": {
                    "line": 366,
                    "column": 27
                }
            },
            "80": {
                "start": {
                    "line": 370,
                    "column": 12
                },
                "end": {
                    "line": 374,
                    "column": 13
                }
            },
            "81": {
                "start": {
                    "line": 371,
                    "column": 16
                },
                "end": {
                    "line": 371,
                    "column": 43
                }
            },
            "82": {
                "start": {
                    "line": 373,
                    "column": 16
                },
                "end": {
                    "line": 373,
                    "column": 88
                }
            },
            "83": {
                "start": {
                    "line": 376,
                    "column": 8
                },
                "end": {
                    "line": 376,
                    "column": 24
                }
            },
            "84": {
                "start": {
                    "line": 380,
                    "column": 0
                },
                "end": {
                    "line": 380,
                    "column": 55
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 120,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 120,
                            "column": 8
                        },
                        "end": {
                            "line": 120,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 120,
                            "column": 8
                        },
                        "end": {
                            "line": 120,
                            "column": 8
                        }
                    }
                ]
            },
            "2": {
                "line": 120,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 120,
                            "column": 12
                        },
                        "end": {
                            "line": 120,
                            "column": 18
                        }
                    },
                    {
                        "start": {
                            "line": 120,
                            "column": 22
                        },
                        "end": {
                            "line": 120,
                            "column": 49
                        }
                    },
                    {
                        "start": {
                            "line": 120,
                            "column": 53
                        },
                        "end": {
                            "line": 120,
                            "column": 59
                        }
                    }
                ]
            },
            "3": {
                "line": 144,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 144,
                            "column": 22
                        },
                        "end": {
                            "line": 144,
                            "column": 35
                        }
                    },
                    {
                        "start": {
                            "line": 144,
                            "column": 39
                        },
                        "end": {
                            "line": 144,
                            "column": 48
                        }
                    },
                    {
                        "start": {
                            "line": 144,
                            "column": 52
                        },
                        "end": {
                            "line": 144,
                            "column": 57
                        }
                    }
                ]
            },
            "4": {
                "line": 145,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 145,
                            "column": 21
                        },
                        "end": {
                            "line": 145,
                            "column": 42
                        }
                    },
                    {
                        "start": {
                            "line": 145,
                            "column": 46
                        },
                        "end": {
                            "line": 145,
                            "column": 53
                        }
                    }
                ]
            },
            "5": {
                "line": 151,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 151,
                            "column": 24
                        },
                        "end": {
                            "line": 151,
                            "column": 39
                        }
                    },
                    {
                        "start": {
                            "line": 151,
                            "column": 43
                        },
                        "end": {
                            "line": 151,
                            "column": 52
                        }
                    },
                    {
                        "start": {
                            "line": 151,
                            "column": 56
                        },
                        "end": {
                            "line": 151,
                            "column": 64
                        }
                    },
                    {
                        "start": {
                            "line": 151,
                            "column": 68
                        },
                        "end": {
                            "line": 151,
                            "column": 81
                        }
                    },
                    {
                        "start": {
                            "line": 151,
                            "column": 85
                        },
                        "end": {
                            "line": 151,
                            "column": 98
                        }
                    },
                    {
                        "start": {
                            "line": 151,
                            "column": 102
                        },
                        "end": {
                            "line": 151,
                            "column": 106
                        }
                    }
                ]
            },
            "6": {
                "line": 182,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 182,
                            "column": 8
                        },
                        "end": {
                            "line": 182,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 182,
                            "column": 8
                        },
                        "end": {
                            "line": 182,
                            "column": 8
                        }
                    }
                ]
            },
            "7": {
                "line": 183,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 183,
                            "column": 101
                        },
                        "end": {
                            "line": 183,
                            "column": 138
                        }
                    },
                    {
                        "start": {
                            "line": 183,
                            "column": 141
                        },
                        "end": {
                            "line": 183,
                            "column": 164
                        }
                    }
                ]
            },
            "8": {
                "line": 202,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 202,
                            "column": 23
                        },
                        "end": {
                            "line": 202,
                            "column": 26
                        }
                    },
                    {
                        "start": {
                            "line": 202,
                            "column": 30
                        },
                        "end": {
                            "line": 202,
                            "column": 37
                        }
                    }
                ]
            },
            "9": {
                "line": 206,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 206,
                            "column": 20
                        },
                        "end": {
                            "line": 206,
                            "column": 20
                        }
                    },
                    {
                        "start": {
                            "line": 206,
                            "column": 20
                        },
                        "end": {
                            "line": 206,
                            "column": 20
                        }
                    }
                ]
            },
            "10": {
                "line": 206,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 206,
                            "column": 25
                        },
                        "end": {
                            "line": 206,
                            "column": 51
                        }
                    },
                    {
                        "start": {
                            "line": 206,
                            "column": 57
                        },
                        "end": {
                            "line": 206,
                            "column": 83
                        }
                    }
                ]
            },
            "11": {
                "line": 214,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 214,
                            "column": 25
                        },
                        "end": {
                            "line": 214,
                            "column": 25
                        }
                    },
                    {
                        "start": {
                            "line": 214,
                            "column": 25
                        },
                        "end": {
                            "line": 214,
                            "column": 25
                        }
                    }
                ]
            },
            "12": {
                "line": 216,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 216,
                            "column": 43
                        },
                        "end": {
                            "line": 216,
                            "column": 88
                        }
                    },
                    {
                        "start": {
                            "line": 216,
                            "column": 91
                        },
                        "end": {
                            "line": 216,
                            "column": 98
                        }
                    }
                ]
            },
            "13": {
                "line": 219,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 219,
                            "column": 25
                        },
                        "end": {
                            "line": 219,
                            "column": 25
                        }
                    },
                    {
                        "start": {
                            "line": 219,
                            "column": 25
                        },
                        "end": {
                            "line": 219,
                            "column": 25
                        }
                    }
                ]
            },
            "14": {
                "line": 221,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 221,
                            "column": 50
                        },
                        "end": {
                            "line": 221,
                            "column": 75
                        }
                    },
                    {
                        "start": {
                            "line": 221,
                            "column": 78
                        },
                        "end": {
                            "line": 221,
                            "column": 82
                        }
                    }
                ]
            },
            "15": {
                "line": 224,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 224,
                            "column": 25
                        },
                        "end": {
                            "line": 224,
                            "column": 25
                        }
                    },
                    {
                        "start": {
                            "line": 224,
                            "column": 25
                        },
                        "end": {
                            "line": 224,
                            "column": 25
                        }
                    }
                ]
            },
            "16": {
                "line": 226,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 226,
                            "column": 28
                        },
                        "end": {
                            "line": 226,
                            "column": 28
                        }
                    },
                    {
                        "start": {
                            "line": 226,
                            "column": 28
                        },
                        "end": {
                            "line": 226,
                            "column": 28
                        }
                    }
                ]
            },
            "17": {
                "line": 234,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 234,
                            "column": 16
                        },
                        "end": {
                            "line": 234,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 234,
                            "column": 16
                        },
                        "end": {
                            "line": 234,
                            "column": 16
                        }
                    }
                ]
            },
            "18": {
                "line": 236,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 236,
                            "column": 20
                        },
                        "end": {
                            "line": 236,
                            "column": 20
                        }
                    },
                    {
                        "start": {
                            "line": 236,
                            "column": 20
                        },
                        "end": {
                            "line": 236,
                            "column": 20
                        }
                    }
                ]
            },
            "19": {
                "line": 240,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 240,
                            "column": 25
                        },
                        "end": {
                            "line": 240,
                            "column": 25
                        }
                    },
                    {
                        "start": {
                            "line": 240,
                            "column": 25
                        },
                        "end": {
                            "line": 240,
                            "column": 25
                        }
                    }
                ]
            },
            "20": {
                "line": 255,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 255,
                            "column": 20
                        },
                        "end": {
                            "line": 255,
                            "column": 20
                        }
                    },
                    {
                        "start": {
                            "line": 255,
                            "column": 20
                        },
                        "end": {
                            "line": 255,
                            "column": 20
                        }
                    }
                ]
            },
            "21": {
                "line": 277,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 277,
                            "column": 18
                        },
                        "end": {
                            "line": 277,
                            "column": 27
                        }
                    },
                    {
                        "start": {
                            "line": 277,
                            "column": 31
                        },
                        "end": {
                            "line": 277,
                            "column": 36
                        }
                    }
                ]
            },
            "22": {
                "line": 280,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 280,
                            "column": 8
                        },
                        "end": {
                            "line": 280,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 280,
                            "column": 8
                        },
                        "end": {
                            "line": 280,
                            "column": 8
                        }
                    }
                ]
            },
            "23": {
                "line": 301,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 301,
                            "column": 8
                        },
                        "end": {
                            "line": 301,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 301,
                            "column": 8
                        },
                        "end": {
                            "line": 301,
                            "column": 8
                        }
                    }
                ]
            },
            "24": {
                "line": 303,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 303,
                            "column": 25
                        },
                        "end": {
                            "line": 303,
                            "column": 48
                        }
                    },
                    {
                        "start": {
                            "line": 303,
                            "column": 52
                        },
                        "end": {
                            "line": 303,
                            "column": 61
                        }
                    }
                ]
            },
            "25": {
                "line": 306,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 306,
                            "column": 16
                        },
                        "end": {
                            "line": 306,
                            "column": 16
                        }
                    },
                    {
                        "start": {
                            "line": 306,
                            "column": 16
                        },
                        "end": {
                            "line": 306,
                            "column": 16
                        }
                    }
                ]
            },
            "26": {
                "line": 347,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 347,
                            "column": 8
                        },
                        "end": {
                            "line": 347,
                            "column": 8
                        }
                    },
                    {
                        "start": {
                            "line": 347,
                            "column": 8
                        },
                        "end": {
                            "line": 347,
                            "column": 8
                        }
                    }
                ]
            },
            "27": {
                "line": 347,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 347,
                            "column": 12
                        },
                        "end": {
                            "line": 347,
                            "column": 36
                        }
                    },
                    {
                        "start": {
                            "line": 347,
                            "column": 40
                        },
                        "end": {
                            "line": 347,
                            "column": 73
                        }
                    }
                ]
            },
            "28": {
                "line": 348,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 348,
                            "column": 25
                        },
                        "end": {
                            "line": 348,
                            "column": 46
                        }
                    },
                    {
                        "start": {
                            "line": 348,
                            "column": 50
                        },
                        "end": {
                            "line": 348,
                            "column": 57
                        }
                    }
                ]
            },
            "29": {
                "line": 353,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 353,
                            "column": 12
                        },
                        "end": {
                            "line": 353,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 353,
                            "column": 12
                        },
                        "end": {
                            "line": 353,
                            "column": 12
                        }
                    }
                ]
            },
            "30": {
                "line": 370,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 370,
                            "column": 12
                        },
                        "end": {
                            "line": 370,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 370,
                            "column": 12
                        },
                        "end": {
                            "line": 370,
                            "column": 12
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('dataschema-xml', function (Y, NAME) {",
            "",
            "/**",
            "Provides a DataSchema implementation which can be used to work with XML data.",
            "",
            "@module dataschema",
            "@submodule dataschema-xml",
            "**/",
            "",
            "/**",
            "Provides a DataSchema implementation which can be used to work with XML data.",
            "",
            "See the `apply` method for usage.",
            "",
            "@class DataSchema.XML",
            "@extends DataSchema.Base",
            "@static",
            "**/",
            "var Lang = Y.Lang,",
            "",
            "    okNodeType = {",
            "        1 : true,",
            "        9 : true,",
            "        11: true",
            "    },",
            "",
            "    SchemaXML;",
            "",
            "SchemaXML = {",
            "",
            "    ////////////////////////////////////////////////////////////////////////////",
            "    //",
            "    // DataSchema.XML static methods",
            "    //",
            "    ////////////////////////////////////////////////////////////////////////////",
            "    /**",
            "    Applies a schema to an XML data tree, returning a normalized object with",
            "    results in the `results` property. Additional information can be parsed out",
            "    of the XML for inclusion in the `meta` property of the response object.  If",
            "    an error is encountered during processing, an `error` property will be",
            "    added.",
            "",
            "    Field data in the nodes captured by the XPath in _schema.resultListLocator_",
            "    is extracted with the field identifiers described in _schema.resultFields_.",
            "    Field identifiers are objects with the following properties:",
            "",
            "      * `key`    : <strong>(required)</strong> The desired property name to use",
            "            store the retrieved value in the result object.  If `locator` is",
            "            not specified, `key` is also used as the XPath locator (String)",
            "      * `locator`: The XPath locator to the node or attribute within each",
            "            result node found by _schema.resultListLocator_ containing the",
            "            desired field data (String)",
            "      * `parser` : A function or the name of a function on `Y.Parsers` used",
            "            to convert the input value into a normalized type.  Parser",
            "            functions are passed the value as input and are expected to",
            "            return a value.",
            "      * `schema` : Used to retrieve nested field data into an array for",
            "            assignment as the result field value.  This object follows the same",
            "            conventions as _schema_.",
            "",
            "    If no value parsing or nested parsing is needed, you can use XPath locators",
            "    (strings) instead of field identifiers (objects) -- see example below.",
            "",
            "    `response.results` will contain an array of objects with key:value pairs.",
            "    The keys are the field identifier `key`s, and the values are the data",
            "    values extracted from the nodes or attributes found by the field `locator`",
            "    (or `key` fallback).",
            "    ",
            "    To extract additional information from the XML, include an array of",
            "    XPath locators in _schema.metaFields_.  The collected values will be",
            "    stored in `response.meta` with the XPath locator as keys.",
            "",
            "    @example",
            "        var schema = {",
            "                resultListLocator: '//produce/item',",
            "                resultFields: [",
            "                    {",
            "                        locator: 'name',",
            "                        key: 'name'",
            "                    },",
            "                    {",
            "                        locator: 'color',",
            "                        key: 'color',",
            "                        parser: function (val) { return val.toUpperCase(); }",
            "                    }",
            "                ]",
            "            };",
            "",
            "        // Assumes data like",
            "        // <inventory>",
            "        //   <produce>",
            "        //     <item><name>Banana</name><color>yellow</color></item>",
            "        //     <item><name>Orange</name><color>orange</color></item>",
            "        //     <item><name>Eggplant</name><color>purple</color></item>",
            "        //   </produce>",
            "        // </inventory>",
            "",
            "        var response = Y.DataSchema.JSON.apply(schema, data);",
            "",
            "        // response.results[0] is { name: \"Banana\", color: \"YELLOW\" }",
            "     ",
            "    @method apply",
            "    @param {Object} schema Schema to apply.  Supported configuration",
            "        properties are:",
            "      @param {String} [schema.resultListLocator] XPath locator for the",
            "          XML nodes that contain the data to flatten into `response.results`",
            "      @param {Array} [schema.resultFields] Field identifiers to",
            "          locate/assign values in the response records. See above for",
            "          details.",
            "      @param {Array} [schema.metaFields] XPath locators to extract extra",
            "          non-record related information from the XML data",
            "    @param {XMLDoc} data XML data to parse",
            "    @return {Object} An Object with properties `results` and `meta`",
            "    @static",
            "    **/",
            "    apply: function(schema, data) {",
            "        var xmldoc = data, // unnecessary variables",
            "            data_out = { results: [], meta: {} };",
            "",
            "        if (xmldoc && okNodeType[xmldoc.nodeType] && schema) {",
            "            // Parse results data",
            "            data_out = SchemaXML._parseResults(schema, xmldoc, data_out);",
            "",
            "            // Parse meta data",
            "            data_out = SchemaXML._parseMeta(schema.metaFields, xmldoc, data_out);",
            "        } else {",
            "            data_out.error = new Error(\"XML schema parse failure\");",
            "        }",
            "",
            "        return data_out;",
            "    },",
            "",
            "    /**",
            "     * Get an XPath-specified value for a given field from an XML node or document.",
            "     *",
            "     * @method _getLocationValue",
            "     * @param field {String | Object} Field definition.",
            "     * @param context {Object} XML node or document to search within.",
            "     * @return {Object} Data value or null.",
            "     * @static",
            "     * @protected",
            "     */",
            "    _getLocationValue: function(field, context) {",
            "        var locator = field.locator || field.key || field,",
            "            xmldoc = context.ownerDocument || context,",
            "            result, res, value = null;",
            "",
            "        try {",
            "            result = SchemaXML._getXPathResult(locator, context, xmldoc);",
            "            while ((res = result.iterateNext())) {",
            "                value = res.textContent || res.value || res.text || res.innerHTML || res.innerText || null;",
            "            }",
            "",
            "            // FIXME: Why defer to a method that is mixed into this object?",
            "            // DSchema.Base is mixed into DSchema.XML (et al), so",
            "            // DSchema.XML.parse(...) will work.  This supports the use case",
            "            // where DSchema.Base.parse is changed, and that change is then",
            "            // seen by all DSchema.* implementations, but does not support the",
            "            // case where redefining DSchema.XML.parse changes behavior. In",
            "            // fact, DSchema.XML.parse is never even called.",
            "            return Y.DataSchema.Base.parse.call(this, value, field);",
            "        } catch (e) {",
            "        }",
            "",
            "        return null;",
            "    },",
            "",
            "    /**",
            "     * Fetches the XPath-specified result for a given location in an XML node",
            "     * or document.",
            "     * ",
            "     * @method _getXPathResult",
            "     * @param locator {String} The XPath location.",
            "     * @param context {Object} XML node or document to search within.",
            "     * @param xmldoc {Object} XML document to resolve namespace.",
            "     * @return {Object} Data collection or null.",
            "     * @static",
            "     * @protected",
            "     */",
            "    _getXPathResult: function(locator, context, xmldoc) {",
            "        // Standards mode",
            "        if (! Lang.isUndefined(xmldoc.evaluate)) {",
            "            return xmldoc.evaluate(locator, context, xmldoc.createNSResolver(context.ownerDocument ? context.ownerDocument.documentElement : context.documentElement), 0, null);",
            "          ",
            "        }",
            "        // IE mode",
            "        else {",
            "            var values=[], locatorArray = locator.split(/\\b\\/\\b/), i=0, l=locatorArray.length, location, subloc, m, isNth;",
            "            ",
            "            // XPath is supported",
            "            try {",
            "                // this fixes the IE 5.5+ issue where childnode selectors begin at 0 instead of 1",
            "                try {",
            "                   xmldoc.setProperty(\"SelectionLanguage\", \"XPath\");",
            "                } catch (e) {}",
            "                ",
            "                values = context.selectNodes(locator);",
            "            }",
            "            // Fallback for DOM nodes and fragments",
            "            catch (e) {",
            "                // Iterate over each locator piece",
            "                for (; i<l && context; i++) {",
            "                    location = locatorArray[i];",
            "",
            "                    // grab nth child []",
            "                    if ((location.indexOf(\"[\") > -1) && (location.indexOf(\"]\") > -1)) {",
            "                        subloc = location.slice(location.indexOf(\"[\")+1, location.indexOf(\"]\"));",
            "                        //XPath is 1-based while DOM is 0-based",
            "                        subloc--;",
            "                        context = context.children[subloc];",
            "                        isNth = true;",
            "                    }",
            "                    // grab attribute value @",
            "                    else if (location.indexOf(\"@\") > -1) {",
            "                        subloc = location.substr(location.indexOf(\"@\"));",
            "                        context = subloc ? context.getAttribute(subloc.replace('@', '')) : context;",
            "                    }",
            "                    // grab that last instance of tagName",
            "                    else if (-1 < location.indexOf(\"//\")) {",
            "                        subloc = context.getElementsByTagName(location.substr(2));",
            "                        context = subloc.length ? subloc[subloc.length - 1] : null;",
            "                    }",
            "                    // find the last matching location in children",
            "                    else if (l != i + 1) {",
            "                        for (m=context.childNodes.length-1; 0 <= m; m-=1) {",
            "                            if (location === context.childNodes[m].tagName) {",
            "                                context = context.childNodes[m];",
            "                                m = -1;",
            "                            }",
            "                        }",
            "                    }",
            "                }",
            "                ",
            "                if (context) {",
            "                    // attribute",
            "                    if (Lang.isString(context)) {",
            "                        values[0] = {value: context};",
            "                    }",
            "                    // nth child",
            "                    else if (isNth) {",
            "                        values[0] = {value: context.innerHTML};",
            "                    }",
            "                    // all children",
            "                    else {",
            "                        values = Y.Array(context.childNodes, 0, true);",
            "                    }",
            "                }",
            "            }",
            "",
            "            // returning a mock-standard object for IE",
            "            return {",
            "                index: 0,",
            "                ",
            "                iterateNext: function() {",
            "                    if (this.index >= this.values.length) {return undefined;}",
            "                    var result = this.values[this.index];",
            "                    this.index += 1;",
            "                    return result;",
            "                },",
            "",
            "                values: values",
            "            };",
            "        }",
            "    },",
            "",
            "    /**",
            "     * Schema-parsed result field.",
            "     *",
            "     * @method _parseField",
            "     * @param field {String | Object} Required. Field definition.",
            "     * @param result {Object} Required. Schema parsed data object.",
            "     * @param context {Object} Required. XML node or document to search within.",
            "     * @static",
            "     * @protected",
            "     */",
            "    _parseField: function(field, result, context) {",
            "        var key = field.key || field,",
            "            parsed;",
            "",
            "        if (field.schema) {",
            "            parsed = { results: [], meta: {} };",
            "            parsed = SchemaXML._parseResults(field.schema, context, parsed);",
            "",
            "            result[key] = parsed.results;",
            "        } else {",
            "            result[key] = SchemaXML._getLocationValue(field, context);",
            "        }",
            "    },",
            "",
            "    /**",
            "     * Parses results data according to schema",
            "     *",
            "     * @method _parseMeta",
            "     * @param xmldoc_in {Object} XML document parse.",
            "     * @param data_out {Object} In-progress schema-parsed data to update.",
            "     * @return {Object} Schema-parsed data.",
            "     * @static",
            "     * @protected",
            "     */",
            "    _parseMeta: function(metaFields, xmldoc_in, data_out) {",
            "        if(Lang.isObject(metaFields)) {",
            "            var key,",
            "                xmldoc = xmldoc_in.ownerDocument || xmldoc_in;",
            "",
            "            for(key in metaFields) {",
            "                if (metaFields.hasOwnProperty(key)) {",
            "                    data_out.meta[key] = SchemaXML._getLocationValue(metaFields[key], xmldoc);",
            "                }",
            "            }",
            "        }",
            "        return data_out;",
            "    },",
            "",
            "    /**",
            "     * Schema-parsed result to add to results list.",
            "     *",
            "     * @method _parseResult",
            "     * @param fields {Array} Required. A collection of field definition.",
            "     * @param context {Object} Required. XML node or document to search within.",
            "     * @return {Object} Schema-parsed data.",
            "     * @static",
            "     * @protected",
            "     */",
            "    _parseResult: function(fields, context) {",
            "        var result = {}, j;",
            "",
            "        // Find each field value",
            "        for (j=fields.length-1; 0 <= j; j--) {",
            "            SchemaXML._parseField(fields[j], result, context);",
            "        }",
            "",
            "        return result;",
            "    },",
            "",
            "    /**",
            "     * Schema-parsed list of results from full data",
            "     *",
            "     * @method _parseResults",
            "     * @param schema {Object} Schema to parse against.",
            "     * @param context {Object} XML node or document to parse.",
            "     * @param data_out {Object} In-progress schema-parsed data to update.",
            "     * @return {Object} Schema-parsed data.",
            "     * @static",
            "     * @protected",
            "     */",
            "    _parseResults: function(schema, context, data_out) {",
            "        if (schema.resultListLocator && Lang.isArray(schema.resultFields)) {",
            "            var xmldoc = context.ownerDocument || context,",
            "                fields = schema.resultFields,",
            "                results = [],",
            "                node, nodeList, i=0;",
            "",
            "            if (schema.resultListLocator.match(/^[:\\-\\w]+$/)) {",
            "                nodeList = context.getElementsByTagName(schema.resultListLocator);",
            "                ",
            "                // loop through each result node",
            "                for (i = nodeList.length - 1; i >= 0; --i) {",
            "                    results[i] = SchemaXML._parseResult(fields, nodeList[i]);",
            "                }",
            "            } else {",
            "                nodeList = SchemaXML._getXPathResult(schema.resultListLocator, context, xmldoc);",
            "",
            "                // loop through the nodelist",
            "                while ((node = nodeList.iterateNext())) {",
            "                    results[i] = SchemaXML._parseResult(fields, node);",
            "                    i += 1;",
            "                }",
            "            }",
            "",
            "            if (results.length) {",
            "                data_out.results = results;",
            "            } else {",
            "                data_out.error = new Error(\"XML schema result nodes retrieval failure\");",
            "            }",
            "        }",
            "        return data_out;",
            "    }",
            "};",
            "",
            "Y.DataSchema.XML = Y.mix(SchemaXML, Y.DataSchema.Base);",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"dataschema-base\"]});",
            "",
            "}());"
        ]
    },
    "build/dataschema-text/dataschema-text.js": {
        "path": "build/dataschema-text/dataschema-text.js",
        "s": {
            "1": 1,
            "2": 1,
            "3": 4,
            "4": 4,
            "5": 2,
            "6": 2,
            "7": 4,
            "8": 2,
            "9": 2,
            "10": 1,
            "11": 2,
            "12": 2,
            "13": 1,
            "14": 3,
            "15": 3,
            "16": 3,
            "17": 3,
            "18": 9,
            "19": 9,
            "20": 9,
            "21": 9,
            "22": 3,
            "23": 1,
            "24": 2,
            "25": 2,
            "26": 1
        },
        "b": {
            "1": [
                2,
                2
            ],
            "2": [
                4,
                3,
                3
            ],
            "3": [
                2,
                1
            ],
            "4": [
                2,
                1
            ],
            "5": [
                1,
                1
            ],
            "6": [
                1,
                1
            ],
            "7": [
                6,
                3
            ],
            "8": [
                0,
                9
            ]
        },
        "f": {
            "1": 1,
            "2": 4,
            "3": 2
        },
        "fnMap": {
            "1": {
                "name": "(anonymous_1)",
                "line": 1,
                "loc": {
                    "start": {
                        "line": 1,
                        "column": 27
                    },
                    "end": {
                        "line": 1,
                        "column": 46
                    }
                }
            },
            "2": {
                "name": "(anonymous_2)",
                "line": 105,
                "loc": {
                    "start": {
                        "line": 105,
                        "column": 15
                    },
                    "end": {
                        "line": 105,
                        "column": 38
                    }
                }
            },
            "3": {
                "name": "(anonymous_3)",
                "line": 130,
                "loc": {
                    "start": {
                        "line": 130,
                        "column": 23
                    },
                    "end": {
                        "line": 130,
                        "column": 59
                    }
                }
            }
        },
        "statementMap": {
            "1": {
                "start": {
                    "line": 1,
                    "column": 0
                },
                "end": {
                    "line": 182,
                    "column": 51
                }
            },
            "2": {
                "start": {
                    "line": 22,
                    "column": 0
                },
                "end": {
                    "line": 177,
                    "column": 6
                }
            },
            "3": {
                "start": {
                    "line": 106,
                    "column": 12
                },
                "end": {
                    "line": 107,
                    "column": 53
                }
            },
            "4": {
                "start": {
                    "line": 109,
                    "column": 12
                },
                "end": {
                    "line": 114,
                    "column": 13
                }
            },
            "5": {
                "start": {
                    "line": 111,
                    "column": 16
                },
                "end": {
                    "line": 111,
                    "column": 90
                }
            },
            "6": {
                "start": {
                    "line": 113,
                    "column": 16
                },
                "end": {
                    "line": 113,
                    "column": 72
                }
            },
            "7": {
                "start": {
                    "line": 116,
                    "column": 12
                },
                "end": {
                    "line": 116,
                    "column": 28
                }
            },
            "8": {
                "start": {
                    "line": 131,
                    "column": 12
                },
                "end": {
                    "line": 138,
                    "column": 40
                }
            },
            "9": {
                "start": {
                    "line": 141,
                    "column": 12
                },
                "end": {
                    "line": 143,
                    "column": 13
                }
            },
            "10": {
                "start": {
                    "line": 142,
                    "column": 16
                },
                "end": {
                    "line": 142,
                    "column": 64
                }
            },
            "11": {
                "start": {
                    "line": 146,
                    "column": 12
                },
                "end": {
                    "line": 146,
                    "column": 63
                }
            },
            "12": {
                "start": {
                    "line": 148,
                    "column": 12
                },
                "end": {
                    "line": 171,
                    "column": 13
                }
            },
            "13": {
                "start": {
                    "line": 149,
                    "column": 16
                },
                "end": {
                    "line": 168,
                    "column": 17
                }
            },
            "14": {
                "start": {
                    "line": 150,
                    "column": 20
                },
                "end": {
                    "line": 150,
                    "column": 32
                }
            },
            "15": {
                "start": {
                    "line": 151,
                    "column": 20
                },
                "end": {
                    "line": 151,
                    "column": 41
                }
            },
            "16": {
                "start": {
                    "line": 153,
                    "column": 20
                },
                "end": {
                    "line": 153,
                    "column": 66
                }
            },
            "17": {
                "start": {
                    "line": 155,
                    "column": 20
                },
                "end": {
                    "line": 165,
                    "column": 21
                }
            },
            "18": {
                "start": {
                    "line": 156,
                    "column": 24
                },
                "end": {
                    "line": 156,
                    "column": 42
                }
            },
            "19": {
                "start": {
                    "line": 157,
                    "column": 24
                },
                "end": {
                    "line": 157,
                    "column": 72
                }
            },
            "20": {
                "start": {
                    "line": 160,
                    "column": 24
                },
                "end": {
                    "line": 162,
                    "column": 49
                }
            },
            "21": {
                "start": {
                    "line": 164,
                    "column": 24
                },
                "end": {
                    "line": 164,
                    "column": 69
                }
            },
            "22": {
                "start": {
                    "line": 167,
                    "column": 20
                },
                "end": {
                    "line": 167,
                    "column": 40
                }
            },
            "23": {
                "start": {
                    "line": 170,
                    "column": 16
                },
                "end": {
                    "line": 170,
                    "column": 37
                }
            },
            "24": {
                "start": {
                    "line": 173,
                    "column": 12
                },
                "end": {
                    "line": 173,
                    "column": 39
                }
            },
            "25": {
                "start": {
                    "line": 175,
                    "column": 12
                },
                "end": {
                    "line": 175,
                    "column": 28
                }
            },
            "26": {
                "start": {
                    "line": 179,
                    "column": 0
                },
                "end": {
                    "line": 179,
                    "column": 57
                }
            }
        },
        "branchMap": {
            "1": {
                "line": 109,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 109,
                            "column": 12
                        },
                        "end": {
                            "line": 109,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 109,
                            "column": 12
                        },
                        "end": {
                            "line": 109,
                            "column": 12
                        }
                    }
                ]
            },
            "2": {
                "line": 109,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 109,
                            "column": 16
                        },
                        "end": {
                            "line": 109,
                            "column": 30
                        }
                    },
                    {
                        "start": {
                            "line": 109,
                            "column": 34
                        },
                        "end": {
                            "line": 109,
                            "column": 40
                        }
                    },
                    {
                        "start": {
                            "line": 109,
                            "column": 44
                        },
                        "end": {
                            "line": 109,
                            "column": 76
                        }
                    }
                ]
            },
            "3": {
                "line": 132,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 132,
                            "column": 30
                        },
                        "end": {
                            "line": 132,
                            "column": 61
                        }
                    },
                    {
                        "start": {
                            "line": 133,
                            "column": 32
                        },
                        "end": {
                            "line": 133,
                            "column": 53
                        }
                    }
                ]
            },
            "4": {
                "line": 134,
                "type": "binary-expr",
                "locations": [
                    {
                        "start": {
                            "line": 134,
                            "column": 30
                        },
                        "end": {
                            "line": 134,
                            "column": 49
                        }
                    },
                    {
                        "start": {
                            "line": 134,
                            "column": 53
                        },
                        "end": {
                            "line": 134,
                            "column": 55
                        }
                    }
                ]
            },
            "5": {
                "line": 141,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 141,
                            "column": 12
                        },
                        "end": {
                            "line": 141,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 141,
                            "column": 12
                        },
                        "end": {
                            "line": 141,
                            "column": 12
                        }
                    }
                ]
            },
            "6": {
                "line": 148,
                "type": "if",
                "locations": [
                    {
                        "start": {
                            "line": 148,
                            "column": 12
                        },
                        "end": {
                            "line": 148,
                            "column": 12
                        }
                    },
                    {
                        "start": {
                            "line": 148,
                            "column": 12
                        },
                        "end": {
                            "line": 148,
                            "column": 12
                        }
                    }
                ]
            },
            "7": {
                "line": 157,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 157,
                            "column": 54
                        },
                        "end": {
                            "line": 157,
                            "column": 63
                        }
                    },
                    {
                        "start": {
                            "line": 157,
                            "column": 66
                        },
                        "end": {
                            "line": 157,
                            "column": 71
                        }
                    }
                ]
            },
            "8": {
                "line": 160,
                "type": "cond-expr",
                "locations": [
                    {
                        "start": {
                            "line": 161,
                            "column": 36
                        },
                        "end": {
                            "line": 161,
                            "column": 50
                        }
                    },
                    {
                        "start": {
                            "line": 162,
                            "column": 36
                        },
                        "end": {
                            "line": 162,
                            "column": 48
                        }
                    }
                ]
            }
        },
        "code": [
            "(function () { YUI.add('dataschema-text', function (Y, NAME) {",
            "",
            "/**",
            " * Provides a DataSchema implementation which can be used to work with",
            " * delimited text data.",
            " *",
            " * @module dataschema",
            " * @submodule dataschema-text",
            " */",
            "",
            "/**",
            "Provides a DataSchema implementation which can be used to work with",
            "delimited text data.",
            "",
            "See the `apply` method for usage.",
            "",
            "@class DataSchema.Text",
            "@extends DataSchema.Base",
            "@static",
            "**/",
            "",
            "var Lang = Y.Lang,",
            "    isString = Lang.isString,",
            "    isUndef  = Lang.isUndefined,",
            "",
            "    SchemaText = {",
            "",
            "        ////////////////////////////////////////////////////////////////////////",
            "        //",
            "        // DataSchema.Text static methods",
            "        //",
            "        ////////////////////////////////////////////////////////////////////////",
            "        /**",
            "        Applies a schema to a string of delimited data, returning a normalized",
            "        object with results in the `results` property. The `meta` property of",
            "        the response object is present for consistency, but is assigned an",
            "        empty object.  If the input data is absent or not a string, an `error`",
            "        property will be added.",
            "",
            "        Use _schema.resultDelimiter_ and _schema.fieldDelimiter_ to instruct",
            "        `apply` how to split up the string into an array of data arrays for",
            "        processing.",
            "",
            "        Use _schema.resultFields_ to specify the keys in the generated result",
            "        objects in `response.results`. The key:value pairs will be assigned",
            "        in the order of the _schema.resultFields_ array, assuming the values",
            "        in the data records are defined in the same order.",
            "",
            "        _schema.resultFields_ field identifiers are objects with the following",
            "        properties:",
            "",
            "          * `key`   : <strong>(required)</strong> The property name you want",
            "                the data value assigned to in the result object (String)",
            "          * `parser`: A function or the name of a function on `Y.Parsers` used",
            "                to convert the input value into a normalized type.  Parser",
            "                functions are passed the value as input and are expected to",
            "                return a value.",
            "",
            "        If no value parsing is needed, you can use just the desired property",
            "        name string as the field identifier instead of an object (see example",
            "        below).",
            "",
            "        @example",
            "            // Process simple csv",
            "            var schema = {",
            "                    resultDelimiter: \"\\n\",",
            "                    fieldDelimiter: \",\",",
            "                    resultFields: [ 'fruit', 'color' ]",
            "                },",
            "                data = \"Banana,yellow\\nOrange,orange\\nEggplant,purple\";",
            "",
            "            var response = Y.DataSchema.Text.apply(schema, data);",
            "",
            "            // response.results[0] is { fruit: \"Banana\", color: \"yellow\" }",
            "",
            "",
            "            // Use parsers",
            "            schema.resultFields = [",
            "                {",
            "                    key: 'fruit',",
            "                    parser: function (val) { return val.toUpperCase(); }",
            "                },",
            "                'color' // mix and match objects and strings",
            "            ];",
            "",
            "            response = Y.DataSchema.Text.apply(schema, data);",
            "",
            "            // response.results[0] is { fruit: \"BANANA\", color: \"yellow\" }",
            "         ",
            "        @method apply",
            "        @param {Object} schema Schema to apply.  Supported configuration",
            "            properties are:",
            "          @param {String} schema.resultDelimiter Character or character",
            "              sequence that marks the end of one record and the start of",
            "              another.",
            "          @param {String} [schema.fieldDelimiter] Character or character",
            "              sequence that marks the end of a field and the start of",
            "              another within the same record.",
            "          @param {Array} [schema.resultFields] Field identifiers to",
            "              assign values in the response records. See above for details.",
            "        @param {String} data Text data.",
            "        @return {Object} An Object with properties `results` and `meta`",
            "        @static",
            "        **/",
            "        apply: function(schema, data) {",
            "            var data_in = data,",
            "                data_out = { results: [], meta: {} };",
            "",
            "            if (isString(data) && schema && isString(schema.resultDelimiter)) {",
            "                // Parse results data",
            "                data_out = SchemaText._parseResults.call(this, schema, data_in, data_out);",
            "            } else {",
            "                data_out.error = new Error(\"Text schema parse failure\");",
            "            }",
            "",
            "            return data_out;",
            "        },",
            "",
            "        /**",
            "         * Schema-parsed list of results from full data",
            "         *",
            "         * @method _parseResults",
            "         * @param schema {Array} Schema to parse against.",
            "         * @param text_in {String} Text to parse.",
            "         * @param data_out {Object} In-progress parsed data to update.",
            "         * @return {Object} Parsed data object.",
            "         * @static",
            "         * @protected",
            "         */",
            "        _parseResults: function(schema, text_in, data_out) {",
            "            var resultDelim = schema.resultDelimiter,",
            "                fieldDelim  = isString(schema.fieldDelimiter) &&",
            "                                schema.fieldDelimiter,",
            "                fields      = schema.resultFields || [],",
            "                results     = [],",
            "                parse       = Y.DataSchema.Base.parse,",
            "                results_in, fields_in, result, item,",
            "                field, key, value, i, j;",
            "",
            "            // Delete final delimiter at end of string if there",
            "            if (text_in.slice(-resultDelim.length) === resultDelim) {",
            "                text_in = text_in.slice(0, -resultDelim.length);",
            "            }",
            "",
            "            // Split into results",
            "            results_in = text_in.split(schema.resultDelimiter);",
            "",
            "            if (fieldDelim) {",
            "                for (i = results_in.length - 1; i >= 0; --i) {",
            "                    result = {};",
            "                    item = results_in[i];",
            "",
            "                    fields_in = item.split(schema.fieldDelimiter);",
            "",
            "                    for (j = fields.length - 1; j >= 0; --j) {",
            "                        field = fields[j];",
            "                        key = (!isUndef(field.key)) ? field.key : field;",
            "                        // FIXME: unless the key is an array index, this test",
            "                        // for fields_in[key] is useless.",
            "                        value = (!isUndef(fields_in[key])) ?",
            "                                    fields_in[key] :",
            "                                    fields_in[j];",
            "",
            "                        result[key] = parse.call(this, value, field);",
            "                    }",
            "",
            "                    results[i] = result;",
            "                }",
            "            } else {",
            "                results = results_in;",
            "            }",
            "",
            "            data_out.results = results;",
            "",
            "            return data_out;",
            "        }",
            "    };",
            "",
            "Y.DataSchema.Text = Y.mix(SchemaText, Y.DataSchema.Base);",
            "",
            "",
            "}, '@VERSION@', {\"requires\": [\"dataschema-base\"]});",
            "",
            "}());"
        ]
    }
}