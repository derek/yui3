if (typeof _yuitest_coverage == "undefined"){
    _yuitest_coverage = {};
    _yuitest_coverline = function(src, line){
        var coverage = _yuitest_coverage[src];
        if (!coverage.lines[line]){
            coverage.calledLines++;
        }
        coverage.lines[line]++;
    };
    _yuitest_coverfunc = function(src, name, line){
        var coverage = _yuitest_coverage[src],
            funcId = name + ":" + line;
        if (!coverage.functions[funcId]){
            coverage.calledFunctions++;
        }
        coverage.functions[funcId]++;
    };
}
_yuitest_coverage["build/model-observable/model-observable.js"] = {
    lines: {},
    functions: {},
    coveredLines: 0,
    calledLines: 0,
    coveredFunctions: 0,
    calledFunctions: 0,
    path: "build/model-observable/model-observable.js",
    code: []
};
_yuitest_coverage["build/model-observable/model-observable.js"].code=["YUI.add('model-observable', function (Y, NAME) {","","","var BaseObservable = Y.BaseObservable,","    Lang           = Y.Lang,","    ModelBase      = Y.Model.Base,","    ModelBaseProto = ModelBase.prototype,","    YObject        = Y.Object,","","    /**","    Fired when one or more attributes on this model are changed.","","    @event change","    @param {Object} changed Hash of change information for each attribute that","        changed. Each item in the hash has the following properties:","      @param {Any} changed.newVal New value of the attribute.","      @param {Any} changed.prevVal Previous value of the attribute.","      @param {String|null} changed.src Source of the change event, if any.","    **/","    EVT_CHANGE = 'change',","","    /**","    Fired when an error occurs, such as when the model doesn't validate or when","    a sync layer response can't be parsed.","","    @event error","    @param {Any} error Error message, object, or exception generated by the","      error. Calling `toString()` on this should result in a meaningful error","      message.","    @param {String} src Source of the error. May be one of the following (or any","      custom error source defined by a Model subclass):","","      * `load`: An error loading the model from a sync layer. The sync layer's","        response (if any) will be provided as the `response` property on the","        event facade.","","      * `parse`: An error parsing a JSON response. The response in question will","        be provided as the `response` property on the event facade.","","      * `save`: An error saving the model to a sync layer. The sync layer's","        response (if any) will be provided as the `response` property on the","        event facade.","","      * `validate`: The model failed to validate. The attributes being validated","        will be provided as the `attributes` property on the event facade.","    **/","    EVT_ERROR = 'error',","","    /**","    Fired after model attributes are loaded from a sync layer.","","    @event load","    @param {Object} parsed The parsed version of the sync layer's response to","        the load request.","    @param {any} response The sync layer's raw, unparsed response to the load","        request.","    @since 3.5.0","    **/","    EVT_LOAD = 'load',","","    /**","    Fired after model attributes are saved to a sync layer.","","    @event save","    @param {Object} [parsed] The parsed version of the sync layer's response to","        the save request, if there was a response.","    @param {any} [response] The sync layer's raw, unparsed response to the save","        request, if there was one.","    @since 3.5.0","    **/","    EVT_SAVE = 'save';","","function ModelObservable() {","    BaseObservable.apply(this, arguments);","}","","ModelObservable.prototype = {","    // -- HACKS!!! -------------------------------------------------------------","","    // These references to `Y.Model.Base.prototype` are to preserve these","    // Attribute method overrides. Model.Observable uses AttributeObservable,","    // so when used as a class extension, AttributeObservable's implementations","    // of these methods will overwrite Model.Base's explicit overrides.","    //","    // The plain is to remove the need for Model.Base to have these overrides of","    // Attribute methods, and instead move features down into Attribute and/or","    // use difference implementations of these features such that they do not","    // require overriding these three methods.","    addAttr : ModelBaseProto.addAttr,","    set     : ModelBaseProto.set,","    setAttrs: ModelBaseProto.setAttrs,","","    // -- Public Methods -------------------------------------------------------","","    /**","    Destroys this model instance and removes it from its containing lists, if","    any.","","    The _callback_, if one is provided, will be called after the model is","    destroyed.","","    If `options.remove` is `true`, then this method delegates to the `sync()`","    method to delete the model from the persistence layer, which is an","    asynchronous action. In this case, the _callback_ (if provided) will be","    called after the sync layer indicates success or failure of the delete","    operation.","","    @method destroy","    @param {Object} [options] Sync options. It's up to the custom sync","        implementation to determine what options it supports or requires, if","        any.","      @param {Boolean} [options.remove=false] If `true`, the model will be","        deleted via the sync layer in addition to the instance being destroyed.","    @param {callback} [callback] Called after the model has been destroyed (and","        deleted via the sync layer if `options.remove` is `true`).","      @param {Error|null} callback.err If an error occurred, this parameter will","        contain the error. Otherwise _err_ will be `null`.","    @chainable","    **/","    destroy: function (options, callback) {","        this.onceAfter('destroy', function () {","            this._destroy(options, callback);","        });","","        return BaseObservable.prototype.destroy.apply(this, arguments);","    },","","    /**","    Called to parse the _response_ when the model is loaded from the server.","    This method receives a server _response_ and is expected to return an","    attribute hash.","","    The default implementation assumes that _response_ is either an attribute","    hash or a JSON string that can be parsed into an attribute hash. If","    _response_ is a JSON string and either `Y.JSON` or the native `JSON` object","    are available, it will be parsed automatically. If a parse error occurs, an","    `error` event will be fired and the model will not be updated.","","    You may override this method to implement custom parsing logic if necessary.","","    @method parse","    @param {Any} response Server response.","    @return {Object} Attribute hash.","    **/","    parse: function (response) {","        if (typeof response === 'string') {","            try {","                return Y.JSON.parse(response);","            } catch (ex) {","                this.fire(EVT_ERROR, {","                    error   : ex,","                    response: response,","                    src     : 'parse'","                });","","                return null;","            }","        }","","        return response;","    },","","    // -- Protected Event Handlers ---------------------------------------------","","    /**","    Duckpunches the `_defAttrChangeFn()` provided by `Y.Attribute` so we can","    have a single global notification when a change event occurs.","","    @method _defAttrChangeFn","    @param {EventFacade} e","    @protected","    **/","    _defAttrChangeFn: function (e) {","        var attrName = e.attrName;","","        if (!this._setAttrVal(attrName, e.subAttrName, e.prevVal, e.newVal)) {","            // Prevent \"after\" listeners from being invoked since nothing changed.","            e.stopImmediatePropagation();","        } else {","            e.newVal = this.get(attrName);","","            if (e._transaction) {","                e._transaction[attrName] = e;","            }","        }","    },","","    // TODO: Document method.","    _handleRead: function (err, response, options, callback) {","        var facade, parsed;","","        facade = {","            options : options,","            response: response","        };","","        if (err) {","            facade.error = err;","            facade.src   = 'load';","","            this.fire(EVT_ERROR, facade);","        } else {","            // Lazy publish.","            if (!this._loadEvent) {","                this._loadEvent = this.publish(EVT_LOAD, {","                    preventable: false","                });","            }","","            parsed = facade.parsed = this._parse(response);","","            this.setAttrs(parsed, options);","            this.changed = {};","","            this.fire(EVT_LOAD, facade);","        }","","        if (callback) {","            callback(err, response);","        }","    },","","    // TODO: Document method.","    _handleSave: function (err, response, options, callback) {","        var facade, parsed;","","        facade = {","            options : options,","            response: response","        };","","        if (err) {","            facade.error = err;","            facade.src   = 'save';","","            this.fire(EVT_ERROR, facade);","        } else {","            // Lazy publish.","            if (!this._saveEvent) {","                this._saveEvent = this.publish(EVT_SAVE, {","                    preventable: false","                });","            }","","            if (response) {","                parsed = facade.parsed = this._parse(response);","                this.setAttrs(parsed, options);","            }","","            this.changed = {};","            this.fire(EVT_SAVE, facade);","        }","","        if (callback) {","            callback(err, response);","        }","    },","","    // TODO: Document method.","    _processAttrsTransaction: function (transaction, options) {","        if (YObject.isEmpty(transaction)) {","            return;","        }","","        ModelBase.prototype._processAttrsTransaction.apply(this, arguments);","","        if (!options.silent) {","            // Lazy publish for the change event.","            if (!this._changeEvent) {","                this._changeEvent = this.publish(EVT_CHANGE, {","                    preventable: false","                });","            }","","            this.fire(EVT_CHANGE, Y.merge(options, {","                changed: this.lastChange","            }));","        }","    },","","    /**","    Calls the public, overridable `validate()` method and fires an `error` event","    if validation fails.","","    @method _validate","    @param {Object} attributes Attribute hash.","    @param {Function} callback Validation callback.","        @param {Any} [callback.err] Value on failure, non-value on success.","    @protected","    **/","    _validate: function (attributes, callback) {","        var self = this;","","        this.validate(attributes, function (err) {","            if (Lang.isValue(err)) {","                // Validation failed. Fire an error.","                self.fire(EVT_ERROR, {","                    attributes: attributes,","                    error     : err,","                    src       : 'validate'","                });","","                callback(err);","                return;","            }","","            callback();","        });","    }","};","","// Mix statics.","ModelObservable._ATTR_CFG = BaseObservable._ATTR_CFG.concat();","","// Mix prototype.","Y.mix(ModelObservable, BaseObservable, false, null, 1);","","// -- Namespace ----------------------------------------------------------------","Y.Model.Observable = ModelObservable;","","","}, '@VERSION@', {\"requires\": [\"base-observable\", \"model-base\"]});"];
_yuitest_coverage["build/model-observable/model-observable.js"].lines = {"1":0,"4":0,"73":0,"74":0,"77":0,"121":0,"122":0,"125":0,"146":0,"147":0,"148":0,"150":0,"156":0,"160":0,"174":0,"176":0,"178":0,"180":0,"182":0,"183":0,"190":0,"192":0,"197":0,"198":0,"199":0,"201":0,"204":0,"205":0,"210":0,"212":0,"213":0,"215":0,"218":0,"219":0,"225":0,"227":0,"232":0,"233":0,"234":0,"236":0,"239":0,"240":0,"245":0,"246":0,"247":0,"250":0,"251":0,"254":0,"255":0,"261":0,"262":0,"265":0,"267":0,"269":0,"270":0,"275":0,"292":0,"294":0,"295":0,"297":0,"303":0,"304":0,"307":0,"313":0,"316":0,"319":0};
_yuitest_coverage["build/model-observable/model-observable.js"].functions = {"ModelObservable:73":0,"(anonymous 2):121":0,"destroy:120":0,"parse:145":0,"_defAttrChangeFn:173":0,"_handleRead:189":0,"_handleSave:224":0,"_processAttrsTransaction:260":0,"(anonymous 3):294":0,"_validate:291":0,"(anonymous 1):1":0};
_yuitest_coverage["build/model-observable/model-observable.js"].coveredLines = 66;
_yuitest_coverage["build/model-observable/model-observable.js"].coveredFunctions = 11;
_yuitest_coverline("build/model-observable/model-observable.js", 1);
YUI.add('model-observable', function (Y, NAME) {


_yuitest_coverfunc("build/model-observable/model-observable.js", "(anonymous 1)", 1);
_yuitest_coverline("build/model-observable/model-observable.js", 4);
var BaseObservable = Y.BaseObservable,
    Lang           = Y.Lang,
    ModelBase      = Y.Model.Base,
    ModelBaseProto = ModelBase.prototype,
    YObject        = Y.Object,

    /**
    Fired when one or more attributes on this model are changed.

    @event change
    @param {Object} changed Hash of change information for each attribute that
        changed. Each item in the hash has the following properties:
      @param {Any} changed.newVal New value of the attribute.
      @param {Any} changed.prevVal Previous value of the attribute.
      @param {String|null} changed.src Source of the change event, if any.
    **/
    EVT_CHANGE = 'change',

    /**
    Fired when an error occurs, such as when the model doesn't validate or when
    a sync layer response can't be parsed.

    @event error
    @param {Any} error Error message, object, or exception generated by the
      error. Calling `toString()` on this should result in a meaningful error
      message.
    @param {String} src Source of the error. May be one of the following (or any
      custom error source defined by a Model subclass):

      * `load`: An error loading the model from a sync layer. The sync layer's
        response (if any) will be provided as the `response` property on the
        event facade.

      * `parse`: An error parsing a JSON response. The response in question will
        be provided as the `response` property on the event facade.

      * `save`: An error saving the model to a sync layer. The sync layer's
        response (if any) will be provided as the `response` property on the
        event facade.

      * `validate`: The model failed to validate. The attributes being validated
        will be provided as the `attributes` property on the event facade.
    **/
    EVT_ERROR = 'error',

    /**
    Fired after model attributes are loaded from a sync layer.

    @event load
    @param {Object} parsed The parsed version of the sync layer's response to
        the load request.
    @param {any} response The sync layer's raw, unparsed response to the load
        request.
    @since 3.5.0
    **/
    EVT_LOAD = 'load',

    /**
    Fired after model attributes are saved to a sync layer.

    @event save
    @param {Object} [parsed] The parsed version of the sync layer's response to
        the save request, if there was a response.
    @param {any} [response] The sync layer's raw, unparsed response to the save
        request, if there was one.
    @since 3.5.0
    **/
    EVT_SAVE = 'save';

_yuitest_coverline("build/model-observable/model-observable.js", 73);
function ModelObservable() {
    _yuitest_coverfunc("build/model-observable/model-observable.js", "ModelObservable", 73);
_yuitest_coverline("build/model-observable/model-observable.js", 74);
BaseObservable.apply(this, arguments);
}

_yuitest_coverline("build/model-observable/model-observable.js", 77);
ModelObservable.prototype = {
    // -- HACKS!!! -------------------------------------------------------------

    // These references to `Y.Model.Base.prototype` are to preserve these
    // Attribute method overrides. Model.Observable uses AttributeObservable,
    // so when used as a class extension, AttributeObservable's implementations
    // of these methods will overwrite Model.Base's explicit overrides.
    //
    // The plain is to remove the need for Model.Base to have these overrides of
    // Attribute methods, and instead move features down into Attribute and/or
    // use difference implementations of these features such that they do not
    // require overriding these three methods.
    addAttr : ModelBaseProto.addAttr,
    set     : ModelBaseProto.set,
    setAttrs: ModelBaseProto.setAttrs,

    // -- Public Methods -------------------------------------------------------

    /**
    Destroys this model instance and removes it from its containing lists, if
    any.

    The _callback_, if one is provided, will be called after the model is
    destroyed.

    If `options.remove` is `true`, then this method delegates to the `sync()`
    method to delete the model from the persistence layer, which is an
    asynchronous action. In this case, the _callback_ (if provided) will be
    called after the sync layer indicates success or failure of the delete
    operation.

    @method destroy
    @param {Object} [options] Sync options. It's up to the custom sync
        implementation to determine what options it supports or requires, if
        any.
      @param {Boolean} [options.remove=false] If `true`, the model will be
        deleted via the sync layer in addition to the instance being destroyed.
    @param {callback} [callback] Called after the model has been destroyed (and
        deleted via the sync layer if `options.remove` is `true`).
      @param {Error|null} callback.err If an error occurred, this parameter will
        contain the error. Otherwise _err_ will be `null`.
    @chainable
    **/
    destroy: function (options, callback) {
        _yuitest_coverfunc("build/model-observable/model-observable.js", "destroy", 120);
_yuitest_coverline("build/model-observable/model-observable.js", 121);
this.onceAfter('destroy', function () {
            _yuitest_coverfunc("build/model-observable/model-observable.js", "(anonymous 2)", 121);
_yuitest_coverline("build/model-observable/model-observable.js", 122);
this._destroy(options, callback);
        });

        _yuitest_coverline("build/model-observable/model-observable.js", 125);
return BaseObservable.prototype.destroy.apply(this, arguments);
    },

    /**
    Called to parse the _response_ when the model is loaded from the server.
    This method receives a server _response_ and is expected to return an
    attribute hash.

    The default implementation assumes that _response_ is either an attribute
    hash or a JSON string that can be parsed into an attribute hash. If
    _response_ is a JSON string and either `Y.JSON` or the native `JSON` object
    are available, it will be parsed automatically. If a parse error occurs, an
    `error` event will be fired and the model will not be updated.

    You may override this method to implement custom parsing logic if necessary.

    @method parse
    @param {Any} response Server response.
    @return {Object} Attribute hash.
    **/
    parse: function (response) {
        _yuitest_coverfunc("build/model-observable/model-observable.js", "parse", 145);
_yuitest_coverline("build/model-observable/model-observable.js", 146);
if (typeof response === 'string') {
            _yuitest_coverline("build/model-observable/model-observable.js", 147);
try {
                _yuitest_coverline("build/model-observable/model-observable.js", 148);
return Y.JSON.parse(response);
            } catch (ex) {
                _yuitest_coverline("build/model-observable/model-observable.js", 150);
this.fire(EVT_ERROR, {
                    error   : ex,
                    response: response,
                    src     : 'parse'
                });

                _yuitest_coverline("build/model-observable/model-observable.js", 156);
return null;
            }
        }

        _yuitest_coverline("build/model-observable/model-observable.js", 160);
return response;
    },

    // -- Protected Event Handlers ---------------------------------------------

    /**
    Duckpunches the `_defAttrChangeFn()` provided by `Y.Attribute` so we can
    have a single global notification when a change event occurs.

    @method _defAttrChangeFn
    @param {EventFacade} e
    @protected
    **/
    _defAttrChangeFn: function (e) {
        _yuitest_coverfunc("build/model-observable/model-observable.js", "_defAttrChangeFn", 173);
_yuitest_coverline("build/model-observable/model-observable.js", 174);
var attrName = e.attrName;

        _yuitest_coverline("build/model-observable/model-observable.js", 176);
if (!this._setAttrVal(attrName, e.subAttrName, e.prevVal, e.newVal)) {
            // Prevent "after" listeners from being invoked since nothing changed.
            _yuitest_coverline("build/model-observable/model-observable.js", 178);
e.stopImmediatePropagation();
        } else {
            _yuitest_coverline("build/model-observable/model-observable.js", 180);
e.newVal = this.get(attrName);

            _yuitest_coverline("build/model-observable/model-observable.js", 182);
if (e._transaction) {
                _yuitest_coverline("build/model-observable/model-observable.js", 183);
e._transaction[attrName] = e;
            }
        }
    },

    // TODO: Document method.
    _handleRead: function (err, response, options, callback) {
        _yuitest_coverfunc("build/model-observable/model-observable.js", "_handleRead", 189);
_yuitest_coverline("build/model-observable/model-observable.js", 190);
var facade, parsed;

        _yuitest_coverline("build/model-observable/model-observable.js", 192);
facade = {
            options : options,
            response: response
        };

        _yuitest_coverline("build/model-observable/model-observable.js", 197);
if (err) {
            _yuitest_coverline("build/model-observable/model-observable.js", 198);
facade.error = err;
            _yuitest_coverline("build/model-observable/model-observable.js", 199);
facade.src   = 'load';

            _yuitest_coverline("build/model-observable/model-observable.js", 201);
this.fire(EVT_ERROR, facade);
        } else {
            // Lazy publish.
            _yuitest_coverline("build/model-observable/model-observable.js", 204);
if (!this._loadEvent) {
                _yuitest_coverline("build/model-observable/model-observable.js", 205);
this._loadEvent = this.publish(EVT_LOAD, {
                    preventable: false
                });
            }

            _yuitest_coverline("build/model-observable/model-observable.js", 210);
parsed = facade.parsed = this._parse(response);

            _yuitest_coverline("build/model-observable/model-observable.js", 212);
this.setAttrs(parsed, options);
            _yuitest_coverline("build/model-observable/model-observable.js", 213);
this.changed = {};

            _yuitest_coverline("build/model-observable/model-observable.js", 215);
this.fire(EVT_LOAD, facade);
        }

        _yuitest_coverline("build/model-observable/model-observable.js", 218);
if (callback) {
            _yuitest_coverline("build/model-observable/model-observable.js", 219);
callback(err, response);
        }
    },

    // TODO: Document method.
    _handleSave: function (err, response, options, callback) {
        _yuitest_coverfunc("build/model-observable/model-observable.js", "_handleSave", 224);
_yuitest_coverline("build/model-observable/model-observable.js", 225);
var facade, parsed;

        _yuitest_coverline("build/model-observable/model-observable.js", 227);
facade = {
            options : options,
            response: response
        };

        _yuitest_coverline("build/model-observable/model-observable.js", 232);
if (err) {
            _yuitest_coverline("build/model-observable/model-observable.js", 233);
facade.error = err;
            _yuitest_coverline("build/model-observable/model-observable.js", 234);
facade.src   = 'save';

            _yuitest_coverline("build/model-observable/model-observable.js", 236);
this.fire(EVT_ERROR, facade);
        } else {
            // Lazy publish.
            _yuitest_coverline("build/model-observable/model-observable.js", 239);
if (!this._saveEvent) {
                _yuitest_coverline("build/model-observable/model-observable.js", 240);
this._saveEvent = this.publish(EVT_SAVE, {
                    preventable: false
                });
            }

            _yuitest_coverline("build/model-observable/model-observable.js", 245);
if (response) {
                _yuitest_coverline("build/model-observable/model-observable.js", 246);
parsed = facade.parsed = this._parse(response);
                _yuitest_coverline("build/model-observable/model-observable.js", 247);
this.setAttrs(parsed, options);
            }

            _yuitest_coverline("build/model-observable/model-observable.js", 250);
this.changed = {};
            _yuitest_coverline("build/model-observable/model-observable.js", 251);
this.fire(EVT_SAVE, facade);
        }

        _yuitest_coverline("build/model-observable/model-observable.js", 254);
if (callback) {
            _yuitest_coverline("build/model-observable/model-observable.js", 255);
callback(err, response);
        }
    },

    // TODO: Document method.
    _processAttrsTransaction: function (transaction, options) {
        _yuitest_coverfunc("build/model-observable/model-observable.js", "_processAttrsTransaction", 260);
_yuitest_coverline("build/model-observable/model-observable.js", 261);
if (YObject.isEmpty(transaction)) {
            _yuitest_coverline("build/model-observable/model-observable.js", 262);
return;
        }

        _yuitest_coverline("build/model-observable/model-observable.js", 265);
ModelBase.prototype._processAttrsTransaction.apply(this, arguments);

        _yuitest_coverline("build/model-observable/model-observable.js", 267);
if (!options.silent) {
            // Lazy publish for the change event.
            _yuitest_coverline("build/model-observable/model-observable.js", 269);
if (!this._changeEvent) {
                _yuitest_coverline("build/model-observable/model-observable.js", 270);
this._changeEvent = this.publish(EVT_CHANGE, {
                    preventable: false
                });
            }

            _yuitest_coverline("build/model-observable/model-observable.js", 275);
this.fire(EVT_CHANGE, Y.merge(options, {
                changed: this.lastChange
            }));
        }
    },

    /**
    Calls the public, overridable `validate()` method and fires an `error` event
    if validation fails.

    @method _validate
    @param {Object} attributes Attribute hash.
    @param {Function} callback Validation callback.
        @param {Any} [callback.err] Value on failure, non-value on success.
    @protected
    **/
    _validate: function (attributes, callback) {
        _yuitest_coverfunc("build/model-observable/model-observable.js", "_validate", 291);
_yuitest_coverline("build/model-observable/model-observable.js", 292);
var self = this;

        _yuitest_coverline("build/model-observable/model-observable.js", 294);
this.validate(attributes, function (err) {
            _yuitest_coverfunc("build/model-observable/model-observable.js", "(anonymous 3)", 294);
_yuitest_coverline("build/model-observable/model-observable.js", 295);
if (Lang.isValue(err)) {
                // Validation failed. Fire an error.
                _yuitest_coverline("build/model-observable/model-observable.js", 297);
self.fire(EVT_ERROR, {
                    attributes: attributes,
                    error     : err,
                    src       : 'validate'
                });

                _yuitest_coverline("build/model-observable/model-observable.js", 303);
callback(err);
                _yuitest_coverline("build/model-observable/model-observable.js", 304);
return;
            }

            _yuitest_coverline("build/model-observable/model-observable.js", 307);
callback();
        });
    }
};

// Mix statics.
_yuitest_coverline("build/model-observable/model-observable.js", 313);
ModelObservable._ATTR_CFG = BaseObservable._ATTR_CFG.concat();

// Mix prototype.
_yuitest_coverline("build/model-observable/model-observable.js", 316);
Y.mix(ModelObservable, BaseObservable, false, null, 1);

// -- Namespace ----------------------------------------------------------------
_yuitest_coverline("build/model-observable/model-observable.js", 319);
Y.Model.Observable = ModelObservable;


}, '@VERSION@', {"requires": ["base-observable", "model-base"]});
